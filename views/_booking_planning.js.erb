require(['YSDFormatter', 'jquery', 'ysdtemplate', 'YSDGui', 'jquery.ui', 'jquery.ui.datepicker-es', 'jquery.validate',
         'jquery.ui.datepicker.validation','jquery.formparams', 'jquery.fixedtable', 'jquery.toast', 'datejs',
        'jquery.bootstrap.wizard'],
        function(YSDFormatter, $, tmpl, YSDGui) {

  /* =============================================================================================== *
   *                                                                                                 *
   *                                                                                                 *
   * Developer notes:                                                                                *
   *                                                                                                 *
   *   There are two tricks :                                                                        *
   *                                                                                                 *
   *   - $(window).scroll() event to control which is the top visible row and its position           *
   *   - jquery ui draggable and its events: start - stop - drag - revert                            *
   *                                                                                                 *
   *                                                                                                 *
   *   How do we control the top scroll while dragging ? (the automatic response does not work well) *
   *                                                                                                 *
   *   - on $(window).scroll event, $(window).scrollTop() position is stored in topVisiblePosition   *
   *     and first visible row and the stock reference are stored in topVisibleRow and               *
   *     topVisibleItem                                                                              *
   *                                                                                                 *
   *   - while dragging the item, if it reach the topVisibleRow, force an scroll to the prior row    *
   *     so the effect is smoother and it feels to respond better                                    *
   *                                                                                                 *
   *   How do the original position is restored if drag is not permitted:                            *
   *                                                                                                 *
   *   - on start drag event, topVisiblePosition is stored in startDragWindowScrollTop to            *
   *     restore the it if the drag is reverted using $(window).scrollTop(startDragWindowScrollTop)  *
   *                                                                                                 *
   * =============================================================================================== */

  bookingPlanningModel = {

    days: ['DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'],
    months: ['ENE','FEB','MAR','ABR','MAY','JUN','JUL','AGO','SEP','OCT','NOV','DIC'],

    dateFrom: null,                      /* Date from to be shown */
    dateTo: null,                        /* Date to to be shown */
    numberOfDays: <%=@planning_style=='compact' ? 16 : 31%>,                    /* Number of days to be shown */
    cycle24Hours: <%=@product_family.cycle_of_24_hours && !@planning_full_day%>,
    hoursBetweenReturnPickup: <%=@planning_hours_between_return_pickup%>,

    references: null,                    /* The loaded references (table rows) */
    planningData : null,                 /* The loaded data - reservation to show */

    selectedReference: null,             /* The current selected reference during DRAGGING*/
    selectedItemId: null,                /* The current selected id (pre-reservation or booking_line_resource) during DRAGGING */
    selectedItemOrigin: null,            /* The origin : booking or prereservation during DRAGGING*/
    selectedItemCategoryCode: null,      /* The selected item category code during DRAGGING*/
    selectedItemPosition: null,          /* The selected item position during DRAGGING */
    newReference: null,                  /* New stock reference to assign or reassign */
    newCategory: null,                   /* New stock reference / category to assign or reassign */

    tablePlanningTrHeight: null,         /* The height of a resource row */
    topVisibleItem: null,                /* The top visible stock item reference */
    topVisibleRow: null,                 /* The top visible row (tr element in planning_table) */
    topVisiblePosition: null,            /* The top visible position $(window).scrollTop() of the top visible row */
    startDragWindowScrollTop: null,      /* Store topVisiblePosition when starting drag and drop to restore if reverted */
    assignationResourceData: null,
    planningStyle: '<%=@planning_style%>',
    planningMeasurements: {
        'compact': {
           colReferenceWidth: 160,
           tableHeaderLineHeight: 25,
           tableColumnWidth: 50,
           tableLineHeight: 10,
        },
        'extended': {
            colReferenceWidth: 140,
            tableHeaderLineHeight: 10,
            tableColumnWidth: 20,
            tableLineHeight: 10,
        }
    },

    checkConflicts: function(reference) {
        // Get the source (the dragging item)
        var source = this.planningData.find(function(element){
                           return element.id2 == bookingPlanningModel.selectedItemId &&
                                  element.origin == bookingPlanningModel.selectedItemOrigin;
                     });
        var overlap = null;
        if (source) {
            // check no conflicts
            overlap = this.planningData.find(function(element){
                var source_date_from = Date.parseExact(source.date_from + " " + source.time_from,'yyyy-M-d HH:mm').add(-bookingPlanningModel.hoursBetweenReturnPickup).hours();
                var source_date_to = Date.parseExact(source.date_to + " " + source.time_to,'yyyy-M-d HH:mm').add(bookingPlanningModel.hoursBetweenReturnPickup).hours();
                var element_date_from = Date.parseExact(element.date_from + " " + element.time_from,'yyyy-M-d HH:mm');
                var element_date_to = Date.parseExact(element.date_to + " " + element.time_to,'yyyy-M-d HH:mm');
                return (element.booking_item_reference == reference) &&                     // same reference
                       (!(element.origin == source.origin && element.id2 == source.id2)) && // different item
                    ((source_date_from >= element_date_from && source_date_from <= element_date_to) ||
                     (source_date_from <= element_date_from && source_date_to >= element_date_to) ||
                     (source_date_to >= element_date_from && source_date_to <= element_date_to));
            });
        }
        return {source: source, overlap: overlap};
    },

    loadData: function() { /* Load the planning data */

      this.dateTo = new Date(bookingPlanningModel.dateFrom).add(bookingPlanningModel.numberOfDays-1).days();

  	  if (this.dateFrom != null && this.dateTo != null) {
  	    var from = this.dateFrom.toString('yyyy-MM-dd');
  	    var to = this.dateTo.toString('yyyy-MM-dd');
  	    var url = '/api/booking/planning-summary?from='+from+'&to='+to;
 	      $.ajax({
  	        type: 'GET',
  	   	    url : url,
  	   	    contentType: 'application/json; charset=utf-8',
  		      dataType : 'json',
  		      success: function(data, textStatus, jqXHR) {
               bookingPlanningModel.references = data.references;
               bookingPlanningModel.planningData = data.result;
               bookingPlanningView.update('data_available');
            },
            error: function(textStatus, jqXHR) {
              alert('Error obteniendo datos del planning');
            }
          });  	 
 	    }
      else {
    	bookingPlanningView.update('not_enough_information');
      }
    },

    assignResource: function() { /* Reassign a resource */
        var url = '/admin/booking/planning-reassign-reservation';
        url+='?id='+this.selectedItemId+'&resource='+this.newReference+'&type='+this.selectedItemOrigin;
        $.ajax({
            type: 'POST',
            url : url,
            success: function(data, textStatus, jqXHR) {
                bookingPlanningView.update('assigned');
            },
            error: function(textStatus, jqXHR) {
                alert('Error asignando');
            }
        });
    },

    reassignResource: function() { /* Reassign a resource */
      //var url = '/admin/booking/planning-reassign-reservation';
      var url = '/api/booking/planning/reassign';
      url+='?id='+this.selectedItemId+'&resource='+this.newReference+'&type='+this.selectedItemOrigin;
      $.ajax({
          type: 'POST',
          url : url,
          success: function(data, textStatus, jqXHR) {
            // Update the model with the updated data
            var idx = bookingPlanningModel.planningData.findIndex(function(element){
                return element.id2 == data.id2;
            });
            if (idx > -1) {
                bookingPlanningModel.planningData[idx] = data;
            }
            bookingPlanningView.update('reassigned');
          },
          error: function(textStatus, jqXHR) {
            alert('Error reasignando');
          }
      });    
    },

    changeColor: function(id, type, color) { /* Change the color */
      var url = '/admin/booking/planning-change-color';
      url+='?id='+id+'&type='+type+'&color='+escape(color);
      $.ajax({
          type: 'POST',
          url : url,
          success: function(data, textStatus, jqXHR) {
            bookingPlanningView.update('changed_color');
            $('.planning_reservation[data-id='+id+'][data-origin='+type+']').css('background-color', color);
              $('.planning_reservation[data-id='+id+'][data-origin='+type+']').css('color', bookingPlanningView.textColor(color));
            $('.planning_reservation[data-id='+id+'][data-origin='+type+']').attr('data-planning-color', color);
          },
          error: function(textStatus, jqXHR) {
            alert('Error eliminando prereserva');
          }
      });       
    }

  };

  /* ==================================================================================== */
  /* Controller                                                                           */
  /* ==================================================================================== */

  bookingPlanningController = {

    planningDateChanged: function() {
        bookingPlanningModel.dateFrom = $('#planning_date').datepicker('getDate');
        bookingPlanningModel.loadData();
    },

    priorWeekButtonClick: function() {
        bookingPlanningModel.dateFrom.add(-7).days();
        $('#planning_date').datepicker('setDate', bookingPlanningModel.dateFrom);
        bookingPlanningModel.loadData();
    },

    priorDayButtonClick: function() {
        bookingPlanningModel.dateFrom.add(-1).days();
        $('#planning_date').datepicker('setDate', bookingPlanningModel.dateFrom);
        bookingPlanningModel.loadData();
    },

    nextDayButtonClick: function() {
        bookingPlanningModel.dateFrom.add(1).days();
        $('#planning_date').datepicker('setDate', bookingPlanningModel.dateFrom);
        bookingPlanningModel.loadData();
    },

    nextWeekButtonClick: function() {
        bookingPlanningModel.dateFrom.add(7).days();
        $('#planning_date').datepicker('setDate', bookingPlanningModel.dateFrom);
        bookingPlanningModel.loadData();
    },

    windowScroll: function() {

        // Register the information during scroll to be used during drag reservation

        bookingPlanningModel.topVisiblePosition = $(window).scrollTop();
        bookingPlanningModel.topVisibleRow = Math.floor(bookingPlanningModel.topVisiblePosition / bookingPlanningModel.tablePlanningTrHeight);
        bookingPlanningModel.topVisibleItem = $('#planning_table tr:nth('+bookingPlanningModel.topVisibleRow+')').attr('id');

    },

    onStartDragReservation: function(event, ui) { /* Start drag */

        bookingPlanningModel.startDragWindowScrollTop = bookingPlanningModel.topVisiblePosition;

    },

    onDragReservation: function (event, ui) { /* During dragging - check the top visible row*/

        // If the dragging element is over the top visible row, "force" a manual scroll
        var element = event.target;
        var top = $(element).position().top;
        var tableTop = $('#planning_table').position().top;
        top -= tableTop;

        if (top <= bookingPlanningModel.topVisiblePosition && top > 0) {
            var applyScroll = $(window).scrollTop() - bookingPlanningModel.tablePlanningTrHeight;
            $(window).scrollTop(applyScroll);
        }

    },

    onEndDragReservation: function(jQuerySelector) { /* End dragging - adjust the element position and reassign*/

        var dFrom = bookingPlanningModel.dateFrom.toISOString().substring(0,10);

        var headerHeight = parseInt($('th.date_header').css('height').replace('px',''));
        var resourceWidth = parseInt($('td.planning_reference').css('width').replace('px',''));
        var resourceHeight = parseInt($('td.planning_reference').css('height').replace('px',''));
        var oneDayWidth = parseInt($('th.date_header').css('width').replace('px',''));

        var position = $(jQuerySelector).position();
        var top = position.top;
        var left = position.left;
        var height = parseInt($(jQuerySelector).css('height').replace('px',''));

        top -= $('#planning_table').position().top; // Take into account planning table position
        left += 2;

        var posTop = Math.floor( (top + (height/2)) / resourceHeight);
        var posLeft = Math.floor( (left - resourceWidth) / oneDayWidth);

        // Adjust the top to fit in a cell
        var newTop = posTop * resourceHeight + $('#planning_table').position().top;
        $(jQuerySelector).css({top: newTop});


        bookingPlanningModel.newReference = $($('#planning_table tbody tr')[posTop]).attr('id');
        bookingPlanningModel.newCategory = $($('#planning_table tbody tr')[posTop]).attr('rel');

        // Do the process
        if (bookingPlanningModel.newReference != bookingPlanningModel.selectedReference) {
            //TODO It should be done after reassignation
            $(jQuerySelector).attr('data-resource', bookingPlanningModel.newReference);
            $(jQuerySelector).attr('data-category', bookingPlanningModel.newCategory)
            bookingPlanningView.setupDraggable(jQuerySelector);
            bookingPlanningModel.reassignResource();
        }
    },

    colorChanged: function(id, type, color) { /* Change planning color */

      bookingPlanningModel.changeColor(id, type, color);

    },

    tableCellClick: function(theElement, category, reference, date) {

      $('.planning_reservation').popover('hide');

      if (bookingPlanningModel.assignationResourceData && $('#assignation_resource').is(':visible')) {

          var referenceCategory = theElement.parent().attr('rel');

          <% if @assignation_allow_diferent_categories %>
          if (referenceCategory != bookingPlanningModel.assignationResourceData.bookingCategory) {
              var confirmation = confirm('¿Desea asignar el recurso ' + reference + ' de la categoría ' +
                                          referenceCategory + ' a la reserva de la categoría ' +
                                          bookingPlanningModel.assignationResourceData.bookingCategory + '?');
          }
          else {
              var confirmation = confirm("¿Desea asignar el recurso " + reference + ' a la reserva?');
          }
          <% else %>
          if (referenceCategory != bookingPlanningModel.assignationResourceData.bookingCategory) {
              alert('No puede asignarse un recurso de diferente categoría');
              var confirmation = false;
          }
          else {
              var confirmation = confirm("¿Desea asignar el recurso " + reference + ' a la reserva?');
          }
          <% end %>


          if (confirmation) {
              bookingPlanningModel.selectedItemId = bookingPlanningModel.assignationResourceData.bookingResourceId;
              bookingPlanningModel.newReference = reference;
              bookingPlanningModel.selectedItemOrigin = 'booking';
              bookingPlanningModel.assignResource();
          }
      }
      else {

          var dialog = $('<p>Por favor, seleccione la opción deseada</p>').dialog({
              title: "Nueva reserva o bloqueo de stock",
              width: '425',
              height: '200',
              buttons: {
                  "Nueva reserva":  function() {
                      dialog.dialog('close');
                      planningNewReservationView.show('booking', category, reference, date);
                  },
                  "Bloqueo de stock": function() {
                      dialog.dialog('close');
                      planningNewReservationView.show('prereservation', category, reference, date);
                  }
              }
          });

      }

    },

    closeAssignationResourceButtonClick: function() {

      bookingPlanningView.hideAssignationResource();

    },

    lockDragAndDrop: function() {
        $('.planning_reservation').draggable('disable');
    },

    unlockDragAndDrop: function() {
       $('.planning_reservation').draggable('enable');
    }

  };


  /* ==================================================================================== */
  /* View                                                                                 */
  /* ==================================================================================== */

  bookingPlanningView = {

    init: function() {

      this.setupControls();
      this.setupEvents();
      bookingPlanningModel.loadData();


    },

    setupControls: function() {

      $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );
      var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];
      $('#planning_date').datepicker({
            numberOfMonths:1,
            onSelect: function(dateText){
                bookingPlanningController.planningDateChanged();
            }},
            locale);
      $('#planning_date').datepicker('setDate', new Date(bookingPlanningModel.dateFrom));

    },

    setupEvents: function() {

        $('#prior_week_button').bind('click', function(){
           bookingPlanningController.priorWeekButtonClick();
        });

        $('#prior_day_button').bind('click', function(){
            bookingPlanningController.priorDayButtonClick();
        });

        $('#next_day_button').bind('click', function(){
            bookingPlanningController.nextDayButtonClick();
        });

        $('#next_week_button').bind('click', function(){
            bookingPlanningController.nextWeekButtonClick();
        });

        $('#close_assignation_resource_button').bind('click', function() {
            bookingPlanningController.closeAssignationResourceButtonClick();
        });

        $('#planning_locker').bind('change', function(){
           if ($('#planning_locker').is(':checked')) {
             bookingPlanningController.lockDragAndDrop();
           }
           else {
             bookingPlanningController.unlockDragAndDrop();
           }
        });

        $(window).scroll(function() {
            bookingPlanningController.windowScroll();
        });
    },

    setupPopover: function (jQuerySelector) {

       // Setup the popover
       $(jQuerySelector).popover(
           {title: function() {
                     var origin = $(this).attr('data-origin');
                     if (origin == 'booking') {
                         return 'Reserva';
                     }
                     else {
                         if (origin = 'prereservation') {
                             return 'Bloqueo de stock';
                         }
                     }
                   },
            html: true,
            content: function(){
               var booking = {};
               booking.origin = $(this).attr('data-origin');
               booking.id = $(this).attr('data-id');
               booking.title = $(this).attr('data-booking-title');
               booking.date_from = $(this).attr('data-date-from');
               booking.time_from = $(this).attr('data-time-from');
               booking.date_to = $(this).attr('data-date-to');
               booking.time_to = $(this).attr('data-time-to');
               booking.planning_color = $(this).attr('data-planning-color');
               booking.detail = $(this).attr('data-detail');
               booking.id2 = $(this).attr('data-id-resource');
               booking.category = $(this).attr('data-category');
               booking.requestedCategory = $(this).attr('data-requested-category');
               booking.notes = $(this).attr('data-notes');
               var html = tmpl('planning_reservation_detail')({booking: booking});
               return html;
            },
            trigger: 'manual',
            placement: 'bottom'});

       // Setup event when the popover is shown
       $(jQuerySelector).on('shown.bs.popover', function () {
            $('.color').unbind('change');
            $('.color').bind('change', function () {
                var id = $(this).parent().find('input[name=id]').val();
                var type = $(this).parent().find('input[name=type]').val();
                var color =$(this).val();
                bookingPlanningController.colorChanged(id, type, color);
            });
           // Destroy pre-reservation button click
           $('.destroy_prereservation_button').bind('click', function() {
                destroyStockBlockingController.destroyPrereservationClick($(this).attr('rel'));
           });
           // Add resources to prereservation button click
           $('.modify_prereservation_button').bind('click', function() {
               $('.planning_reservation').popover('hide');
               planningModifyStockBlockingView.show($(this).attr('rel'));
           });
           // Add quantity to reservation button click
           $('.modify_reservation_button').bind('click', function() {
               $('.planning_reservation').popover('hide');
               planningModifyReservationView.show($(this).attr('rel'));
           });
        })

       // Setup event when the planning reservation is clicked
       this.popoverOff();
       this.popoverOn();

    },

    popoverOn: function() { /* activate popover to show reservation information */
        $('.planning_reservation').bind('click', function(e){
            // Hide the current selected item
            $('.planning_reservation').not(this).popover('hide');
            // Check if there are overlapped elements
            var origin = $(this).attr('data-origin');
            var reference = $(this).attr('data-resource');
            var idResource= $(this).attr('data-id-resource');
            var dateFrom = $(this).attr('data-date-from');
            var timeFrom = $(this).attr('data-time-from');
            var dateTo = $(this).attr('data-date-to');
            var timeTo = $(this).attr('data-time-to');
            var overlapped = bookingPlanningModel.planningData.filter(function(element){
                // Same reference
                if (element.booking_item_reference != reference) {
                    return false;
                }
                if (bookingPlanningModel.cycle24Hours) {
                    var source_date_from = Date.parseExact(dateFrom + " " + timeFrom, 'yyyy-M-d HH:mm'); //.add(-bookingPlanningModel.hoursBetweenReturnPickup).hours();
                    var source_date_to = Date.parseExact(dateTo + " " + timeTo, 'yyyy-M-d HH:mm'); //.add(bookingPlanningModel.hoursBetweenReturnPickup).hours();
                    var element_date_from = Date.parseExact(element.date_from + " " + element.time_from, 'yyyy-M-d HH:mm');
                    var element_date_to = Date.parseExact(element.date_to + " " + element.time_to, 'yyyy-M-d HH:mm');
                }
                else {
                    var source_date_from = Date.parseExact(dateFrom, 'yyyy-M-d');
                    var source_date_to = Date.parseExact(dateTo, 'yyyy-M-d');
                    var element_date_from = Date.parseExact(element.date_from, 'yyyy-M-d');
                    var element_date_to = Date.parseExact(element.date_to, 'yyyy-M-d');
                }

                var value = (source_date_from >= element_date_from && source_date_from <= element_date_to) ||
                            (source_date_from <= element_date_from && source_date_to >= element_date_to) ||
                            (source_date_to >= element_date_from && source_date_to <= element_date_to);
                return value;
            });

            if (overlapped != null && overlapped.length > 1) {
                var html = tmpl('script_select_reservation')({overlapped: overlapped});
                $('#reservation_container .modal-title').html('Traer reserva al frente');
                $('#reservation_container .modal-body').html(html);
                $('.reservation_chooser').unbind('change');
                $('.reservation_chooser').bind('change', function(){
                   var selector = overlapped.map(function(element) {
                                                    return '#'+element.origin+element.id;
                                                 }).join(',');
                   var maxZindex = Math.max.apply(null, $(selector).toArray().map(function (element) { return parseInt($(element).css('z-index')); }));

                   var id = $(this).val(); // TODO Choose the max z-index from the candidates
                   $('#'+id).css('z-index', maxZindex+1);
                });
                $('.color').unbind('change');
                $('.color').bind('change', function () {
                    var id = $(this).parent().find('input[name=id]').val();
                    var type = $(this).parent().find('input[name=type]').val();
                    var color =$(this).val();
                    bookingPlanningController.colorChanged(id, type, color);
                });
                // Destroy pre-reservation button click
                $('.destroy_prereservation_button').unbind('click');
                $('.destroy_prereservation_button').bind('click', function() {
                    $('#reservation_container').modal('hide');
                    destroyStockBlockingController.destroyPrereservationClick($(this).attr('rel'));
                });
                // Add resources to prereservation button click
                $('.modify_prereservation_button').unbind('click');
                $('.modify_prereservation_button').bind('click', function() {
                    $('#reservation_container').modal('hide');
                    var id = $(this).attr('rel');
                    setTimeout(function(){
                        planningModifyStockBlockingView.show(id);
                    }, 500);
                });
                // Add quantity to reservation button click
                $('.modify_reservation_button').unbind('click');
                $('.modify_reservation_button').bind('click', function() {
                    $('#reservation_container').modal('hide');
                    var id = $(this).attr('rel');
                    setTimeout(function() {
                        planningModifyReservationView.show(id);
                    }, 500);
                });
                $('#reservation_container').modal('show');
            }
            else {
                $(this).popover('toggle');
            }
        });
    },

    popoverOff: function() { /* Deactivate popover */
        $('.planning_reservation').unbind('click');
    },

    setupDraggable: function(jQuerySelector) { /* Setup draggable on the reservations */
        $(jQuerySelector).draggable(
            {
                axis: 'y',
                cursor: "move",
                containment: '#planning_table tbody',
                scroll: true,
                opacity: 0.4,
                handle: '.planning_reservation',

                start: function (event, ui) {
                    bookingPlanningModel.selectedReference = $(this).attr('data-resource');
                    bookingPlanningModel.selectedItemId = $(this).attr('data-id-resource');
                    bookingPlanningModel.selectedItemOrigin = $(this).attr('data-origin');
                    bookingPlanningModel.selectedItemCategoryCode = $(this).attr('data-category');
                    bookingPlanningModel.selectedItemPosition = $(this).position();
                    bookingPlanningView.popoverOff();
                    bookingPlanningController.onStartDragReservation();
                },
                drag: function(event, ui) {
                      bookingPlanningController.onDragReservation(event, ui, $(this));
                },
                stop: function (event, ui) {
                    if (!event.reverted) {
                        bookingPlanningController.onEndDragReservation($(this));
                    }
                    setTimeout(function() {
                        bookingPlanningView.popoverOn();
                    },100);
                },
                revert: function() {
                    var dFrom = bookingPlanningModel.dateFrom.toISOString().substring(0,10);

                    var resourceHeight = parseInt($('td.planning_reference').css('height').replace('px',''));

                    var position = $(this).position();
                    var top = position.top;
                    top -= $('#planning_table').position().top; // Take into account planning table position
                    var height = parseInt($(this).css('height').replace('px',''));

                    var posTop = Math.floor( (top + (height/2)) / resourceHeight);

                    <% unless @assignation_allow_diferent_categories %>
                    var category = $($('#planning_table tbody tr')[posTop]).attr('rel');
                    if (category != bookingPlanningModel.selectedItemCategoryCode ) {
                        alert('Lo sentimos. No se puede asignar un recurso de diferente categoría.');
                        // Scroll to show the original position
                        $(window).scrollTop(bookingPlanningModel.startDragWindowScrollTop);
                        return true;
                    }
                    <% end %>

                    var reference = $($('#planning_table tbody tr')[posTop]).attr('id');
                    var conflicts = bookingPlanningModel.checkConflicts(reference);

                    <% if @assignation_allow_busy_resource %>
                    if (conflicts.overlap != null) {
                        <% if @product_family.time_to_from %>
                        var msg = "entrega : " + conflicts.source.date_from  + " " +
                                  conflicts.source.time_from  + " devolución : " + conflicts.source.date_to
                                  + " " + conflicts.source.time_to;
                        var msg_overlap = "entrega : " + conflicts.overlap.date_from  + " " +
                                          conflicts.overlap.time_from + " devolución : " + conflicts.overlap.date_to
                                          + " " + conflicts.overlap.time_to;
                        <% else %>
                        var msg = "entrega : " + conflicts.source.date_from + " devolución : " + conflicts.source.date_to;
                        var msg_overlap = "entrega : " + conflicts.overlap.date_from + " devolución : " + conflicts.overlap.date_to;
                        <% end %>
                        var result = !confirm('El recurso ' + reference + ' ya tiene una reserva o bloqueo asignada #' + conflicts.overlap.id + ' de ' + conflicts.overlap.title +  ' (' + msg_overlap  + ') ' +
                                              'que se solapa con la reserva o bloqueo #' + conflicts.source.id + ' de ' + conflicts.source.title  + ' (' + msg + '). ¿Está seguro?');
                        if (result) {
                            $(window).scrollTop(bookingPlanningModel.startDragWindowScrollTop);
                        }
                        return result;
                    }
                    <% else %>
                    if (conflicts.overlap != null) {
                       alert('Lo sentimos. El recurso ' + resource + ' no está disponible');
                       return true;
                    }
                    <% end %>

                    return false;
                }
            }
        );

    },

    createPlanningTable: function() { /* Creates the planning table */

        this.removeItemsInPlanning();
        $('#planning_table_header thead').empty();
        $('#planning_table tbody').empty();

        // Create the column for the references
        $("#planning_table_header thead").append("<tr></tr>");
        $("#planning_table_header thead tr:first").append("<th style='width:"+
           bookingPlanningModel.planningMeasurements[bookingPlanningModel.planningStyle]['colReferenceWidth'].toString()+
           "px;line-height:"+
           bookingPlanningModel.planningMeasurements[bookingPlanningModel.planningStyle]['tableHeaderLineHeight'].toString()+"px; text-align:center; border: 1px solid #cccccc; background:white'>"+''+"</th>");
        for (item in bookingPlanningModel.references) {
            $("#planning_table tbody").append("<tr id='" + item + "' rel='" + bookingPlanningModel.references[item] + "'></tr>");
            var title = bookingPlanningModel.planningStyle == 'compact' ? item+'<span class="planning_item_category">'+bookingPlanningModel.references[item]+'</span>' : 
                        '<span class="planning_item_category_extended">'+bookingPlanningModel.references[item]+'</span>'+ ' - ' +item;
            $("#planning_table tbody tr#"+item+"").append(
                "<td class='planning_reference' style='width:"+bookingPlanningModel.planningMeasurements[bookingPlanningModel.planningStyle]['colReferenceWidth'].toString()+
           "px;line-height:"+bookingPlanningModel.planningMeasurements[bookingPlanningModel.planningStyle]['tableLineHeight'].toString()+"px;' data-reference='"+item+"'>"+
                     title+"</td>");
        }

        var date= new Date(bookingPlanningModel.dateFrom);
        var days = (new Date(bookingPlanningModel.dateTo) - new Date(bookingPlanningModel.dateFrom)/(1000*60*60*24)) + 1;

        while (date <= bookingPlanningModel.dateTo) {
            var title = '<span class="planning_header_day_of_week">' + bookingPlanningModel.days[date.getDay()] + '</span>'+
                        '<span class="planning_header_day">' + date.getDate() + '</span>' +
                        '<span class="planning_header_month">' + bookingPlanningModel.months[date.getMonth()] + '</span>';
            var datestr = YSDFormatter.formatDate(date, 'yyyy-MM-dd');
            var firstMonthDay = date.getDate() == 1 ? true : false;
            var oddMonth = (date.getMonth() + 1) % 2 == 0;
            var oddMonthHeaderClass = oddMonth ? 'odd-month-header' : '';
            var firstMonthDayColumnClass = firstMonthDay ? 'first-month-day' : '';

            // Create the header row (with dates)
            var headerClass = 'date_header';
            if (oddMonth) {
                headerClass += ' ';
                headerClass += oddMonthHeaderClass;
            }
            if (firstMonthDay && date.getTime() != bookingPlanningModel.dateFrom.getTime()) {
                headerClass += ' ';
                headerClass += firstMonthDayColumnClass;
            }
            $("#planning_table_header thead tr:first").append("<th class='" + headerClass + "' style='width:"+bookingPlanningModel.planningMeasurements[bookingPlanningModel.planningStyle]['tableColumnWidth'].toString()+
           "px;line-height:"+bookingPlanningModel.planningMeasurements[bookingPlanningModel.planningStyle]['tableHeaderLineHeight'].toString()+"px;text-align:center' rel='" + datestr + "'>" + title + "</th>");
            for (item in bookingPlanningModel.references) {
                var category = bookingPlanningModel.references[item];
                var value = '';
                var cellInformation = "style='width:"+bookingPlanningModel.planningMeasurements[bookingPlanningModel.planningStyle]['tableColumnWidth'].toString()+
           "px;line-height:"+bookingPlanningModel.planningMeasurements[bookingPlanningModel.planningStyle]['tableLineHeight'].toString()+"px'";
                cellInformation += " data-date='" + datestr + "' " + "data-resource='" + item + "' data-category='"+category+"'";
                var cellClasses = 'data';
                if (firstMonthDay && date.getTime() != bookingPlanningModel.dateFrom.getTime()) {
                    cellClasses += ' ';
                    cellClasses += firstMonthDayColumnClass;
                }
                cellInformation += "class='" + cellClasses + "'";
                $("#planning_table tbody tr#"+item+"").append("<td " + cellInformation + ">" + value + "</td>");
            }
            date.add(1).days();

        }

        $(".odd-month-header").css("background-color", "#dddddd");
        $(".odd-month-header").css("color", "black");
        bookingPlanningModel.tablePlanningTrHeight = $('#planning_table tr').height();

        $(".data").bind('click', function(event) {
            var theElement = $(this);
            bookingPlanningController.tableCellClick(theElement,
                $(this).attr('data-category'),
                $(this).attr('data-resource'),
                $(this).attr('data-date'));
        });

    },

    fillPlanningTable: function() { /* Fill the planning table */


        for (var idx=0;idx<bookingPlanningModel.planningData.length;idx++) {

            var item = bookingPlanningModel.planningData[idx];
            if (item.booking_item_reference != null) {
                this.showItemInPlanning(item.origin, item.id, item.id2, item.item_id,
                                        item.requested_item_id, item.booking_item_reference,
                                        item.date_from, item.time_from, item.date_to, item.time_to,
                                        item.title, item.planning_color, item.detail, item.notes);
            }

        }

        bookingPlanningView.setupDraggable('.planning_reservation');
        bookingPlanningView.setupPopover('.planning_reservation');

    },

    showItemInPlanning(origin, id, idResource, category, requestedCategory, resource, dateFrom, timeFrom,
                       dateTo, timeTo, title, backgroundColor, detail, notes) { /* Show an item in the planning */

        var exceedsDateFrom = false;
        var exceedsDateTo = false;
        var dFrom = dateFrom;
        var dTo = dateTo;
        var from = bookingPlanningModel.dateFrom.toString('yyyy-MM-dd'); //.toISOString().substring(0,10);
        var to = bookingPlanningModel.dateTo.toString('yyyy-MM-dd'); //.toISOString().substring(0,10)

        // Avoid if it is not represented in the planning
        if (dFrom > to || dTo < from) {
            return;
        }

        if (dFrom < from) {
            dFrom = from;
            exceedsDateFrom = true;
        }
        if (dTo > to) {
            dTo = to;
            exceedsDateTo = true;
        }
        var days = (new Date(dTo) - new Date(dFrom))/(1000*60*60*24) + 1;

        var positionResource = $('tr[id='+resource+']').position();

        if (positionResource != null) {
            var positionDateFrom = $('th.date_header[rel=' + dFrom + ']').position();
            var positionDateTo = $('th.date_header[rel=' + dTo + ']').position();
            var height = $('tr[id=' + resource + ']').height();
            var oneDayWidth = parseInt($('th.date_header').css('width').replace('px','')); //$('th.date_header').width() + 4 + 2; // + 4 padding + 2 border

            var top = positionResource.top;
            var left = positionDateFrom.left;
            var width = positionDateTo.left - left + oneDayWidth;

            if (bookingPlanningModel.cycle24Hours) { // Start at 50% and ends at 50% of the cell

                if (!exceedsDateFrom) {
                    left += oneDayWidth / 2;
                }
                else {
                    width += (oneDayWidth / 2);
                }

                width -= oneDayWidth;

                // Adjust
                if (exceedsDateTo) {
                    width += (oneDayWidth / 2);
                }
            }


            top += $('#planning_table').position().top;
            left += $('#planning_table').position().left;

            var html = tmpl('planning_reservation')({
                id: id, origin: origin, idResource: idResource,
                dateFrom: dateFrom, timeFrom: timeFrom,
                dateTo: dateTo, timeTo: timeTo,
                category: category, resource: resource, requestedCategory: requestedCategory,
                booking_title: title, detail: detail, notes: notes,
                backgroundColor: backgroundColor,
                borderColor: this.lightenDarkenColor(backgroundColor, -40),
                color: this.textColor(backgroundColor)
            });
            $(html).height(height).css({top: top, left: left, width: width}).appendTo('#parent');
        }
        else {
            console.log('Resource: ' + resource + ' not found . Reservation : ' + id);
        }
    },

    removeItemsInPlanning: function() { /* Remove the items in the planning */

      $('.planning_reservation').remove();

    },


    lightenDarkenColor: function(col, amt) {

      if (col == null) {
          return 'rgb(0,0,0)';
      }

      var usePound = false;

      if (col[0] == "#") {
          col = col.slice(1);
          usePound = true;
      }

      var num = parseInt(col,16);

      var r = (num >> 16) + amt;

      if (r > 255) r = 255;
      else if  (r < 0) r = 0;

      var b = ((num >> 8) & 0x00FF) + amt;

      if (b > 255) b = 255;
      else if  (b < 0) b = 0;

      var g = (num & 0x0000FF) + amt;

      if (g > 255) g = 255;
      else if (g < 0) g = 0;

      return (usePound?"#":"") + String("000000" + (g | (b << 8) | (r << 16)).toString(16)).slice(-6);

    },

    textColor: function(color) {

        var text_color = "rgb(0,0,0)";

        var rgb = this.hexToRgb(color);

        if (rgb != null) {
            var brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;

            if (brightness < 123) {
                text_color = "rgb(255,255,255)";
            }
        }

        return text_color;

    },

    hexToRgb: function(hex) {
                var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                return result ? {
                    r: parseInt(result[1], 16),
                    g: parseInt(result[2], 16),
                    b: parseInt(result[3], 16)
                } : null;
    },

    update: function(event, value) { /* Update the GUI */
  	  switch (event) {

  		case 'data_available':

  		  this.createPlanningTable();
  		  this.fillPlanningTable();

        $('.data').on('mouseover', function() {
            $(this).closest('tr').addClass('highlight');
            $(this).closest('table').find('.data:nth-child(' + ($(this).index() + 1) + ')').addClass('highlight');
        });
        $('.data').on('mouseout', function() {
            $(this).closest('tr').removeClass('highlight');
            $(this).closest('table').find('.data:nth-child(' + ($(this).index() + 1) + ')').removeClass('highlight');
        });
        $('.planning_reservation').on('mouseover', function(){
            var dateFrom = $(this).attr('data-date-from');
            var row = $('tr[id='+$(this).attr('data-resource')+']');
            var column = row.find('td[data-date='+dateFrom+']');
            row.addClass('highlight');
            row.closest('table').find('.data:nth-child(' + (column.index() + 1) + ')').addClass('highlight');
        });
        $('.planning_reservation').on('mouseout', function() {
            var dateFrom = $(this).attr('data-date-from');
            var row = $('tr[id='+$(this).attr('data-resource')+']');
            var column = row.find('td[data-date='+dateFrom+']');
            row.removeClass('highlight');
            row.closest('table').find('.data:nth-child(' + (column.index() + 1) + ')').removeClass('highlight');
        });
        if ($('#planning_locker').is(':checked')) {
            bookingPlanningController.lockDragAndDrop();
        }
        else {
            bookingPlanningController.unlockDragAndDrop();
        }

  		  break;

          case 'assigned': // Assigned reservation
        $.toast({
            heading: 'Asignación de stock',
            text: 'La asignación se ha realizado correctamente',
            position: 'top-right',
            bgColor: 'rgb(56, 154, 56)',
            textColor: 'white',
            loader: false,
            stack: false
        });

        var item = {
              origin: 'booking',
              id: bookingPlanningModel.assignationResourceData.bookingId,
              id2: bookingPlanningModel.assignationResourceData.bookingResourceId,
              item_id: bookingPlanningModel.assignationResourceData.bookingCategory,
              booking_item_reference: bookingPlanningModel.newReference,
              date_from: bookingPlanningModel.assignationResourceData.bookingFrom,
              time_from: bookingPlanningModel.assignationResourceData.bookingTimeFrom,
              date_to: bookingPlanningModel.assignationResourceData.bookingTo,
              time_to: bookingPlanningModel.assignationResourceData.bookingTimeTo,
              title: bookingPlanningModel.assignationResourceData.bookingCustomer,
              planning_color: 'rgb(102, 255, 102)'
          };
        bookingPlanningModel.planningData.push(item);

        var parent = $('#booking-line-resource-'+bookingPlanningModel.assignationResourceData.bookingResourceId).parent();
        $('#booking-line-resource-'+bookingPlanningModel.assignationResourceData.bookingResourceId).remove();
        if (parent.children().length == 0) {
           parent.parent().remove();
        }
        var reservationCount = parseInt($('#pending_asignation_button span').html())-1;
        if (reservationCount > 0) {
            $('#pending_asignation_button span').html(reservationCount);
            $('#pending_reservations_count').html('('+reservationCount+')');
        }
        else {
            $('#pending_asignation_button').hide();
        }
        bookingPlanningView.hideAssignationResource();
        break;

      case 'reassigned': // Reassigned reservation
        $.toast({
              heading: 'Reasignación de stock',
              text: 'La reasignación se ha realizado correctamente',
              position: 'top-right',
              bgColor: 'rgb(56, 154, 56)',
              textColor: 'white',
              loader: false,
              stack: false
        });
        break;

      case 'changed_color': // After change a color
          $.toast({
              heading: 'Color cambiado',
              text: 'El cambio de color se ha realizado correctamente',
              position: 'top-right',
              bgColor: 'rgb(56, 154, 56)',
              textColor: 'white',
              loader: false,
              stack: false
          });
        break;

  		case 'not_enough_informationnot_enough_information':
  		  alert('No hay suficientes datos para obtener la información');
  		  break;
  	  }
    },

    showAssignationResource: function(data) {

        if (!$('#assignation_resource').is(':visible')) {
            var height = parseInt($('#assignation_resource').css('height').replace('px',''));
            $('#assignation_resource').show();
            $('.gap').css('top', parseInt($('.gap').css('top').replace('px', '')) + height + 'px');
            $('#planning_table_header').css('top', parseInt($('#planning_table_header').css('top').replace('px', '')) + height + 'px');
            $('#planning_table').css('top', parseInt($('#planning_table').css('top').replace('px', '')) + height + 'px');
            this.update('data_available');
        }
        $('#assignation_resource_booking_id').html(data.bookingId);
        $('#assignation_resource_booking_customer').html(data.bookingCustomer);
        $('#assignation_resource_booking_date_from').html(data.bookingDateFrom);
        $('#assignation_resource_booking_date_to').html(data.bookingDateTo);
        $('#assignation_resource_booking_category').html(data.bookingCategory);
        $('#assignation_resource_booking_line_resource_id').val(data.bookingResourceId);
        $('#assignation_resource_booking_customer_height_weight').html(data.bookingCustomerHeight+'/'+data.bookingCustomerWeight);
        $('#assignation_resource_booking_driver_date_for_birth').html(data.bookingDriverDateOfBirth + ' ('+data.bookingDriverAge+')');

        bookingPlanningModel.assignationResourceData = data;


        $('#planning_date').datepicker('setDate', new Date(data.bookingFrom).add(-3).days());
        bookingPlanningController.planningDateChanged();

    },

    hideAssignationResource: function() {

        if ($('#assignation_resource').is(':visible')) {
            var height = parseInt($('#assignation_resource').css('height').replace('px', ''));
            $('.gap').css('top', parseInt($('.gap').css('top').replace('px', '')) - height + 'px');
            $('#planning_table_header').css('top', parseInt($('#planning_table_header').css('top').replace('px', '')) - height + 'px');
            $('#planning_table').css('top', parseInt($('#planning_table').css('top').replace('px', '')) - height + 'px');
            $('#assignation_resource').hide();
            this.update('data_available');
        }

    }

  }

  // ----------------------------------------------------------------------------------------------
  //                              Destroy Stock blocking
  // ----------------------------------------------------------------------------------------------

  destroyStockBlockingModel = {

      id: null,

      destroyPrereservation: function(id) { /* Delete a stock blocking */
          this.id = id;
          var url = '/api/booking/planning/prereservation-line/'+this.id;
          $.ajax({
              type: 'DELETE',
              url : url,
              contentType : 'application/json; charset=utf-8',
              success: function(data, textStatus, jqXHR) {
                  var idx = bookingPlanningModel.planningData.findIndex(function(element){
                      if (element.origin == 'prereservation' && element.id2 == destroyStockBlockingModel.id) {
                          return true;
                      }
                      return false;
                  });
                  if (idx > -1) {
                      bookingPlanningModel.planningData.splice(idx, 1);
                  }
                  destroyStockBlockingView.update('destroyed_preservation');
              },
              error: function(textStatus, jqXHR) {
                  alert('Error eliminando bloqueo de stock');
              }
          });
      }

  };

  destroyStockBlockingController = {

      destroyPrereservationClick: function(id) { /* Destroy preresevation */

          if (confirm('¿Está seguro que desea eliminar el bloqueo de stock?')) {
              destroyStockBlockingModel.destroyPrereservation(id);
          }

      }

  };

  destroyStockBlockingView = {

      update: function(event, value) {

        switch (event) {

            case 'destroyed_preservation': // After destroy a pre-reservation (stock blocking)
                $('.planning_reservation[data-id-resource='+destroyStockBlockingModel.id+']').remove();
                $('.popover').remove();
                $.toast({
                    heading: 'Bloqueo de stock eliminado',
                    text: 'El bloqueo de stock se ha eliminado correctamente',
                    position: 'top-right',
                    bgColor: 'rgb(56, 154, 56)',
                    textColor: 'white',
                    loader: false,
                    stack: false
                });
                break;
        }

      }

  };

  // ----------------------------------------------------------------------------------------------
  //                              Modify prereservation (only for multiple products setup)
  // ----------------------------------------------------------------------------------------------

  planningModifyStockBlockingModel = {

      id: null,
      prereservation : null,
      products: null,

      loadPrereservation: function(id) {

          this.id = id;
          var url = '/api/booking/planning/prereservation/'+id;
          YSDGui.lockBackground('#bbb');
          var unlock = false;
          $.ajax({
              type: 'GET',
              url : url,
              contentType : 'application/json; charset=utf-8',
              crossDomain: true,
              success: function(data, textStatus, jqXHR) {
                  YSDGui.unLockBackground();
                  unlock = true;
                  planningModifyStockBlockingModel.prereservation = data.prereservation;
                  planningModifyStockBlockingModel.products = data.products;
                  planningModifyStockBlockingView.loadSearchResult();
              },
              error: function(data, textStatus, jqXHR) {
                  alert('<%=t.admin_new_reservation.errors.error_searching%>');
              },
              complete: function(jqXHT, textStatus) {
                  if (!unlock) {
                      YSDGui.unLockBackground();
                  }
              }
          });
      },

      updatePrereservation: function() {

          var request = $('form[name=update_prereservation_from]').formParams(false);
          var requestData = JSON.stringify(request);
          var url = '/api/booking/planning/prereservation/' + this.id;

          YSDGui.lockBackground('#bbb');
          var unlock = false;

          $.ajax({
              type: 'PUT',
              url : url,
              data: requestData,
              contentType : 'application/json; charset=utf-8',
              success: function(data, textStatus, jqXHR) {
                  YSDGui.unLockBackground();
                  unlock = true;
                  $.toast({
                      heading: 'Bloqueo de stock actualizado',
                      text: 'El bloqueo de stock se ha actualizado correctamente',
                      position: 'top-right',
                      bgColor: 'rgb(56, 154, 56)',
                      textColor: 'white',
                      loader: false,
                      stack: false
                  });

                  // Update the planning information
                  // Remove the items from the visual planning
                  $('.planning_reservation[data-origin=prereservation][data-id='+planningModifyStockBlockingModel.id+']').remove();
                  // Remove elements from the model
                  bookingPlanningModel.planningData.forEach(function(item, index, object) {
                      if (item.id === planningModifyReservationModel.id && item.origin == 'prereservation') {
                          object.splice(index, 1);
                      }
                  });
                  // Add the items to the model and to the planning
                  if (data && data.length && data.length > 0) {
                      data.forEach(function (item, index, object) {
                          bookingPlanningModel.planningData.push(item);
                          bookingPlanningView.showItemInPlanning(item.origin, item.id, item.id2, item.item_id,
                              item.requested_item_id, item.booking_item_reference, item.date_from, item.time_from,
                              item.date_to, item.time_to, item.title, item.planning_color, item.detail, item.notes)
                      });
                  }

                  bookingPlanningView.setupDraggable('.planning_reservation[data-origin=prereservation][data-id='+planningModifyStockBlockingModel.id+']');
                  bookingPlanningView.setupPopover('.planning_reservation[data-origin=prereservation][data-id='+planningModifyStockBlockingModel.id+']');

                  setTimeout(function() { $('#reservation_container').modal('hide'); }, 1000);
              },
              error: function(data, textStatus, jqXHR) {
                  alert('Error modificando el bloqueo de stock');
              },
              complete: function(jqXHT, textStatus) {
                  if (!unlock) {
                      YSDGui.unLockBackground();
                  }
              }
          });

      }


  };

  planningModifyStockBlockingController = {

      updatePrereservationProductsButtonClick: function() {
          planningModifyStockBlockingModel.updatePrereservation();
      }

  };

  planningModifyStockBlockingView = {

      show: function(id) {
          planningModifyStockBlockingModel.loadPrereservation(id);
      },

      loadSearchResult: function() {

          var productsEmpty = true;
          for (var idx=0;idx<planningModifyStockBlockingModel.products.length;idx++) {
              if (planningModifyStockBlockingModel.products[idx].resources.length > 0) {
                  productsEmpty = false;
                  break;
              }
          }

          var html = tmpl('script_modify_prereservation')({prereservation: planningModifyStockBlockingModel.prereservation,
                                                           products: planningModifyStockBlockingModel.products,
                                                           productsEmpty: productsEmpty});

          $('#reservation_container .modal-title').html('Añadir recursos');
          $('#reservation_container .modal-body').html(html);

          $('#reservation_container').modal('show');

          $('#update_prereservation_button').unbind('click');
          $('#update_prereservation_button').bind('click', function() {
              planningModifyStockBlockingController.updatePrereservationProductsButtonClick();
          });

      }

  };

  // ----------------------------------------------------------------------------------------------
  //                              New reservation
  // ----------------------------------------------------------------------------------------------

  planningNewReservationModel = {

      action: null,
      category: null,
      reference: null,
      date: null,
      id: null,
      searchData: null,
      products: null,
      minDays: <%= @min_days %>,

      search: function() {

          <% if @booking_item_family.driver and @driver_age_rules and @driver_age_rule_definition and !@driver_age_rule_definition.driver_age_rules.empty?  %>
          if ($('#driver_age_rule option:selected').attr('allowed') == 'false') {
              alert($('#driver_age_rule option:selected').attr('not-allowed-message'));
              return;
          }
          <% end %>

          this.searchData = $('form[name=reservation]').formParams(false);
          var requestData = JSON.stringify(this.searchData);

          $.ajax({
              type: 'POST',
              url : '/api/booking/planning/search',
              data: requestData,
              dataType : 'json',
              contentType : 'application/json; charset=utf-8',
              crossDomain: true,
              success: function(data, textStatus, jqXHR) {
                  planningNewReservationModel.products = data.products;
                  planningNewReservationView.loadSearchResult();
              },
              error: function(data, textStatus, jqXHR) {
                  alert('<%=t.admin_new_reservation.errors.error_searching%>');
              }
          });
      },

      createReservation: function() {

          var request = this.buildCreateReservationRequest();
          var requestData = JSON.stringify(request);

          if (this.action == 'booking') {
              var url = '/api/booking/planning/booking';
          }
          else {
              var url = '/api/booking/planning/prereservation';
          }
          this.id = null;

          YSDGui.lockBackground('#bbb');
          var unlock = false;
          $.ajax({
              type: 'POST',
              url : url,
              data: requestData,
              dataType : 'json',
              contentType : 'application/json; charset=utf-8',
              crossDomain: true,
              success: function(data, textStatus, jqXHR) {
                  YSDGui.unLockBackground();
                  unlock = true;
                  var title = (planningNewReservationModel.action == 'booking' ? 'Reserva creada' : 'Bloqueo de stock creado');
                  var text = (planningNewReservationModel.action == 'booking' ? 'La reserva se ha creado correctamente' : 'El bloqueo de stock se ha creado correctamente');
                  $.toast({
                      heading: title,
                      text: text,
                      position: 'top-right',
                      bgColor: 'rgb(56, 154, 56)',
                      textColor: 'white',
                      loader: false,
                      stack: false
                  });

                  // Add the items to the model and to the planning
                  if (data && data.length && data.length > 0) {
                      data.forEach(function (item, index, object) {
                          bookingPlanningModel.planningData.push(item);
                          bookingPlanningView.showItemInPlanning(item.origin, item.id, item.id2, item.item_id,
                              item.requested_item_id, item.booking_item_reference, item.date_from, item.time_from,
                              item.date_to, item.time_to, item.title, item.planning_color, item.detail, item.notes);
                      });

                      bookingPlanningView.setupDraggable('.planning_reservation[data-id=' + data[0].id + ']');
                      bookingPlanningView.setupPopover('.planning_reservation[data-id=' + data[0].id + ']');

                      $('.planning_reservation[data-id=' + data[0].id + ']').on('mouseover', function(){
                          var dateFrom = $(this).attr('data-date-from');
                          var row = $('tr[id='+$(this).attr('data-resource')+']');
                          var column = row.find('td[data-date='+dateFrom+']');
                          row.addClass('highlight');
                          row.closest('table').find('.data:nth-child(' + (column.index() + 1) + ')').addClass('highlight');
                      });
                      $('.planning_reservation[data-id=' + data[0].id + ']').on('mouseout', function() {
                          var dateFrom = $(this).attr('data-date-from');
                          var row = $('tr[id='+$(this).attr('data-resource')+']');
                          var column = row.find('td[data-date='+dateFrom+']');
                          row.removeClass('highlight');
                          row.closest('table').find('.data:nth-child(' + (column.index() + 1) + ')').removeClass('highlight');
                      });

                  }

                  setTimeout(function() { $('#reservation_container').modal('hide'); }, 1000);

              },
              error: function(data, textStatus, jqXHR) {
                  alert('Error creando la reserva');
              },
              complete: function(jqXHT, textStatus) {
                  if (!unlock) {
                      YSDGui.unLockBackground();
                  }

              }
          });

      },

      buildCreateReservationRequest: function() {

          var request = {};

          for (var property in this.searchData) {
              request[property] = this.searchData[property];
          }

          var customer = $('form[name=new_reservation_customer]').formParams(false);
          for (var property in customer) {
                  request[property] = customer[property];
          }

          var products = $('form[name=new_reservation_products_selection]').formParams(false);
          request['products'] = this.productsSelected();

          <% if @booking_item_family and @booking_item_family.multiple_items? %>
            var references = $('form[name=new_reservation_resources_selection]').formParams(false);
            request['references'] = references;
          <% else %>
            var productCode = null;
            for (var p in request['products']) {
                productCode = p;
            }
            request['references'] = {};
            request['references'][productCode] = [planningNewReservationModel.reference];
          <% end %>

          console.log(request);
          return request;
      },

      productsSelected: function() {

          var products = $('form[name=new_reservation_products_selection]').formParams(false);
          var result = {};

          <% if @product_family.multiple_items? %>
          for (var property in products) {
              if (products[property] != "0") {
                  result[property] = products[property];
              }
          }
          <% else %>
          var product = $('.product_chooser').val();
          result[product] = 1;
          <% end %>

          return result;

      }

  }

  planningNewReservationController = {

      dateFromChanged: function() {

        var dateFrom = $('form[name=reservation] input[name=date_from]').datepicker('getDate');
        var dateTo = $('form[name=reservation] input[name=date_from]').datepicker('getDate');

        if (planningNewReservationModel.action == 'booking') {
          <% if @booking_item_family.cycle_of_24_hours %>
          dateTo.add(planningNewReservationModel.minDays).days();
          <% else %>
          dateTo.add(planningNewReservationModel.minDays-1).days();
          <% end %>
        }
        else {
          <% if @booking_item_family.cycle_of_24_hours %>
          dateTo.add(1).days();
          <% end %>
        }

        $('form[name=reservation] input[name=date_to]').datepicker('setDate', dateTo );
        $('form[name=reservation] input[name=date_to]').datepicker('option', 'minDate', dateTo);

      },

      wizardFinishButtonClick: function() {
          if ($('form[name=new_reservation_customer]').valid()) {
              planningNewReservationModel.createReservation();
          }
      }
  }

  planningNewReservationView = {

      show: function(action, category, reference, date) {

          planningNewReservationModel.action = action;
          planningNewReservationModel.category = category;
          planningNewReservationModel.reference = reference;
          planningNewReservationModel.date = date;

          var html = tmpl('script_new_reservation')({
              products: [],
              action: action});

          if (action == 'booking') {
              $('#reservation_container .modal-title').html('Nueva reserva : ' + reference);
          }
          else {
              $('#reservation_container .modal-title').html('Bloqueo de stock : ' + reference);
          }
          $('#reservation_container .modal-body').html(html);

          $('#reservation_container').on('shown.bs.modal', function () {
              planningNewReservationView.setupDateControls();
              planningNewReservationView.setupSearchValidation();
              planningNewReservationView.setupCustomerValidation();
          });
          $('#reservation_container').modal('show');


          // Get forms
          var $reservationForm = $('form[name=reservation]');

          // Prevent forms from submitting on enter key press
          $reservationForm.on('keyup keypress', function (e) {
                  var code = e.keyCode || e.which;
                  if (code === 13) {
                      e.preventDefault();
                      return false;
                  }
              });

          // Init wizard with validation
          $('.js-wizard-validation').bootstrapWizard({
              'tabClass': '',
              'previousSelector': '.wizard-prev',
              'nextSelector': '.wizard-next',
              'onTabShow': function($tab, $nav, $index) {
                  var $total      = $nav.find('li').length;
                  var $current    = $index + 1;

                  // Get vital wizard elements
                  var $wizard     = $nav.parents('.block');
                  var $btnNext    = $wizard.find('.wizard-next');
                  var $btnFinish  = $wizard.find('.wizard-finish');

                  // If it's the last tab then hide the last button and show the finish instead
                  if($current >= $total) {
                      $btnNext.hide();
                      $btnFinish.show();
                  } else {
                      $btnNext.show();
                      $btnFinish.hide();
                  }
              },
              'onNext': function($tab, $navigation, $index) {
                  if ($index == 1) {
                      var $valid = $reservationForm.valid();
                      if (!$valid) {
                          $reservationForm.focusInvalid();
                          return false;
                      }
                      planningNewReservationModel.search();
                  }
                  else if ($index == 2) {
                      var products = false;
                      <% if @booking_item_family.multiple_items? %>
                      for (var idx=0;idx<$('.product_selector').length;idx++){
                          if ($($('.product_selector')[idx]).val() != '0') {
                              products = true;
                              break;
                          }
                      }
                      <% else %>
                      for (var idx=0;idx<$('.product_chooser').length;idx++){
                          if ($($('.product_chooser')).is(':checked')) {
                              products = true;
                              break;
                          }
                      }
                      <% end %>
                      if (!products) {
                          alert('Por favor seleccione el producto')
                          return false;
                      }

                      var $total = $navigation.find('li').length;
                      if ($total == 4) { // Resources step
                          var selectedProducts = planningNewReservationModel.productsSelected();
                          var products = [];
                          for (var property in selectedProducts) {
                              for (var idx = 0; idx < planningNewReservationModel.products.length; idx++) {
                                  if (planningNewReservationModel.products[idx].code == property) {
                                      products.push({
                                          code: property,
                                          resources: planningNewReservationModel.products[idx].resources
                                      });
                                      break;
                                  }
                              }
                          }
                          var html = tmpl('script_resources')({products: products, resource: planningNewReservationModel.reference});
                          $('#new_reservation_resources_container').html(html);
                      }

                  }
              },
              onTabClick: function($tab, $navigation, $index) {
                  return false;
              }
          });

          $('.js-wizard-validation .wizard-finish').click(function() {
              planningNewReservationController.wizardFinishButtonClick();
          });

      },

      setupDateControls: function() {

          $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );
          var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];

          var dateFrom = new Date();
          <% if @booking_item_family.cycle_of_24_hours %>
          var dateTo = new Date().add(1).days();
          <% else %>
          var dateTo = new Date();
          <% end %>

          $('form[name=reservation] input[name=date_from]').datepicker({numberOfMonths:1,
                  minDate: dateFrom,
                  maxDate: new Date(dateFrom.getTime()).add(365).days(),
                  dateFormat: 'dd/mm/yy',
                  firstDay: 1},
              locale);
          $('form[name=reservation] input[name=date_from]').datepicker('setDate', dateFrom);

          $('form[name=reservation] input[name=date_to]').datepicker({numberOfMonths:1,
              minDate: dateTo,
              maxDate: new Date(dateFrom.getTime()).add(365).days(),
              dateFormat: 'dd/mm/yy'}, locale);
          $('form[name=reservation] input[name=date_to]').datepicker('setDate', dateTo);

          $('form[name=reservation] input[name=date_from]').bind('change', function() {
              planningNewReservationController.dateFromChanged();
          });

          $('form[name=reservation] input[name=time_from]').val('<%=@booking_item_family.time_start%>');
          <% if @booking_item_family.cycle_of_24_hours %>
          $('form[name=reservation] input[name=time_to]').val('<%=@booking_item_family.time_end%>');
          <% else %>
          $('form[name=reservation] input[name=time_to]').val('<%=@booking_item_family.time_end%>');
          <% end %>

          if (planningNewReservationModel.date != null) {
              $('form[name=reservation] input[name=date_from]').datepicker('setDate', new Date(planningNewReservationModel.date));
              $('form[name=reservation] input[name=date_from]').trigger('change');
          }

      },

      setupSearchValidation: function () {

          $.validator.addMethod("time24", function(value, element) {
              if (!/^\d{2}:\d{2}$/.test(value)) {
                  return false;
              }
              var parts = value.split(':');
              if (parseInt(parts[0]) > 23 || parseInt(parts[1]) > 59) {
                  return false;
              }
              return true;
          }, "Invalid time format. The format is hh:mm");

          $('form[name=reservation]').validate({

              submitHandler: function(form)
              {
                  //bookingNewController.searchButtonClick();
                  return false;
              },

              rules : {
                  'time_from': {
                      time24: true
                  },
                  'time_to': {
                      time24: true
                  }
              },

              messages : {
                  'time_from': {
                      time24: '<%=t.validations.time_format_invalid%>'
                  },
                  'time_to': {
                      time24: '<%=t.validations.time_format_invalid%>'
                  }
              }

          });

      },

      setupCustomerValidation: function() {

          $('form[name=new_reservation_customer]').validate(
              {

                  submitHandler: function(form) {
                      // TODO Create request
                      return false;
                  },

                  rules : {

                      'customer_name': 'required',
                      'customer_surname' : 'required',

                      'customer_email' : {
                          email: true
                      },
                      'customer_phone': {
                          minlength: 9
                      },
                      'title': {
                          required: true
                      }
                  },

                  messages : {

                      'customer_name': '<%=t.new_booking.customer_name.required%>',
                      'customer_surname' : '<%=t.new_booking.customer_surname.required%>',
                      'customer_email' : {
                          email: '<%=t.new_booking.customer_email.format%>'
                      },
                      'customer_phone': {
                          'minlength': '<%=t.new_booking.customer_phone.min_length%>'
                      },
                      'title': {
                          required: '<%=t.bookings_planning.prereservation.validation.title_required%>'
                      }

                  },

                  errorClass : 'form-reservation-error'

              }
          );

      },

      loadSearchResult: function() {

          var html = tmpl('script_products_search')({products: planningNewReservationModel.products});
          $('#new_reservation_products_container').html(html);

          <% if @booking_item_family and @booking_item_family.multiple_items? %>
            $('form[name=new_reservation_products_selection] select[name='+planningNewReservationModel.category+']').val('1');
          <% else %>
            $('form[name=new_reservation_products_selection] input[name='+planningNewReservationModel.category+']').attr('checked','checked');
          <% end %>


      }

  }

  // ----------------------------------------------------------------------------------------------
  //                              Modify reservation (only for multiple products setup)
  // ----------------------------------------------------------------------------------------------

  planningModifyReservationModel = {

      id: null,
      booking : null,
      products: null,
      extras: null,

      loadReservation: function(id) {

          this.id = id;
          var url = '/api/booking/planning/booking/'+id;
          YSDGui.lockBackground('#bbb');
          var unlock = false;
          $.ajax({
              type: 'GET',
              url : url,
              contentType : 'application/json; charset=utf-8',
              crossDomain: true,
              success: function(data, textStatus, jqXHR) {
                  YSDGui.unLockBackground();
                  unlock = true;
                  planningModifyReservationModel.booking = data.booking;
                  planningModifyReservationModel.products = data.products;
                  planningModifyReservationModel.extras = data.extras;
                  planningModifyReservationView.loadSearchResult();
              },
              error: function(data, textStatus, jqXHR) {
                  alert('<%=t.admin_new_reservation.errors.error_searching%>');
              },
              complete: function(jqXHT, textStatus) {
                  if (!unlock) {
                      YSDGui.unLockBackground();
                  }
              }
          });
      },

      updateReservation: function() {

          var data = $('form[name=products_selection]').formParams(false);
          var requestData = JSON.stringify(data);
          console.log(data);
/*
          var url = '/api/booking/planning/booking/' + this.id;

          YSDGui.lockBackground('#bbb');
          var unlock = false;
          $.ajax({
              type: 'PUT',
              url : url,
              data: requestData,
              dataType : 'json',
              contentType : 'application/json; charset=utf-8',
              crossDomain: true,
              success: function(data, textStatus, jqXHR) {
                  YSDGui.unLockBackground();
                  unlock = true;
                  $.toast({
                      heading: 'Reserva actualizada',
                      text: 'La reserva se ha actualizado correctamente',
                      position: 'top-right',
                      bgColor: 'rgb(56, 154, 56)',
                      textColor: 'white',
                      loader: false,
                      stack: false
                  });

                  planningModifyReservationModel.loadReservation(planningModifyReservationModel.id);
                  // Update the planning information
                  // Remove the items from the visual planning
                  $('.planning_reservation[data-origin=booking][data-id='+planningModifyReservationModel.id+']').remove();
                  // Remove elements from the model
                  bookingPlanningModel.planningData.forEach(function(item, index, object) {
                      if (item.id === planningModifyReservationModel.id) {
                          object.splice(index, 1);
                      }
                  });
                  // Add the items to the model and to the planning
                  if (data && data.length && data.length > 0) {
                      data.forEach(function (item, index, object) {
                          bookingPlanningModel.planningData.push(item);
                          bookingPlanningView.showItemInPlanning(item.origin, item.id, item.id2, item.item_id,
                              item.requested_item_id, item.booking_item_reference, item.date_from, item.time_from,
                              item.date_to, item.time_to, item.title, item.planning_color, item.detail)
                      });
                  }

                  bookingPlanningView.setupDraggable('.planning_reservation[data-origin=booking][data-id='+planningModifyReservationModel.id+']');
                  bookingPlanningView.setupPopover('.planning_reservation[data-origin=booking][data-id='+planningModifyReservationModel.id+']');

                  setTimeout(function() { $('#reservation_container').modal('hide'); }, 1000);

              },
              error: function(data, textStatus, jqXHR) {
                  alert('Error actualizando la reserva');
              },
              complete: function(jqXHT, textStatus) {
                  if (!unlock) {
                      YSDGui.unLockBackground();
                  }

              }
          });
*/

      }

  };

  planningModifyReservationController = {
      updateReservationProductsButtonClick: function() {
          if (confirm('¿Está seguro que dese actualizar los productos de la reserva?')) {
              planningModifyReservationModel.updateReservation();
          }
      }
  };

  planningModifyReservationView = {

      show: function(id) {
          planningModifyReservationModel.loadReservation(id);
      },

      loadSearchResult: function() {

          var productsEmpty = true;
          for (var idx=0;idx<planningModifyReservationModel.products.length;idx++) {
              if (planningModifyReservationModel.products[idx].resources.length > 0) {
                  productsEmpty = false;
                  break;
              }
          }

          var html = tmpl('script_modify_reservation')({booking: planningModifyReservationModel.booking,
                                              products: planningModifyReservationModel.products,
                                              productsEmpty: productsEmpty});

          $('#reservation_container .modal-title').html('Modificar reserva');
          $('#reservation_container .modal-body').html(html);

          for (var idx=0; idx<planningModifyReservationModel.booking.booking_lines.length; idx++) {
              $('input[name'+planningModifyReservationModel.booking.booking_lines[idx].item_id+']').filter('[value='+planningModifyReservationModel.booking.booking_lines[idx].item_id+']').prop('checked', true);
              $('select.product_selector[name='+planningModifyReservationModel.booking.booking_lines[idx].item_id+']').val(planningModifyReservationModel.booking.booking_lines[idx].quantity);
          }

          $('#reservation_container').modal('show');

          $('#update_reservation_products_button').unbind('click');
          $('#update_reservation_products_button').bind('click', function() {
              planningModifyReservationController.updateReservationProductsButtonClick();
          });

      }

  };

});  
