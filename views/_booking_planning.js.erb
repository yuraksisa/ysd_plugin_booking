require(['YSDFormatter', 'jquery', 'ysdtemplate', 'jquery.ui', 'jquery.ui.datepicker-es', 'jquery.validate',
         'jquery.ui.datepicker.validation','jquery.formparams', 'jquery.fixedtable', 'jquery.toast', 'datejs'],
        function(YSDFormatter, $, tmpl) {

  /* =============================================================================================== *
   *                                                                                                 *
   *                                                                                                 *
   * Developer notes:                                                                                *
   *                                                                                                 *
   *   There are two tricks :                                                                        *
   *                                                                                                 *
   *   - $(window).scroll() event to control which is the top visible row and its position           *
   *   - jquery ui draggable and its events: start - stop - drag - revert                            *
   *                                                                                                 *
   *                                                                                                 *
   *   How do we control the top scroll while dragging ? (the automatic response does not work well) *
   *                                                                                                 *
   *   - on $(window).scroll event, $(window).scrollTop() position is stored in topVisiblePosition   *
   *     and first visible row and the stock reference are stored in topVisibleRow and               *
   *     topVisibleItem                                                                              *
   *                                                                                                 *
   *   - while dragging the item, if it reach the topVisibleRow, force an scroll to the prior row    *
   *     so the effect is smoother and it feels to respond better                                    *
   *                                                                                                 *
   *   How do the original position is restored if drag is not permitted:                            *
   *                                                                                                 *
   *   - on start drag event, topVisiblePosition is stored in startDragWindowScrollTop to            *
   *     restore the it if the drag is reverted using $(window).scrollTop(startDragWindowScrollTop)  *
   *                                                                                                 *
   * =============================================================================================== */

  bookingPlanningModel = {

    days: ['LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB', 'DOM'],
    months: ['ENE','FEB','MAR','ABR','MAY','JUN','JUL','AGO','SEP','OCT','NOV','DIC'],

    dateFrom: null,                      /* Date from to be shown */
    dateTo: null,                        /* Date to to be shown */
    numberOfDays: 14,                    /* Number of days to be shown */

    references: null,                    /* The loaded references (table rows) */
    planningData : null,                 /* The loaded data - reservation to show */

    selectedReference: null,             /* The current selected reference during DRAGGING*/
    selectedItemId: null,                /* The current selected id (pre-reservation or booking_line_resource) during DRAGGING */
    selectedItemOrigin: null,            /* The origin : booking or prereservation during DRAGGING*/
    selectedItemCategoryCode: null,      /* The selected item category code during DRAGGING*/
    selectedItemPosition: null,          /* The selected item position during DRAGGING */
    newReference: null,                  /* New stock reference to assign or reassign */

    tablePlanningTrHeight: null,         /* The height of a resource row */
    topVisibleItem: null,                /* The top visible stock item reference */
    topVisibleRow: null,                 /* The top visible row (tr element in planning_table) */
    topVisiblePosition: null,            /* The top visible position $(window).scrollTop() of the top visible row */
    startDragWindowScrollTop: null,      /* Store topVisiblePosition when starting drag and drop to restore if reverted */

    loadData: function() { /* Load the planning data */

      this.dateTo = new Date(bookingPlanningModel.dateFrom).add(bookingPlanningModel.numberOfDays-1).days();

  	  if (this.dateFrom != null && this.dateTo != null) {
  	    var from = this.dateFrom.toString('yyyy-MM-dd');
  	    var to = this.dateTo.toString('yyyy-MM-dd');
  	    var url = '/api/booking/planning-summary?from='+from+'&to='+to;
 	      $.ajax({
  	        type: 'GET',
  	   	    url : url,
  	   	    contentType: 'application/json; charset=utf-8',
  		      dataType : 'json',
  		      success: function(data, textStatus, jqXHR) {
               bookingPlanningModel.references = data.references;
               bookingPlanningModel.planningData = data.result;
               bookingPlanningView.update('data_available');
            },
            error: function(textStatus, jqXHR) {
              alert('Error obteniendo datos del planning');
            }
          });  	 
 	    }
      else {
    	bookingPlanningView.update('not_enough_information');
      }
    },

    reassignResource: function() { /* Reassign a resource */
      var url = '/admin/booking/planning-reassign-reservation';
      url+='?id='+this.selectedItemId+'&resource='+this.newReference+'&type='+this.selectedItemOrigin;
      $.ajax({
          type: 'POST',
          url : url,
          success: function(data, textStatus, jqXHR) {
            bookingPlanningView.update('reassigned');
          },
          error: function(textStatus, jqXHR) {
            alert('Error reasignando');
          }
      });    
    },

    changeColor: function(id, type, color) { /* Change the color */
      var url = '/admin/booking/planning-change-color';
      url+='?id='+id+'&type='+type+'&color='+escape(color);
      $.ajax({
          type: 'POST',
          url : url,
          success: function(data, textStatus, jqXHR) {
            bookingPlanningView.update('changed_color');
            $('.planning_reservation[data-id='+id+'][data-origin='+type+']').css('background-color', color);
              $('.planning_reservation[data-id='+id+'][data-origin='+type+']').css('color', bookingPlanningView.textColor(color));
            $('.planning_reservation[data-id='+id+'][data-origin='+type+']').attr('data-planning-color', color);
          },
          error: function(textStatus, jqXHR) {
            alert('Error eliminando prereserva');
          }
      });       
    }

  };

  /* ==================================================================================== */
  /* Controller                                                                           */
  /* ==================================================================================== */

  bookingPlanningController = {

    planningDateChanged: function() {
        bookingPlanningModel.dateFrom = $('#planning_date').datepicker('getDate');
        bookingPlanningModel.loadData();
    },

    priorWeekButtonClick: function() {
        bookingPlanningModel.dateFrom.add(-7).days();
        $('#planning_date').datepicker('setDate', bookingPlanningModel.dateFrom);
        bookingPlanningModel.loadData();
    },

    priorDayButtonClick: function() {
        bookingPlanningModel.dateFrom.add(-1).days();
        $('#planning_date').datepicker('setDate', bookingPlanningModel.dateFrom);
        bookingPlanningModel.loadData();
    },

    nextDayButtonClick: function() {
        bookingPlanningModel.dateFrom.add(1).days();
        $('#planning_date').datepicker('setDate', bookingPlanningModel.dateFrom);
        bookingPlanningModel.loadData();
    },

    nextWeekButtonClick: function() {
        bookingPlanningModel.dateFrom.add(7).days();
        $('#planning_date').datepicker('setDate', bookingPlanningModel.dateFrom);
        bookingPlanningModel.loadData();
    },

    windowScroll: function() {

        // Register the information during scroll to be used during drag reservation

        bookingPlanningModel.topVisiblePosition = $(window).scrollTop();
        bookingPlanningModel.topVisibleRow = Math.floor(bookingPlanningModel.topVisiblePosition / bookingPlanningModel.tablePlanningTrHeight);
        bookingPlanningModel.topVisibleItem = $('#planning_table tr:nth('+bookingPlanningModel.topVisibleRow+')').attr('id');

        /*console.log('scroll. row = ' + bookingPlanningModel.topVisibleRow +
            ' scrollTop: ' + bookingPlanningModel.topVisiblePosition +
            ' item : ' + bookingPlanningModel.topVisibleItem);*/

    },

    onStartDragReservation: function(event, ui) { /* Start drag */

        bookingPlanningModel.startDragWindowScrollTop = bookingPlanningModel.topVisiblePosition;

    },

    onDragReservation: function (event, ui) { /* During dragging - check the top visible row*/

        // If the dragging element is over the top visible row, "force" a manual scroll
        var element = event.target;
        var top = $(element).position().top;
        var tableTop = $('#planning_table').position().top;
        top -= tableTop;

        if (top <= bookingPlanningModel.topVisiblePosition && top > 0) {
            var applyScroll = $(window).scrollTop() - bookingPlanningModel.tablePlanningTrHeight;
            $(window).scrollTop(applyScroll);
        }

    },

    onEndDragReservation: function(jQuerySelector) { /* End dragging - adjust the element position and reassign*/

        var dFrom = bookingPlanningModel.dateFrom.toISOString().substring(0,10);

        var headerHeight = $('th.date_header[rel='+dFrom+']').height() + 10; // padding
        var resourceWidth = $('td.planning_reference').width() + 6;
        var resourceHeight = $('td.planning_reference').height() + 10 + 2; //padding + border
        var oneDayWidth = $('th.date_header[rel='+dFrom+']').width() + 4; // +4 padding

        var position = $(jQuerySelector).position();
        var top = position.top;
        var left = position.left;

        top -= $('#planning_table').position().top; // Take into account planning table position
        left += 2;

        var posTop = Math.floor((top) / resourceHeight); // Math.floor((top - headerHeight) / resourceHeight);
        var posLeft = Math.floor((left - resourceWidth) / oneDayWidth);

        // Adjust the top to fit in a cell
        var newTop = posTop * resourceHeight + $('#planning_table').position().top; // + headerHeight;
        $(jQuerySelector).css({top: newTop});


        bookingPlanningModel.newReference = $($('#planning_table tbody tr')[posTop]).attr('id');

        // Do the process
        if (bookingPlanningModel.newReference != bookingPlanningModel.selectedReference) {
            //TODO It should be done after reassignation
            $(jQuerySelector).attr('data-resource', bookingPlanningModel.newReference);
            bookingPlanningView.setupDraggable(jQuerySelector);
            bookingPlanningModel.reassignResource();
        }
    },

    colorChanged: function(id, type, color) { /* Change planning color */

      bookingPlanningModel.changeColor(id, type, color);

    },

    tableCellClick: function(theElement, reference, date) {

      stockBlockingView.showStockBlockingForm(reference, date);

    }

  };


  /* ==================================================================================== */
  /* View                                                                                 */
  /* ==================================================================================== */

  bookingPlanningView = {

    init: function() {

      this.setupControls();
      this.setupEvents();
      bookingPlanningModel.loadData();

    },

    setupControls: function() {

      $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );
      var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];
      $('#planning_date').datepicker({
            numberOfMonths:1,
            onSelect: function(dateText){
                bookingPlanningController.planningDateChanged();
            }},
            locale);
      $('#planning_date').datepicker('setDate', new Date(bookingPlanningModel.dateFrom));

    },

    setupEvents: function() {

        $('#prior_week_button').bind('click', function(){
           bookingPlanningController.priorWeekButtonClick();
        });

        $('#prior_day_button').bind('click', function(){
            bookingPlanningController.priorDayButtonClick();
        });

        $('#next_day_button').bind('click', function(){
            bookingPlanningController.nextDayButtonClick();
        });

        $('#next_week_button').bind('click', function(){
            bookingPlanningController.nextWeekButtonClick();
        });

        $(window).scroll(function() {
            bookingPlanningController.windowScroll();
        });
    },

    setupPopover: function (jQuerySelector) {

       // Setup the popover
       $(jQuerySelector).popover(
           {title: function() {
                     var origin = $(this).attr('data-origin');
                     if (origin == 'booking') {
                         return 'Reserva';
                     }
                     else {
                         if (origin = 'prereservation') {
                             return 'Bloqueo de stock';
                         }
                     }
                   },
            html: true,
            content: function(){
               var booking = {};
               booking.origin = $(this).attr('data-origin');
               booking.id = $(this).attr('data-id');
               booking.title = $(this).attr('data-title');
               booking.date_from = $(this).attr('data-date-from');
               booking.time_from = $(this).attr('data-time-from');
               booking.date_to = $(this).attr('data-date-to');
               booking.time_to = $(this).attr('data-time-to');
               booking.planning_color = $(this).attr('data-planning-color');
               var html = tmpl('planning_reservation_detail')({booking: booking});
               return html;
            },
            trigger: 'manual',
            placement: 'bottom'});

       // Setup event when the popover is shown
       $(jQuerySelector).on('shown.bs.popover', function () {
            $('.color').bind('change', function () {
                var id = $(this).parent().find('input[name=id]').val();
                var type = $(this).parent().find('input[name=type]').val();
                var color =$(this).val();
                bookingPlanningController.colorChanged(id, type, color);
            });
           $('.destroy_prereservation_button').bind('click', function() {
                stockBlockingModel.destroyPrereservation($(this).attr('rel'));
           });
        })

       // Setup event when the planning reservation is clicked
       this.popoverOff();
       this.popoverOn();

    },

    popoverOn: function() { /* activate popover to show reservation information */
        $('.planning_reservation').bind('click', function(e){
            console.log('click reservation');
            $('.planning_reservation').not(this).popover('hide');
            $(this).popover('toggle');
        });
    },

    popoverOff: function() { /* Deactivate popover */
        $('.planning_reservation').unbind('click');
    },

    setupDraggable: function(jQuerySelector) { /* Setup draggable on the reservations */
        $(jQuerySelector).draggable(
            {
                axis: 'y',
                cursor: "move",
                containment: '#planning_table tbody',
                scroll: true,

                start: function (event, ui) {
                    bookingPlanningModel.selectedReference = $(this).attr('data-resource');
                    bookingPlanningModel.selectedItemId = $(this).attr('data-id-resource');
                    bookingPlanningModel.selectedItemOrigin = $(this).attr('data-origin');
                    bookingPlanningModel.selectedItemCategoryCode = $(this).attr('data-category');
                    bookingPlanningModel.selectedItemPosition = $(this).position();
                    bookingPlanningView.popoverOff();
                    bookingPlanningController.onStartDragReservation();
                },
                drag: function(event, ui) {
                      bookingPlanningController.onDragReservation(event, ui, $(this));
                },
                stop: function (event, ui) {
                    if (!event.reverted) {
                        bookingPlanningController.onEndDragReservation($(this));
                    }
                    setTimeout(function() {
                        bookingPlanningView.popoverOn();
                    },100);
                },
                revert: function() {
                    var dFrom = bookingPlanningModel.dateFrom.toISOString().substring(0,10);

                    var resourceHeight = $('td.planning_reference').height() + 10 + 2; //padding + border

                    var position = $(this).position();
                    var top = position.top;
                    top -= $('#planning_table').position().top; // Take into account planning table position
                    var posTop = Math.floor((top) / resourceHeight);


                    <% unless @assignation_allow_diferent_categories %>
                    var category = $($('#planning_table tbody tr')[posTop]).attr('rel');
                    if (category != bookingPlanningModel.selectedItemCategoryCode ) {
                        alert('Lo sentimos. No se puede asignar un recurso de diferente categoría.');
                        // Scroll to show the original position
                        $(window).scrollTop(bookingPlanningModel.startDragWindowScrollTop);
                        return true;
                    }
                    <% end %>
                    <!-- TODO Warning different category -->
                    <% unless @assignation_allow_busy_resource %>
                    //if ($('#'+resource).length > 0 && $($('#'+resource)[0].firstChild).hasClass('unavailable')) {
                    //    alert('Lo sentimos. El recurso ' + resource + ' no está disponible');
                    //    return true;
                    //}
                    <% end %>
                    return false;
                }
            }
        );

    },

    createPlanningTable: function() { /* Creates the planning table */

        this.removeItemsInPlanning();
        $('#planning_table_header thead').empty();
        $('#planning_table tbody').empty();

        // Create the column for the references
        $("#planning_table_header thead").append("<tr></tr>");
        $("#planning_table_header thead tr:first").append("<th style='width:160px;line-height: 25px; text-align:center; border: 1px solid #cccccc; background:white'>"+''+"</th>");
        for (item in bookingPlanningModel.references) {
            $("#planning_table tbody").append("<tr id='" + item + "' rel='" + bookingPlanningModel.references[item] + "'></tr>");
            $("#planning_table tbody tr#"+item+"").append(
                "<td class='planning_reference' style='width:160px;line-height: 20px; text-align:center' data-reference='"+item+"'>"+
                     item+'<span class="planning_item_category">'+bookingPlanningModel.references[item]+'</span>'+"</td>");
        }

        var date= new Date(bookingPlanningModel.dateFrom);
        var days = (new Date(bookingPlanningModel.dateTo) - new Date(bookingPlanningModel.dateFrom)/(1000*60*60*24)) + 1;

        while (date <= bookingPlanningModel.dateTo) {
            var title = '<span class="planning_header_day_of_week">' + bookingPlanningModel.days[date.getDay()] + '</span>'+
                        '<span class="planning_header_day">' + date.getDate() + '</span>' +
                        '<span class="planning_header_month"> ' + bookingPlanningModel.months[date.getMonth()] + '</span>';
            var datestr = YSDFormatter.formatDate(date, 'yyyy-MM-dd');
            var firstMonthDay = date.getDate() == 1 ? true : false;
            var oddMonth = (date.getMonth() + 1) % 2 == 0;
            var oddMonthHeaderClass = oddMonth ? 'odd-month-header' : '';
            var firstMonthDayColumnClass = firstMonthDay ? 'first-month-day' : '';

            // Create the header row (with dates)
            var headerClass = 'date_header';
            if (oddMonth) {
                headerClass += ' ';
                headerClass += oddMonthHeaderClass;
            }
            if (firstMonthDay && date.getTime() != bookingPlanningModel.dateFrom.getTime()) {
                headerClass += ' ';
                headerClass += firstMonthDayColumnClass;
            }
            $("#planning_table_header thead tr:first").append("<th class='" + headerClass + "' style='width:50px;line-height:25px;text-align:center' rel='" + datestr + "'>" + title + "</th>");
            for (item in bookingPlanningModel.references) {

                var value = '';
                var background = 'white';
                var cellInformation = "style='background:" + background + ";width:50px;line-height:20px'";
                cellInformation += " data-date='" + datestr + "' " + "data-resource='" + item + "'";
                var cellClasses = 'data';
                if (firstMonthDay && date.getTime() != bookingPlanningModel.dateFrom.getTime()) {
                    cellClasses += ' ';
                    cellClasses += firstMonthDayColumnClass;
                }
                cellInformation += "class='" + cellClasses + "'";
                $("#planning_table tbody tr#"+item+"").append("<td " + cellInformation + ">" + value + "</td>");
            }
            date.add(1).days();

        }

        $(".odd-month-header").css("background-color", "#dddddd");
        $(".odd-month-header").css("color", "black");
        bookingPlanningModel.tablePlanningTrHeight = $('#planning_table tr').height();

        $(".data").bind('click', function(event) {
            var theElement = $(this);
            bookingPlanningController.tableCellClick(theElement,
                $(this).attr('data-resource'),
                $(this).attr('data-date'));
        });

    },

    fillPlanningTable: function() { /* Fill the planning table */


        for (var idx=0;idx<bookingPlanningModel.planningData.length;idx++) {

            var item = bookingPlanningModel.planningData[idx];
            if (item.booking_item_reference != null) {
                this.showItemInPlanning(item.origin, item.id, item.id2, item.item_id, item.booking_item_reference,
                                        item.date_from, item.time_from, item.date_to, item.time_to,
                                        item.title, item.planning_color);
            }

        }

        bookingPlanningView.setupDraggable('.planning_reservation');
        bookingPlanningView.setupPopover('.planning_reservation');

    },

    showItemInPlanning(origin, id, idResource, category, resource, dateFrom, timeFrom,
                       dateTo, timeTo, title, backgroundColor) { /* Show an item in the planning */

        var dFrom = dateFrom;
        var dTo = dateTo;
        var from = bookingPlanningModel.dateFrom.toString('yyyy-MM-dd'); //.toISOString().substring(0,10);
        var to = bookingPlanningModel.dateTo.toString('yyyy-MM-dd'); //.toISOString().substring(0,10)

        // Avoid if it is not represented in the planning
        if (dFrom > to || dTo < from) {
            return;
        }

        if (dFrom < from) {
            dFrom = from;
        }
        if (dTo > to) {
            dTo = to;
        }
        var days = (new Date(dTo) - new Date(dFrom))/(1000*60*60*24) + 1;

        var positionResource = $('tr[id='+resource+']').position();
        var positionDateFrom = $('th.date_header[rel='+dFrom+']').position();
        var positionDateTo = $('th.date_header[rel='+dTo+']').position();
        var height = $('tr[id='+resource+']').height();
        var oneDayWidth = $('th.date_header[rel='+dFrom+']').width() + 4 + 2; // +4 padding +2 border

        var top = positionResource.top;
        var left = positionDateFrom.left;
        var width = days * oneDayWidth;

        top += $('#planning_table').position().top;
        left += 16; // 2 + 14 (

        var html = tmpl('planning_reservation')({id: id, origin: origin, idResource: idResource,
                                                 dateFrom: dateFrom, timeFrom: timeFrom,
                                                 dateTo: dateTo, timeTo: timeTo,
                                                 category: category, resource: resource,
                                                 title: title,
                                                 backgroundColor: backgroundColor,
                                                 color: this.textColor(backgroundColor)});

        $(html).height(height).css({top: top, left: left, width: width}).appendTo('#parent');

    },

    removeItemsInPlanning: function() { /* Remove the items in the planning */

      $('.planning_reservation').remove();

    },


    textColor: function(color) {
           //if only first half of color is defined, repeat it
        /*
            if(color.length < 5) {
                color += color.slice(1);
            }
            return (color.replace('#','0x')) > (0xffffff/2) ? '#333' : '#fff';
         */

        var text_color = "rgb(0,0,0)";

        var rgb = this.hexToRgb(color);

        if (rgb != null) {
            var brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;

            if (brightness < 123) {
                text_color = "rgb(255,255,255)";
            }
        }

        return text_color;

    },

    hexToRgb: function(hex) {
                var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                return result ? {
                    r: parseInt(result[1], 16),
                    g: parseInt(result[2], 16),
                    b: parseInt(result[3], 16)
                } : null;
    },



    update: function(event, value) { /* Update the GUI */
  	  switch (event) {

  		case 'data_available':

  		  this.createPlanningTable();
  		  this.fillPlanningTable();
  		  break;

      case 'reassigned': // Reassigned reservation
        $.toast({
              heading: 'Reasignación de stock',
              text: 'La reasignación se ha realizado correctamente',
              position: 'top-right',
              bgColor: 'rgb(56, 154, 56)',
              textColor: 'white',
              loader: false,
              stack: false
        });
        break;

      case 'changed_color': // After change a color
          $.toast({
              heading: 'Color cambiado',
              text: 'El cambio de color se ha realizado correctamente',
              position: 'top-right',
              bgColor: 'rgb(56, 154, 56)',
              textColor: 'white',
              loader: false,
              stack: false
          });
        break;

  		case 'not_enough_informationnot_enough_information':
  		  alert('No hay suficientes datos para obtener la información');
  		  break;
  	  }
    }

  }

  // ----------------------------------------------------------------------------------------------
  //                              Stock blocking
  // ----------------------------------------------------------------------------------------------

  stockBlockingModel = {

      data: null,
      id: null,

      createPrereservation: function() { /* Create a new stock blocking */
          var formdata = $('form[name="element"]').formParams(true);
          delete formdata.id;
          var json_request = JSON.stringify(formdata);
          $.ajax({
              type: 'POST',
              data : json_request,
              url : '/api/booking-prereservation',
              success: function(data, textStatus, jqXHR) {
                  stockBlockingModel.data = data;
                  stockBlockingView.update('created_prereservation');
              },
              error: function(data, textStatus, jqXHR) {
                  alert('Error creando prereserva');
              }
          });
      },

      destroyPrereservation: function(id) { /* Delete a stock blocking */
          this.id = id;
          var url = '/admin/booking/planning-remove-prereservation';
          url+='?id='+id;
          $.ajax({
              type: 'POST',
              url : url,
              success: function(data, textStatus, jqXHR) {
                  stockBlockingView.update('destroyed_preservation');
              },
              error: function(textStatus, jqXHR) {
                  alert('Error eliminando prereserva');
              }
          });
      }

  };

  stockBlockingController = {

      createStockBlockingButtonClick: function() { /* Create pre reservation button click */
          stockBlockingModel.createPrereservation();
      },

      cancelPrereservationButtonClick: function() { /* Cancel pre reservation button click */
          // Hide the modal
          $('#prereservation_container').modal('hide');
          $('form[name=element]')[0].reset();
      },

      destroyPrereservationClick: function(id) { /* Destroy preresevation */

          $("<div title='Eliminar prereserva'>" +
              '¿Está seguro?' + "</div>").dialog(
              { height: 250, modal: true,
                  buttons: {
                      Ok: function() {
                          response = true;
                          $(this).dialog( "close" );
                      },
                      Cancel: function() {
                          response = false;
                          $( this ).dialog( "close" );
                      }
                  },
                  close : function(event, ui) {
                      if (response) {
                          stockBlockingModel.destroyPrereservation(id);
                      }
                  }
              });

      },

  };

  stockBlockingView = {

      showStockBlockingForm: function(reference, date) {

          this.setupStockBlockingForm(reference, date);
          this.setupStockBlockingValidation();

          // Show prereservation form
          $('#prereservation_container').modal('show');
          $('#prereservation_container').on('hidden.bs.modal', function (e) {
              stockBlockingController.cancelPrereservationButtonClick();
          });
      },

      setupStockBlockingForm: function(reference, date) {
          $('#prereservation_button').unbind('click');
          $('#prereservation_button').bind('click', function(){
              if ($('#prereservation_form').valid()) {
                  stockBlockingController.createStockBlockingButtonClick();
              }
          });

          $('#cancel_prereservation_button').unbind('click');
          $('#cancel_prereservation_button').bind('click', function(){
              stockBlockingController.cancelPrereservationButtonClick();
          });

          $('#booking_item_reference_value').html(reference);
          $('form[name=element] input[name=booking_item_reference]').val(reference);

          // Setup the form
          var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];
          $('#date_from').datepicker({
                  numberOfMonths:1},
              locale);
          $('#date_to').datepicker({
                  numberOfMonths:1},
              locale);
          $('#date_from').bind('change', function() {
              var dateFrom = $('#date_from').datepicker('getDate');
              var dateTo = $('#date_to').datepicker('getDate');
              if (dateTo != null) {
                  dateTo.setDate(dateFrom.getDate() + <%=@product_family.cycle_of_24_hours ? 1 : 0%>);
              }
              $('#date_to').datepicker('setDate', dateTo );
              $('#date_to').datepicker('option', 'minDate', dateFrom.add(<%=@product_family.cycle_of_24_hours ? 1 : 0%>).days());
          });
          $('#date_from').datepicker('setDate', new Date(date));
          $('#date_from').trigger('change');
      },

      setupStockBlockingValidation: function() {
          $.validator.addMethod("time24", function(value, element) {
              if (!/^\d{2}:\d{2}$/.test(value)) {
                  return false;
              }
              var parts = value.split(':');
              if (parseInt(parts[0]) > 23 || parseInt(parts[1]) > 59) {
                  return false;
              }
              return true;
          }, "Invalid time format. The format is hh:mm");

          $('#prereservation_form').validate({

              submitHandler: function(form)
              {
                  return false;
              },

              rules : {
                  'date_from': {
                      required: true
                  },

                  'date_to': {
                      required: true,
                      dpCompareDate : { 'notLessThan' : '#date_from'}
                  },

                  'title': {
                      required: true
                  }

                  <% if @product_family.time_to_from %>
                  ,
                  'time_from': {
                      required: true,
                      time24: true
                  },
                  'time_to': {
                      required: true,
                      time24: true
                  }

                  <% end %>

              },

              messages : {

                  'date_from': {
                      required : '<%=t.bookings_planning.prereservation.validation.date_from_required%>'
                  },

                  'date_to' : {
                      required : '<%=t.bookings_planning.prereservation.validation.date_to_required%>',
                      dpCompareDate : '<%=t.bookings_planning.prereservation.validation.date_to_greater_date_from%>'
                  },

                  'title': {
                      required: '<%=t.bookings_planning.prereservation.validation.title_required%>'
                  }
                  <% if @product_family.time_to_from %>
                  ,
                  'time_from': {
                      required: '<%=t.bookings_planning.prereservation.validation.time_from_required%>',
                      time24: '<%=t.validations.time_format_invalid%>'
                  },
                  'time_to': {
                      required: '<%=t.bookings_planning.prereservation.validation.time_to_required%>',
                      time24: '<%=t.validations.time_format_invalid%>'
                  }
                  <% end %>
              }

          });
      },

      update: function(event, value) {

        switch (event) {
            case 'created_prereservation': // After create a pre-reservation (stock blocking)
                $('#prereservation_container').modal('hide');
                bookingPlanningView.showItemInPlanning(
                        'prereservation',
                        stockBlockingModel.data.id,
                        stockBlockingModel.data.id,
                        stockBlockingModel.data.booking_item_category,
                        stockBlockingModel.data.booking_item_reference,
                        stockBlockingModel.data.date_from.toString('yyyy-MM-dd'),
                        stockBlockingModel.data.time_from,
                        stockBlockingModel.data.date_to.toString('yyyy-MM-dd'),
                        stockBlockingModel.data.time_to,
                        stockBlockingModel.data.title,
                        stockBlockingModel.data.planning_color);
                var id='#prereservation'+stockBlockingModel.data.id;
                bookingPlanningView.setupDraggable(id);
                bookingPlanningView.setupPopover(id);
                $.toast({
                    heading: 'Bloqueo de stock',
                    text: 'El bloqueo de stock se ha registrado',
                    position: 'top-right',
                    bgColor: 'rgb(56, 154, 56)',
                    textColor: 'white',
                    loader: false,
                    stack: false
                });
                break;

            case 'destroyed_preservation': // After destroy a pre-reservation (stock blocking)
                $('#prereservation'+stockBlockingModel.id).remove();
                $('.popover').remove();
                $.toast({
                    heading: 'Reasignación de stock',
                    text: 'El bloqueo de stock se ha eliminado',
                    position: 'top-right',
                    bgColor: 'rgb(56, 154, 56)',
                    textColor: 'white',
                    loader: false,
                    stack: false
                });
                break;
        }

      }

  };



});  
