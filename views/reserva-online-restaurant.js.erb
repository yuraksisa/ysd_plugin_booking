  <% if defined?booking_js %>
    <%= booking_js %>
  <% end %>

  require(['jquery', 'YSDForms', 'YSDDateControl', 'ysdtemplate',
           <% if defined?booking_js %>'booking_js'<% else %>'/js/booking.js'<%end%>, 
           'YSDListSelector', 'YSDMemoryDataSource','YSDRemoteDataSource',
           'YSDSelectSelector',  'YSDGui',
           'json2', 'jquery.validate', 
           'jquery.placeholder', 'jquery.ui', 'jquery.ui.datepicker-es', 
           'jquery.ui.datepicker.validation',
           'jquery.tools', 'jquery.formparams', 'datejs'], 
           function($, YSDForms, DateControl, tmpl, bookingDataSystem,  
           ListSelector, MemoryDataSource, RemoteDataSource, SelectSelector, YSDGui) {  

    /* It represents the wizard tabs */

    var WizardTab = function (element_id, visible) {
        
      this.element_id = element_id;
      this.state = null;
                              
      this.setState = function(new_state) { /* set the state (not-enabled, active, not-active) */ 
          
        this.state = new_state;
            
        switch (this.state) {
            
          case 'not-enabled':
            $('#' + this.element_id).removeClass('active not-active').addClass('not-enabled');
            break;
                
          case 'active':
            $('#' + this.element_id).removeClass('not-active not-enabled').addClass('active');
            break;
                
          case 'not-active':
            $('#' + this.element_id).removeClass('active not-enabled').addClass('not-active');
            break;
               
        }               
      
      };
          
      this.setVisible = function(visible) { /* setVisible */
        this.visible = visible; 
            
        if (this.visible) {
          $('#' + element_id).show();
        }
        else {
          $('#' + element_id).hide();
        }
            
        return this;
      }
        
      this.setVisible(visible);

    };
   

    var bookingModel = {

       getUrlVars : function() {
          var vars = [], hash;
          var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
          for(var i = 0; i < hashes.length; i++)
          {
             hash = hashes[i].split('=');
             vars.push(hash[0]);
             vars[hash[0]] = hash[1];
          }
          return vars;
       },

       change_state : function( action ) {
        
          switch (action) {
             
             case 'start' :
               this.process_state = 'item_selection';
               break;
        
             case 'check_availability':
               this.process_state = 'checking_availability';
               break;

             case 'check_availability_finished':
               this.process_state = 'availability_checked';
               break;

             case 'select_item' :
                this.process_state = "extras_selection";
                break;

             case 'select_extras' :
               this.process_state = 'completing_booking';              
               break;
                        
             case 'go_to_complete_booking':
               this.process_state = 'continue_booking';
               break;
             
             case 'send_booking':
               this.process_state = 'sending_booking';
               break;
               
             case 'booking_response_ok':
               this.process_state = 'process_completed';
               break;
               
             case 'booking_response_error':
               this.process_state = 'process_error';
               break;
          }
                
          bookingView.state_changed(this.process_state);
        
       },


    };

    var bookingController = {

    };

    var bookingView = {

       init : function () { /* Inits the View */  
                                                
         // Configure the date controls
         // http://jquery-ui.googlecode.com/svn/trunk/ui/i18n/ (locales for datepicker)
         // http://keith-wood.name/uiDatepickerValidation.html (validation for datepicker)
         $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );
                       
         this.configureBookingGui();
              
         // Configure the comments textarea
         /*
         YSDForms.limit_text_area_content_size(document.getElementById('booking[comments]'), 256, 
            function (content_remain) {
              document.getElementById('booking_comments_length').innerHTML = '<strong>' + content_remain + '</strong>';
            }
         );
         */                
         
         // configure place holders
         $('input[placeholder]:visible,textarea[placeholder]:visible').placeholder();
                            
         // Configure the dialog(s)
         $('#checking-availability').dialog({autoOpen: false, height: 260, modal: true,
              closeOnEscape: false,
               open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); },
               close: function(event, ui) { $(".ui-dialog-titlebar-close").show(); }
             });
         $('#sending-booking').dialog({autoOpen: false, height: 260, modal: true,
              closeOnEscape: false,
               open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); },
               close: function(event, ui) { $(".ui-dialog-titlebar-close").show(); }
             });
                   
         
         // Configure validations 
         this.configure_validations();
        
         // Configure state
         this.state_changed(bookingModel.process_state);
    
         // Initialize the form
         this.init_form();    
        
       }, 

       init_form : function () {
        
          var url_vars = bookingModel.getUrlVars();
          
          var datefrom = decodeURIComponent(url_vars['datefrom']);        
          var timefrom = decodeURIComponent(url_vars['timefrom']);
          var number_of_adults = decodeURIComponent(url_vars['number_of_adults']);
          var source = decodeURIComponent(url_vars['source']);
          
          if (source != 'undefined') {
            $('#booking\\[source\\]').val(source);
          }

          if (datefrom != 'undefined') {          
            $('#datefrom').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", datefrom)); 
            $('#timefrom').val(timefrom);    
          }

       }, 

       configureBookingGui : function() { /* Configure the Gui elements using the booking configuration */
                     
         var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];

         $('#datefrom').datepicker({numberOfMonths:1, minDate:bookingDataSystem.configuration.min_date, 
          maxDate: new Date(bookingDataSystem.configuration.max_date).add(-1).days(), dateFormat: 'dd/mm/yy'}, locale);
         $('#datefrom').datepicker('setDate', '+0'); 

         $('#button_continua_rellenar_datos').bind('click', function(event) {
            bookingController.go_to_fill_data_click();
         });
     
       },    

       configure_validations : function () {
        
        
         // Search item form validation
         
         $('#form-search-item').validate(
          {
            
            submitHandler: function(form) {
               //bookingView.calculate_prices();
               return false;
            },
                               
            rules : {
               'datefrom': {
                 required: true 
               }
            },
            
            messages : {
               'datefrom': {
                 required : '<%=t.new_booking_restaurant.date_mandatory%>'
               } 
            },
            
            errorPlacement : function(error, element) {
              if (element.attr('name') === 'datefrom') {
                error.insertAfter('#timefrom');
              }
              
            }            
          }
         );

        // Booking Form Validation
        $('#form-reservation').validate(
         {
          
           submitHandler: function(form) {
             $('#reservation_error').html('');
             if (bookingView.buttonPressed == 'pay') {
               bookingController.pay_now_button_click($(form).formParams(false));
             } 
             else {
               bookingController.confirm_booking($(form).formParams(false)); // Numbers and booleans are not converted (hold as strings)
             }
             return false;
           },
           
           invalidHandler : function (form, validator) {
             $('#reservation_error').html('<%=t.new_booking.form_errors.description%>');
           },
           
           rules : {
            
            'booking[number_of_adults]' : 'number_of_adults',
            'booking[customer_name]': 'required',
            'booking[customer_surname]' : 'required',
            'booking[customer_email]' : {
              required: true,
              email: true 
            },
            'booking[customer_email_confirmation]': {
              required: true,
              email: true,
              equalTo : '#booking\\[customer_email\\]'  /* scape slash with brackets \\[email\\] */
            },
            'booking[customer_phone]': {
              required: true,
              minlength: 9  
            },
            'conditions_read' :  {
              required: '#conditions_read:visible'
            }
           },
           
           messages : {
            
            'booking[number_of_adults]' : '<%=t.new_booking_restaurant.people_mandatory%>',
            'booking[customer_name]': '<%=t.new_booking.customer_name.required%>',
            'booking[customer_surname]' : '<%=t.new_booking.customer_surname.required%>',           
            'booking[customer_email]' : {
               required: '<%=t.new_booking.customer_email.required%>',
               email: '<%=t.new_booking.customer_email.format%>'
            },           
            'booking[customer_email_confirmation]': {
              'required': '<%=t.new_booking.customer_email_confirmation.required%>',  
              email: '<%=t.new_booking.customer_email_confirmation.format%>',
              'equalTo': '<%=t.new_booking.customer_email_confirmation.equal_to%>'
            },            
            'booking[customer_phone]': {
              'required': '<%=t.new_booking.customer_phone.required%>',
              'minlength': '<%=t.new_booking.customer_phone.min_length%>' 
            }, 
            'conditions_read': '<%=t.new_booking.conditions.required%>'
            
           },
        
           errorPlacement: function (error, element) {
              
              if (element.attr('name') == 'conditions_read' || 
                  element.attr('name') == 'booking[number_of_adults]')
              {
                error.insertAfter(element.parent()); 
              }
              else
              {
                error.insertAfter(element);
              }
              
           },
           
           errorClass : 'form-reservation-error'            
                   
         }
        );
       },

       state_changed : function(new_state) {
        
         switch (new_state) {
          
           case 'item_selection' : /* First state (begin process) */
             break;
                
           case 'checking_availability': /* Second state (checking availability) */
             $('#checking-availability').dialog('open');
             break;
  
           case 'availability_checked':
             $('#checking-availability').dialog('close');
             break;

           case 'completing_booking' : /* Third state (user choose an item and starts booking) */
           case 'continue_booking' : /* Alternative state (user comes back to complete booking) */
             break;
                    
           case 'sending_booking' : /* Sending the booking using Ajax (user clicks confirm button) */
             $('#sending-booking').dialog('open');
             break;
            
           case 'process_completed' : /* The booking has been saved in the system */
             $('#sending-booking').dialog('close');   
             if (typeof(bookingModel.confirmBookingResponse) == 'string') {
               document.write(bookingModel.confirmBookingResponse); 
               return;
             }
             break;
            
            case 'process_error' : /* The booking has not been saved in the system */
              $('#sending-booking').dialog('close');
              $('<div title="<%=t.new_booking.booking_creation_error.title%>"> <%=t.new_booking.booking_creation_error.description%> </div>').dialog( { height: 260, modal: true,        
                buttons: {
                    Ok: function() {
                        $(this).dialog("close");
                      }
                    },
                    close : function(event, ui) {
                        $( this ).dialog( "close" );        
                    }
                });                       
              break;
          }

          this.wizard.state_changed(new_state);
        },
       wizard : {
        
         tabs : { 
                 'tab-choose-item' : new WizardTab ('tab-choose-item', true),
                 'tab-complete-reservation' : new WizardTab('tab-complete-reservation', true)
                },
               
         state_changed : function (new_state) {
         
           switch (new_state) {
            
              case 'item_selection' : /* Item selection tab */
                $('#form-reservation').hide();
                $('#item-selection').show();
                this.tabs['tab-choose-item'].setState('active'); 
                this.tabs['tab-complete-reservation'].setState('not-enabled');
                break;
              
              case 'completing_booking' : /* Complete booking data tab */
              case 'continue_booking' :
              case 'process_completed': 
                $('#item-selection').hide();               
                $('#form-reservation').show();
                this.tabs['tab-choose-item'].setState('not-enabled'); 
                this.tabs['tab-complete-reservation'].setState('active');
                bookingView.check_payment();
                break;
              
           }
          
         },
         
         show : function() {
          $('#wizard-navigation').show();
         },
         
         hide: function() {
          $('#wizard-navigation').hide();
         }
        
       }        
      };
 
      bookingView.init();
      bookingModel.change_state('start');

  });