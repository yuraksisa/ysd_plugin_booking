
  <div id="content-reserva">
  
    <div id="content-header">
        <div>
          <div id="wizard-navigation">
            <ul id="wizard-options">
              <li><a id="tab-choose-item" href="#" class="tab img_txt"><span>1</span> Seleccionar el vehículo</a></li>
              <li><a id="tab-complete-reservation" href="#" class="tab img_txt"><span>2</span> Completar la reserva</a></li>
              <li><a id="tab-payment" href="#" class="tab img_txt"><span>3</span> Pago</a></li>
            </ul>
          </div>
        </div>      
    </div>
    
    <div id="content-body">

	  <div id="item-selection">
		  <form id="form-search-item" name="form-search-item">
		    <fieldset>
		      <div>
		      	<label for="datefrom" id="labeldatefrom" class="search-form-column columna1">Fecha de entrega</label> 
		      	<input type="text" name="datefrom" id="datefrom" class="search-form-column columna2 date_control" size="10" maxlength="10"/>
		      	<label for="timefrom" id="labeltimefrom" class="search-form-column columna3" style="display:none">Hora</label>
		      	<select name="timefrom" id="timefrom" class="search-form-column columna4" style="display:none"> 
					<option value="7:00" selected="selected">7:00</option>
					<option value="7:30">7:30</option>
					<option value="8:00">8:00</option>
					<option value="8:30">8:30</option>
					<option value="9:00">9:00</option>
					<option value="9:30">9:30</option>
					<option value="10:00">10:00</option>
					<option value="10:30">10:30</option>
					<option value="11:00">11:00</option>
					<option value="11:30">11:30</option>
					<option value="12:00">12:00</option>
					<option value="12:30">12:30</option>
					<option value="13:00">13:00</option>
					<option value="13:30">13:30</option>
					<option value="14:00">14:00</option>
					<option value="14:30">14:30</option>
					<option value="15:00">15:00</option>
					<option value="15:30">15:30</option>
					<option value="16:00">16:00</option>
					<option value="16:30">16:30</option>
					<option value="17:00">17:00</option>
					<option value="17:30">17:30</option>
					<option value="18:00">18:00</option>
					<option value="18:30">18:30</option>
					<option value="19:00">19:00</option>
					<option value="19:30">19:30</option>
					<option value="20:00">20:00</option>
					<option value="20:30">20:30</option>
					<option value="21:00">21:00</option>
					<option value="21:30">21:30</option>
					<option value="22:00">22:00</option>
					<option value="22:30">22:30</option>
					<option value="23:00">23:00</option>
					<option value="23:30">23:30</option>
		      	</select>
		      </div>
		      <div>
		      	<label for="dateto" id="labeldateto" class="search-form-column columna1">Fecha de devolución</label> 
		      	<input type="text" name="dateto" id="dateto" class="search-form-column columna2 date_control" size="10" maxlength="10"/>
		      	<label for="timeto" id="labeltimeto" class="search-form-column columna3" style="display:none">Hora</label>
		      	<select name="timeto" id="timeto" class="search-form-column columna4" style="display:none"> 
					<option value="7:00" selected="selected">7:00</option>
					<option value="7:30">7:30</option>
					<option value="8:00">8:00</option>
					<option value="8:30">8:30</option>
					<option value="9:00">9:00</option>
					<option value="9:30">9:30</option>
					<option value="10:00">10:00</option>
					<option value="10:30">10:30</option>
					<option value="11:00">11:00</option>
					<option value="11:30">11:30</option>
					<option value="12:00">12:00</option>
					<option value="12:30">12:30</option>
					<option value="13:00">13:00</option>
					<option value="13:30">13:30</option>
					<option value="14:00">14:00</option>
					<option value="14:30">14:30</option>
					<option value="15:00">15:00</option>
					<option value="15:30">15:30</option>
					<option value="16:00">16:00</option>
					<option value="16:30">16:30</option>
					<option value="17:00">17:00</option>
					<option value="17:30">17:30</option>
					<option value="18:00">18:00</option>
					<option value="18:30">18:30</option>
					<option value="19:00">19:00</option>
					<option value="19:30">19:30</option>
					<option value="20:00">20:00</option>
					<option value="20:30">20:30</option>
					<option value="21:00">21:00</option>
					<option value="21:30">21:30</option>
					<option value="22:00">22:00</option>
					<option value="22:30">22:30</option>
					<option value="23:00">23:00</option>
					<option value="23:30">23:30</option>
		      	</select>
		      </div>
		      <div>
	        	<input type="submit" value="Ver precios" id="button_calcular_tarifas" class="botones"/>
		      </div>  
		    </fieldset>	  
		  </form>
	 	  
	 	  <!-- Resultado del calculo de tarifas -->
		  <div id="result">
	  
		  </div>
	 	  
	  </div>
	  	      	    
 	  <!-- Formulario de confirmacion de reserva -->
  
	  <form id="form-reservation" name="form-reservation" method="POST" style="display:none">

	    <div id="reservation-input">	      
	      <fieldset id="fs_customer">
	        <legend id="lg_customer" class="legend-first-level">Cliente</legend>
	        <div>
	          <label id="label_customer_email" for="booking[customer_name]" class=" form-reservation-columna1">Nombre *</label>
	          <input type="text" name="booking[customer_name]" id="booking[customer_name]" class="form-reservation-columna2" maxlength="40" placeholder="Su nombre"/>
	        </div>
	        <div>
	          <label id="label_customer_surname" for="booking[customer_surname]" class=" form-reservation-columna1">Apellidos *</label>
	          <input type="text" name="booking[customer_surname]" id="booking[customer_surname]" class="form-reservation-columna2" maxlength="40" placeholder="Sus apellidos"/>	          
	        </div>
	        <div>
	          <label id="label_customer_email" for="booking[customer_email]" class=" form-reservation-columna1">Email *</label>
	          <input type="text" name="booking[customer_email]" id="booking[customer_email]" class="form-reservation-columna2" placeholder="Su correo electrónico" maxlength="40"/>
	        </div>
	        <div>
	          <label id="label_customer_email_confirmation" for="booking[customer_email_confirmation]" class=" form-reservation-columna1">Confirme email *</label>
	          <input type="text" name="booking[customer_email_confirmation]" id="booking[customer_email_confirmation]" class="form-reservation-columna2" placeholder="Confirme su correo electrónico" maxlength="40"/>
	        </div>
	        <div>
	          <label id="label_customer_phone" for="booking[customer_phone]" class=" form-reservation-columna1">Teléfono *</label>
	          <input type="text" name="booking[customer_phone]" id="booking[customer_phone]" class="form-reservation-columna2" maxlength="15" placeholder="Su teléfono fijo"/>      
	        </div>
	        <div>
	          <label id="label_customer_mobile_phone" for="booking[customer_mobile_phone]" class=" form-reservation-columna1">Teléfono móvil</label>
	          <input type="text" name="booking[customer_mobile_phone]" id="booking[customer_mobile_phone]" class="form-reservation-columna2" maxlength="15" placeholder="Su teléfono móvil"/>      
	        </div>	        
	      </fieldset>

	      <fieldset id="fs_info">
	        <legend id="lg_info" class="legend-first-level">Otros datos de la reserva</legend>
	        <div>
	          <label id="label_comments" for="booking[comments]" class="form-reservation-columna1">Comentarios</label>
	          <textarea id="booking[comments]" name="booking[comments]" class="form-reservation-columna2" rows="10" placeholder="Observaciones, dudas, comentarios"></textarea>
	        </div>	      
	        <p class="form-reservation-right-column"> <span id="booking_comments_length"></span> caracteres disponibles</p>
	      </fieldset>
	      
	      <fieldset id="fs_driver" style="display:none">
	        <legend id="lg_driver" class="legend-first-level">Conductor</legend>
            <p class="fieldset_description">Si desea <strong>agilizar</strong> la entrega del vehículo <em>complete</em> los datos del conductor </p>
	        <legend class="legend-second-level">Datos personales</legend>
	        <div>
	          <label id="label_driver_name" for="car_booking[driver_name]" class=" form-reservation-columna1">Nombre</label>
	          <input type="text" name="car_booking[driver_name]" id="car_booking[driver_name]" class="form-reservation-columna2" maxlength="40" placeholder="Nombre del conductor"/>
	        </div>
	        <div>
	          <label id="label_driver_surname" for="car_booking[driver_surname]" class=" form-reservation-columna1">Apellidos</label>
	          <input type="text" name="car_booking[driver_surname]" id="car_booking[driver_surname]" class="form-reservation-columna2" maxlength="40" placeholder="Apellidos del conductor"/>
	        </div>
	        <div>
	          <label id="label_driver_document" for="car_booking[driver_document_id]" class=" form-reservation-columna1">Nif o pasaporte</label>
	          <input type="text" name="car_booking[driver_document_id]" id="car_booking[driver_document_id]" class="form-reservation-columna2" maxlength="15" placeholder="Nif o pasaporte del conductor"/>
	        </div>
	        <div>
	          <label id="label_driver_date_of_birth" for="car_booking[driver_date_of_birth]" class=" form-reservation-columna1">Fecha de nacimiento *</label>
              <select name="car_booking[driver_date_of_birth_day]" id="car_booking[driver_date_of_birth_day]"></select>
              <select name="car_booking[driver_date_of_birth_month]" id="car_booking[driver_date_of_birth_month]"></select>
              <select name="car_booking[driver_date_of_birth_year]" id="car_booking[driver_date_of_birth_year]"></select>
              <input type="hidden" name="car_booking[driver_date_of_birth]" id="car_booking[driver_date_of_birth]"></input>
	        </div>	        
              <legend class="legend-second-level">Permiso de conducir</legend>
	          <div>
	            <label id="label_driver_driving_license_number" for="car_booking[driver_driving_license_number]" class="form-reservation-columna1">Número licencia</label>
	            <input type="text" name="car_booking[driver_driving_license_number]" id="car_booking[driver_driving_license_number]" class="form-reservation-columna2" maxlength="15" placeholder="Número del carnet o licencia de conducir"/>
	          </div>
	          <div>
  	            <label id="label_driver_driving_license_date" for="car_booking[driver_driving_license_date]" class="form-reservation-columna1">Fecha expedición</label>
	            <select name="car_booking[driver_driving_license_date_day]" id="car_booking[driver_driving_license_date_day]"></select>
                <select name="car_booking[driver_driving_license_date_month]" id="car_booking[driver_driving_license_date_month]"></select>
                <select name="car_booking[driver_driving_license_date_year]" id="car_booking[driver_driving_license_date_year]"></select>
                <input type="hidden" name="car_booking[driver_driving_license_date]" id="car_booking[driver_driving_license_date]"></select>    
	          </div>
	          <div>
	            <label id="label_driver_driving_license_country" for="car_booking[driver_driving_license_country]" class="form-reservation-columna1">País expedición</label>
	            <input type="text" name="car_booking[driver_driving_license_country]" id="car_booking[driver_driving_license_country]" class="form-reservation-columna2" maxlength="50" placeholder="País de expedición de la licencia"/>
	          </div>

              <legend class="legend-second-level">Dirección</legend>
	          <div>
	            <label id="label_driver_address_street" for="car_booking[driver_address[street]]" class=" form-reservation-columna1">Calle</label>
	            <input type="text" name="car_booking[driver_address[street]]" id="car_booking[driver_address[street]]" class="form-reservation-columna2" maxlength="60" placeholder="Nombre de la calle"/>
	          </div>
	          <div>
	            <label id="label_driver_address_number" for="car_booking[driver_address[number]]" class=" form-reservation-columna1">Número</label>
	            <input type="text" name="car_booking[driver_address[number]]" id="car_booking[driver_address[number]]" class="form-reservation-columna2" maxlength="10" placeholder="Numero de la calle"/>
	          </div>
	          <div>
	            <label id="label_driver_address_complement" for="car_booking[driver_address[complement]]" class=" form-reservation-columna1">Piso, puerta</label>
	            <input type="text" name="car_booking[driver_address[complement]]" id="car_booking[driver_address[complement]]" class="form-reservation-columna2" maxlength="20" placeholder="bloque, escalera, piso, puerta"/>
	          </div>
	          <div>
	            <label id="label_driver_address_city" for="car_booking[driver_address[city]]" class=" form-reservation-columna1">Población</label>
	            <input type="text" name="car_booking[driver_address[city]]" id="car_booking[driver_address[city]]" class="form-reservation-columna2" maxlength="60" placeholder="ciudad o población"/>      
	          </div>
	          <div>
	            <label id="label_driver_address_state" for="car_booking[driver_address[state]]" class=" form-reservation-columna1">Provincia</label>
	            <input type="text" name="car_booking[driver_address[state]]" id="car_booking[driver_address[state]]" class="form-reservation-columna2" maxlength="60" placeholder="provincia o estado"/>    
	          </div>
	          <div>
	            <label id="label_driver_address_country" for="car_booking[driver_address[country]]" class=" form-reservation-columna1">País</label>
	            <input type="text" name="car_booking[driver_address[country]]" id="car_booking[driver_address[country]]" class="form-reservation-columna2" maxlength="50" placeholder="país"/>      
	          </div>
	          <div>
	            <label id="label_driver_address_zip" for="car_booking[driver_address[zip]]" class=" form-reservation-columna1">Código postal</label>
	            <input type="text" name="car_booking[driver_address[zip]]" id="car_booking[driver_address[zip]]" class="form-reservation-columna2" maxlength="10" placeholder="código postal"/>         
	          </div>
	      </fieldset>
	    
	    </div>

	    <div id="reservation-summary">
	      <fieldset id="fs_summary_collection">
	        <legend id="lg_summary_collection" class="legend-first-level">Entrega</legend>
	        <div class="summary-row">
	          <input type="text" name="date_from_extended" id="date_from_extended" class="readonly-field" readonly="readonly" style="margin-left:-1px"/>
	        </div>
	        <div class="collection_place" style="display:none">
	          <label for="pickup_place">Lugar * </label>
	          <select name="pickup_place" id="pickup_place">
	            <option value="Aeropuerto Mahón">Aeropuerto Mahón</option>
	            <option value="Puerto Mahón">Puerto Mahón</option>
	            <option value="Puerto Ciutadella">Puerto Ciutadella</option>
	            <option value="Otro">Otro (especificar)</option>
	          </select>
	        </div>
	        <div>
	          <input type="text" name="pickup_place_other" id="pickup_place_other" maxlength="80" size="28" style="display:none; margin-top:5px; margin-left: 4px;" placeholder="Lugar de entrega"/>
	        </div>
	        <input type="hidden" name="car_booking[pickup_place]" id="car_booking[pickup_place]"/>	        
	      </fieldset>
	      <fieldset id="fs_summary_delivery">
	        <legend id="lg_summary_delivery" class="legend-first-level">Devolución</legend>
	        <div class="summary-row">
	          <input type="text" name="date_to_extended" id="date_to_extended" class="readonly-field" readonly="readonly" style="margin-left:-1px"/>
	        </div>
	        <div class="return_place" style="display:none">
	          <label for="return_place">Lugar * </label>
	      	  <select name="return_place" id="return_place">
	            <option value="Aeropuerto Mahón">Aeropuerto Mahón</option>
	            <option value="Puerto Mahón">Puerto Mahón</option>
	            <option value="Puerto Ciutadella">Puerto Ciutadella</option>
	            <option value="Otro">Otro (especificar)</option>
	          </select>
	        </div>
	        <div>
	          <input type="text" name="return_place_other" id="return_place_other" maxlength="80" size="28" style="display:none; margin-top:5px; margin-left: 4px;" placeholder="Lugar de devolución"/>  
	        </div>
	        <input type="hidden" name="car_booking[return_place]" id="car_booking[return_place]"/>
	      </fieldset>
	      <fieldset id="fs_summary_item">
	        <legend id="lg_summary_item" class="legend-first-level">Vehiculo</legend>
	        <img id="item_image"/>
	        <select id="booking[item_id]" name="booking[item_id]" class="item_chooser">
	        </select>
	      </fieldset>
	      <fieldset id="fs_summary_extras">
	        <legend id="lg_summary_extras" class="legend-first-level">Extras</legend>	        
	        <table id="tblextras">
	          <thead>
	          <tr>
	            <th class="form-reservation-extra-titulo form-reservation-extra-columna1" colspan="2">Extra</th>
	            <th class="form-reservation-extra-titulo form-reservation-extra-columna2">Cantidad</th>
	          </tr>
	          </thead>
	          <tbody>
	          </tbody>
	        </table>
	      </fieldset>
	      <fieldset class="fs_summary_total">
	      	<legend id="lg_summary_total" class="legend-first-level">Precio</legend>
	      	<input type="hidden" name="total_cost" id="total_cost"/>
	      	<div id="detailed_summary">
	      	  
	        <div>
            <!--div class="detailed_price-button" id="detailed_price">
	          <a href="script_detailed_price" rel="#overlay" class="template">Ver detalle</a>
	        </div-->	      
	      </fieldset>
	      <fieldset id="fs_conditions">
	        <div>
	          <input type="checkbox" name="conditions_read" id="conditions_read">
	          <span class="conditions_text">He leido y acepto <a href="/renting_conditions.html?id=2" rel="#overlay" class="external">las condiciones del alquiler</a></span></input>
	        </div>        
	      </fieldset>	      
	      
	      <fieldset id="fs_confirm">
	      	  <input type="button" value="Continuar" id="button_ir_a_pagar_reserva" class="botones" style="display:none"/>
	          <input type="submit" value="Confirmar" id="button_confirmar_reserva" class="botones" style="display:none"/>
	      </fieldset>	
	      
	    </div>
	  
	  </form>
	  
      <div id="booking-payment" style="display:none">

        <div id="booking_summary">
        </div>
        
        <form name="form-payment" id="form-payment">
          <div id="payment_methods">
             <h3 class="guiblock-title">Formas de pago</h3>
             <div id="payment_methods_selector"></div>
          </div>
          <div class="formrow-botonera">
             <input type="submit" value="Reservar"/>
          </div>
        </form>

      </div>

	  <div id="booking-complete-message">
	  
	  </div>
	  
      <!-- overlayed element -->
      <div class="apple_overlay" id="overlay">

	     <!-- the external content is loaded inside this tag -->
	     <div class="contentWrap"></div>

      </div>	  
	  
      <div id="sending-booking" title="Enviando la solicitud de reserva" style="display:none">
        <img src="/img/ajax-loader_grande.gif"/>
      </div>
            
    </div>
      
    <div id="content-footer">
      
    </div>  
      
  </div>
  
  <!-- JS TEMPLATES -->
  
  <script type="text/tmpl" id="script_extras">
  	          <tr class="booking_extra" id="booking_extra_<%%=extra.id%>" <%% if (!extra.optionalAccepted(optional)) {%> style="display:none" <%% } %> >
	            <td>
	               <input type="checkbox" name="extras[<%%=extra.id%>[extra_id]]" id="extras[<%%=extra.id%>[extra_id]]" value="<%%=extra.id%>" rel="extras[<%%=extra.id%>[quantity]]" class="extra"/>
	            </td>
	            <td>   
	               <label id="label_extra_<%%=extra.id%>"><%%=extra.the_name%></label>
	            </td>
	            <td>
	               <%% if (extra.max_quantity > 1) { %>
	               <select name="extras[<%%=extra.id%>[quantity]]" id="extras[<%%=extra.id%>[quantity]]" class="extraquantity" rel="<%%=extra.id%>">
	                 <option value="0" selected="selected">0</option>
	                 <%% for (var idx=1; idx <= extra.max_quantity; idx++) { %>
	                   <option value="<%%=idx%>"><%%=idx%></option>
	                 <%% } %>
	               </select>	
	               <%% } %>            
	            </td>
	          </tr>
  </script>
  
  <script type="text/tpml" id="script_detailed_price">
      <table class="detailed_price">
        <thead>
          <tr>
            <th>Concepto</th>
            <th>Cantidad</th>
            <th>Días</th>
            <th>Precio</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="first_column"><%%= bookingDataSystem.families[booking.item_id].cars %> <%% if (booking.optional) { %> <%%='('+DoralAuto.optionals[booking.optional].name+')'%> <%% } %> </td>
            <td class="quantity_column"><%%= booking.quantity %> </td>
            <td class="quantity_column"><%%= booking.days %> </td>
            <td class="quantity_column"><%%= booking.item_cost %> € </td>
          </tr>
          <%% for (extra in booking.booking_extras) { %>
            <tr>
              <td class="first_column"><%%= bookingDataSystem.extras[booking.booking_extras[extra].extra_id].the_name %></td>
              <td class="quantity_column"><%%= booking.booking_extras[extra].quantity %></td>
              <td class="quantity_column"><%%= booking.days %> </td>
              <td class="quantity_column"><%%= booking.booking_extras[extra].extra_cost %> €</td>
            </tr>
          <%% } %>
          <tr>
            <td class="total_column first_column">TOTAL</td>
            <td class="quantity_column"></td>
            <td class="quantity_column"></td>
            <td class="quantity_column total_column"><%%= booking.total_cost %> € </td>
          </tr>
        </tbody>      
      </table>
  
  </script>
  
  <script type="text/tpml" id="script_booking_summary">
      
      <h3 class="guiblock-title">Reserva</h3>

      <p><span class="highlighted_text"><%%= item %></span></p>
      <p><span class="highlighted_text">Entrada:</span> <%%= date_from %></p>
      <p><span class="highlighted_text">Salida:</span> <%%= date_to %></p>
 
      <h3 class="guiblock-title">Precio</h3>

      <%%= priceSummary %>

      <p class="content_data_box" style="text-align: center; margin-left:auto; margin-right: auto; display: table">
         Para confirmar la reserva debe hacer un abono de <span class="highlighted_text"><%%= booking.booking_amount %>€</span>.
      </p>

  </script>

  <script type="text/tpml" id="script_booking_finished">
	    
	  <h2>Reserva pendiente de confirmación </h2>
	  
	  <p class="bf-title">Estimado Sr/Sra. <%%= booking.customer_name %> <%%= booking.customer_surname %>: </p>
	  <p class="bf-message">Queremos agradecerle su confianza en <strong><%%= bookingConfiguration.company %></strong> para el alquiler de su <%%= bookingConfiguration.item_type %>.</p>
	  <p class="bf-message">En breve recibirá en su correo electrónico, <em> <%%= booking.customer_email %> </em>, todos los datos para realizar el pago por transferencia de su reserva.</p>
	  <p class="bf-message">Recuerde que dispone de una plazo máximo de 72 horas para realizar el pago y de esta forma confirmar su reserva.</p>
	  <p class="bf-footer">Atentamente, </p>
	  <p class="bf-footer">El equipo de <%%= bookingConfiguration.company %></p>
	  	    	  	    
  </script>
  
  <!-- CODE -->
  
  <script type="text/javascript">
    
  require(['jquery', 'YSDForms', 'YSDDateControl', '/js/booking.js', 'ysdtemplate',
           'YSDListSelector', 'YSDRemoteDataSource', 'json2', 'jquery.validate', 
  	       'jquery.placeholder', 'jquery.ui', 'jquery.ui.datepicker-es', 
  	       'jquery.ui.datepicker.validation',
  	       'jquery.tools', 'jquery.formparams', 'datejs'], 
  	       function($, YSDForms, DateControl, bookingDataSystem, tmpl, 
  	       ListSelector, RemoteDataSource) {  

    /* It represents the wizard tabs */

    var WizardTab = function (element_id, visible) {
       	
      this.element_id = element_id;
      this.state = null;
                	         	  
      this.setState = function(new_state) { /* set the state (not-enabled, active, not-active) */ 
       	  
        this.state = new_state;
      	    
        switch (this.state) {
       	    
  	      case 'not-enabled':
   	        $('#' + this.element_id).removeClass('active not-active').addClass('not-enabled');
   	        break;
       	        
   	      case 'active':
   	        $('#' + this.element_id).removeClass('not-active not-enabled').addClass('active');
   	        break;
       	        
   	      case 'not-active':
   	        $('#' + this.element_id).removeClass('active not-enabled').addClass('not-active');
   	        break;
       	       
        }         	    
      
      };
       	  
      this.setVisible = function(visible) { /* setVisible */
        this.visible = visible;	
       	    
       	if (this.visible) {
       	  $('#' + element_id).show();
       	}
       	else {
       	  $('#' + element_id).hide();
       	}
       	    
       	return this;
      }
       	
      this.setVisible(visible);

    };
 

    /* ----------------------------------- */
    /* An object that represents the MODEL */
    /* ----------------------------------- */
        
    var bookingModel = {

       all_prices : [],    /* Caches all models prices for the period */
       exceeded_hours : 2, /* Used when calculating prices. When exceeded it's considered one more day */
       process_states : [ 'item_selection', 'completing_booking', 'pay_booking', 'continue_booking', 'sending_booking', 'process_finished', 'process_error' ],
       process_state : 'item_selection',
       confirmBookingResponse : null, /* It holds the confirm booking response */       
       booking : {

          date_from : null, /* the booking date from */
          time_from : null, /* the booking time from */
          date_to : null, /* the booking date to */
          time_to: null, /* the booking time to */
          date_to_price_calculation : null, /* the date to used when calculating prices */
          days: 0, /* renting days */
          quantity: 1, /* Number of products */
          item_id : null, /* the booking item */
          item_description: null, /* the booking item description */

          optional: null, /* the booking optional */
       
          item_cost : 0, /* the item cost */
          extras_cost : 0, /* the extras cost */
          total_cost : 0, /* the total cost (item + extras) */
          booking_extras : {}, /* The booking extras */
          booking_amount: 0, /* The amount to pay to confirm the booking */
          
          set_item : function (item_id) { /* Set the booking item */
          	
          	old_cost = this.item_cost;
            this.item_id = item_id;
            this.item_description = bookingDataSystem.families[item_id].description;
            if (this.optional != null) {
              this.item_cost = bookingModel.all_prices[item_id][this.optional];
            }
            else {
       	      this.item_cost = bookingModel.all_prices[item_id];
       	    }
       	    this.addCost( this.item_cost - old_cost);

       	    for (extra in this.booking_extras) { /* Calc the extra prices - can change with the item family - */
       	      this.booking_extras[extra].reCalcCost();	
       	    }
          	
          },
          
          /* Set the optional */
          set_optional : function(optional) {
          	var extras = bookingDataSystem.extras;
         	this.optional = optional;
            if (optional != null) {
              for (extraId in this.booking_extras){ 
                if (!extras[extraId].optionalAccepted(optional)) {
                  this.remove_extra(extraId);
                }
              }
              bookingView.update_information('optional');
            }
          },

          addExtraCost : function (value) { /* Add extra cost */
            this.extras_cost += value;
            this.addCost( value );
          },
  
          addCost : function (value) { /* Add cost */
   	         this.total_cost += value;
   	         this.booking_amount = new Number(this.total_cost * 
             	bookingDataSystem.configuration.booking_percentage / 100).toFixed(0);
          },          
                               
          BookingExtra : function (extra_id, quantity) {
   	 
   	         this.extra_id = extra_id;
   	         this.quantity = quantity;
   	         this.extra_description = bookingDataSystem.extras[extra_id].the_name;
   	         this.extra_unit_cost = bookingDataSystem.calculate_extra_price(bookingModel.booking.date_from, 
   	         	bookingModel.booking.date_to_price_calculation, this.extra_id, bookingModel.booking.item_id);
   	         this.extra_cost = this.quantity * this.extra_unit_cost;
   	         this.data = bookingDataSystem.extras[extra_id];
 
             this.set_quantity = function (new_quantity) {
     	
     	        this.quantity = new_quantity;
     	        var old_extra_cost = this.extra_cost;
     	        this.extra_cost = new_quantity * this.extra_unit_cost;         
                bookingModel.booking.addExtraCost (this.extra_cost - old_extra_cost);  

             }
 
             this.reCalcCost = function() { /* Computes the extra price */

                var old_extra_cost = this.extra_cost;
                this.extra_unit_cost = bookingDataSystem.calculate_extra_price(bookingModel.booking.date_from, 
                	bookingModel.booking.date_to_price_calculation, this.extra_id, bookingModel.booking.item_id);
                this.extra_cost = this.quantity * this.extra_unit_cost;
                if (this.extra_cost != old_extra_cost) {
                  bookingModel.booking.addExtraCost(this.extra_cost - old_extra_cost);
                }
             }

          },
            
                                                       
          add_extra : function (extra_id, quantity) { /* Adds an extra to the booking */
          	          	
          	  this.booking_extras [extra_id] = new this.BookingExtra(extra_id, quantity);
          	  this.addExtraCost (this.booking_extras[extra_id].extra_cost);      	
          	  bookingView.update_information('booking_extras');
          	            	
          },
     
          remove_extra : function (extra_id) { /* Remove an extra from the booking */
          	
        	  var oldCost = this.booking_extras[extra_id].extra_cost;
   	          delete this.booking_extras [extra_id]; 
   	          this.addExtraCost (-oldCost);  
          	  bookingView.update_information('booking_extras');
          	
          },
          
          change_extra_quantity : function (extra_id, new_quantity) { /* Updates an extra quantity */
          	          	
          	  if ( this.booking_extras[extra_id] == null && new_quantity > 0)
          	  {
          	  	 this.add_extra(extra_id, new_quantity);
          	  }
          	  else 
          	  	if (this.booking_extras[extra_id] != null) {          	
          	  	  if (new_quantity == 0) {
          	       this.remove_extra(extra_id);
          	  	  }
          	  	  else {
          	  	 	this.booking_extras[extra_id].set_quantity(new_quantity);
           	        bookingView.update_information('booking_extras');
          	  	  }
          	  }
          	            	
          },
       
       },
      
       
       /* ----------- The methods ----------------- */
       
       getUrlVars : function()
       {
          var vars = [], hash;
          var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
          for(var i = 0; i < hashes.length; i++)
          {
             hash = hashes[i].split('=');
             vars.push(hash[0]);
             vars[hash[0]] = hash[1];
          }
          return vars;
       },

       change_state : function( action ) {
       	
       	  switch (action) {
       	  	 
       	  	 case 'start' :
       	  	   this.process_state = 'item_selection';
       	  	   break;
       	  	       	  	         	  	          	       
       	     case 'select_item' :
               this.process_state = 'completing_booking';       	     
       	       break;
       	   	       	   	
       	   	 case 'go_to_complete_booking':
       	   	   this.process_state = 'continue_booking';
       	   	   break;
       	   	 
             case 'go_to_pay_booking':
               this.process_state = 'pay_booking';
               break;

       	   	 case 'send_booking':
       	   	   this.process_state = 'sending_booking';
       	   	   break;
       	   	   
       	   	 case 'booking_response_ok':
       	   	   this.process_state = 'process_completed';
       	   	   break;
       	   	   
       	   	 case 'booking_response_error':
       	   	   this.process_state = 'process_error';
       	   	   break;
       	  }
       	       	
       	  bookingView.state_changed(this.process_state);
       	
       },
       
       /* Choose item */
       
       choose_item : function(item, optional) { 
         	
         this.booking.set_optional(optional);
         this.booking.set_item(item); // Sets the item
       	 
       	 this.change_state('select_item');
       	
       },
       
       /* Change the item */
       
       change_item : function(item, optional) {

       	 this.booking.set_optional(optional);
       	 this.booking.set_item(item); // Sets the item
       
         bookingView.update_information('booking_item');
       	
       },

       /* The business logic of calculating prices */
       
       calculate_price : function(date_from, time_from, date_to, time_to) {
       	
       	 this.booking.date_from = date_from;
       	 this.booking.time_from = time_from;
       	 
       	 this.booking.date_to = date_to;
       	 this.booking.time_to = time_to;
       	        	 
       	 var _date_from = new Date( date_from.toString("MM/dd/yyyy ") + time_from);
       	 var _date_to = new Date( date_to.toString("MM/dd/yyyy ") + time_to);
       	        	 
       	 var dias_diferencia = (date_to - date_from) / (1000*60*60*24);
       	 var horas_diferencia = (_date_to - _date_from) / (1000*60*60);
       	 
       	 this.booking.days = dias_diferencia;
       	 this.booking.date_to_price_calculation = new Date(this.booking.date_to.getTime());
       	 
       	 if (this.exceeded_hours > 0 && (horas_diferencia/24 > dias_diferencia + this.exceeded_hours/24) ) {
       	   this.booking.date_to_price_calculation.add( {days:1});
       	   this.booking.days++;
       	 }

       	 this.all_prices = bookingDataSystem.calculate_items_price(this.booking.date_from, 
       	                                                           this.booking.date_to_price_calculation);
       	       	       	
       },    	
              
       add_extra : function (extra, quantity) { /* Add an extra */
       	
       	this.booking.add_extra (extra, quantity);
       	
       },
       
       remove_extra: function (extra) { /* Remove an extra */
       	
       	this.booking.remove_extra (extra);
       	
       },
       
       change_extra_quantity : function (extra, quantity) { /* Change extra quantity */
       	
       	this.booking.change_extra_quantity (extra, quantity);
       	
       },
                    
       prepare_request_object : function (data) { /* Prepares the request object */
       	
            // Creates a request object with all the information (mixin the model and the data passed)
       
           var request = {
              booking : data.booking,
              car_booking : data.car_booking	
           };
                    
           // Drop the properties not necessary to the request (they only live in the Gui)         
                    
           delete request.booking ['customer_email_confirmation'];   
           delete request.car_booking ['driver_date_of_birth_day'];
           delete request.car_booking ['driver_date_of_birth_month'];
           delete request.car_booking ['driver_date_of_birth_year'];
           delete request.car_booking ['driver_driving_license_date_day'];
           delete request.car_booking ['driver_driving_license_date_month'];
           delete request.car_booking ['driver_driving_license_date_year'];
     
                         
           // Copies the booking model data to the request (only the data)
                     
           for (data in this.booking) {
           
               if (typeof this.booking[data] != 'function')
               {
                 request.booking[data] = this.booking[data];
               }
               
           }
           
           // Copies the booking extras model data to the request
           
           request.booking.booking_extras = [];
            
           var extra_index = 0;
           for (var index in this.booking.booking_extras) {
             request.booking.booking_extras[extra_index++] = { 
             	 extra_id : index,
             	 extra_description: this.booking.booking_extras[index].extra_description,
             	 extra_cost : this.booking.booking_extras[index].extra_cost,
             	 extra_unit_cost : this.booking.booking_extras[index].extra_unit_cost,
             	 quantity : this.booking.booking_extras[index].quantity
             }
           }

           return request;
      	
       	
       },

       stringifyRequest : function(request) {

           return JSON.stringify(
                  request, function (key, value) {
                  	  // Convert the date objects (edited as input text) in the right format
                  	  if (this[key] instanceof Date) {
                  	  	return this[key].toString();
                  	  }
                  	  else   
       	           	  if ((key == 'driver_driving_license_date' || key == 'driver_date_of_birth')) {
       	           	  	
       	           	  	if (typeof value == 'string' && $.trim(value) != '')
       	           	  	{
       	           	  	  return new Date(value).toString();  //return Date.parse(value,'d/M/yyyy').toUTCString();	
       	           	  	}
       	           	    else
       	           	    {
       	           	      return null;  
       	           	    }
       	           	  }
       	             	  return value;
       	             });

       },
       
       go_to_payment : function() { /* Go to the payment tab */

        if ($('#form-reservation').valid()) {
          this.change_state('go_to_pay_booking');
        }

       },

       confirm_booking : function (data) { /* Confirms the booking */
       	 this.confirmBookingResponse = null;
         var json_request = this.stringifyRequest(this.prepare_request_object(data));
         this.change_state('send_booking');      	     
       	 $.ajax( 
       	         {
       	           type : 'POST',
       	           url : bookingDataSystem.configuration.booking_url || '/confirm_booking',
       	           data : json_request,
                   dataType: 'html',  /* Response expected from the server */
                   /*crossDomain: true,*/
                   contentType: 'application/json; charset=utf-8', /* Data type sent to the server */
       	                  	           
       	           success : function(data, textStatus, jqXHR) { /* RESPONSE OK */
       	           	 if (jqXHR.getResponseHeader('Content-Type').match(/application\/json/)) {
       	           	   bookingModel.confirmBookingResponse = JSON.parse(data);	
       	           	 }
       	           	 else {
       	           	   bookingModel.confirmBookingResponse = data;	
       	           	 }
       	             bookingModel.change_state('booking_response_ok'); /* textStatus y data */
       	           },	
       	           
       	           error: function(jqXHR, textStatus, errorThrow){ /* RESPONSE ERROR */
       	           	 bookingModel.change_state('booking_response_error'); /* textStatus y errorThrow */
       	           }
       	           
       	         });       
       	
       }
    	
       
    };
    
    /* ---------------------------------------- */
    /* An object that represents the CONTROLLER */
    /* ---------------------------------------- */
    
    var bookingController = {
    
      change_from_date : function(date_from) {
        	
      },
    	
      /* calculate the prices */
      	
      calculate_prices : function (date_from, time_from, date_to, time_to) {
      	bookingModel.calculate_price(date_from, time_from, date_to, time_to);
      	bookingView.show_prices();
      },	
    
      /* start booking */
      
      start_booking : function (item, optional) {
      	
      	bookingModel.choose_item(item, optional);
         
      },
      
      change_item : function (item, optional) {
      	
      	bookingModel.change_item(item, optional);
      	
      },
      
      check_extra : function(extra, quantity) { /* check an extra */
      	bookingModel.add_extra(extra, quantity==='0'?1:new Number(quantity));
      },
      
      uncheck_extra : function(extra) {  /* uncheck an extra */
      	bookingModel.remove_extra(extra);
      },

      change_extra_quantity: function(extra, quantity) { /* change the extra quantity */
         bookingModel.change_extra_quantity(extra, new Number(quantity));	
      },
      
      change_pickup_place_select : function(pickup_place) { /* change pickup place */
        
        if ($('#pickup_place :selected').index() == document.getElementById('pickup_place').length-1 ) {
          $('#pickup_place_other').show();	
          $('#car_booking\\[pickup_place\\]').val('');
          $('#pickup_place_other').focus();
        } 
        else
        {
          $('#pickup_place_other').hide();
          $('#pickup_place_other').val('');	
          $('#car_booking\\[pickup_place\\]').val(pickup_place);
        }
        
      },
      
      blur_pickup_place_input : function(pickup_place) {
      
        if ($('#pickup_place_other').val() != $('#car_booking\\[pickup_place\\]').val()) {
          // stores the pick up place in the form
          $('#car_booking\\[pickup_place\\]').val(pickup_place);
        }
               	
      },
     
      change_return_place_select : function(return_place) { /* change return place */
      	      	
        if ($('#return_place :selected').index() == document.getElementById('return_place').length-1 ) {
          $('#return_place_other').show();
          $('#car_booking\\[return_place\\]').val(''); 	
          $('#return_place_other').focus();
        } 
        else
        {
          $('#return_place_other').hide();
          $('#return_place_other').val('');	
          $('#car_booking\\[return_place\\]').val(return_place);
        }      
      
      },
      
      blur_return_place_input : function(return_place) {
      	
        if ($('#return_place_other').val() != $('#car_booking\\[return_place\\]').val()) {
          $('#car_booking\\[return_place\\]').val(return_place);
        }
      	
      },
      
      go_to_booking_payment_click: function() { /* Go to payment button click */

        bookingModel.go_to_payment();

      },

      confirm_booking : function (data) { /* Confirm button click */
        bookingModel.confirm_booking(data);
      },
        
      /* Copy customer name to driver name */

      copy_customer_to_driver : function() {
      	
        if ($('#car_booking\\[driver_name\\]').val() == '')
        {
          $('#car_booking\\[driver_name\\]').val($('#booking\\[customer_name\\]').val());	
        }
      
        if ($('#car_booking\\[driver_surname\\]').val() == '')
        {
          $('#car_booking\\[driver_surname\\]').val($('#booking\\[customer_surname\\]').val());	
        }
            	
      }
      
    };
    
    /* ---------------------------------- */
    /* An object that represents the VIEW */
    /* ---------------------------------- */
         
    var bookingView = {
    	    	
       configureBookingGui : function() { /* Configure the Gui elements using the booking configuration */
    
         $('#tab-choose-item').html('<span>1</span> Seleccionar el ' + bookingDataSystem.configuration.item_type );

       	 $('#labeldatefrom').html('Fecha de ' + bookingDataSystem.configuration.collection_literal);
       	 $('#labeldateto').html('Fecha de ' + bookingDataSystem.configuration.return_literal);
       	
       	 if (bookingDataSystem.configuration.show_time) {
       	   $('#labeltimefrom').show();
       	   $('#timefrom').show();
       	   $('#labeltimeto').show();
       	   $('#timeto').show(); 	
       	 }
       	 
       	 if (bookingDataSystem.configuration.show_delivery_return_place) {
       	   $('.collection_place').show();
       	   $('.return_place').show();
       	 }
       	 
       	 $('#lg_summary_collection').html( bookingDataSystem.configuration.collection_literal.replace(/^(\w)/, function(whole, first) { return first.toUpperCase(); } )  );
       	 $('#lg_summary_delivery').html( bookingDataSystem.configuration.return_literal.replace(/^(\w)/, function(whole, first) { return first.toUpperCase(); } )  );       	 
       	 $('#lg_summary_item').html( bookingDataSystem.configuration.item_type.replace(/^(\w)/, function(whole, first) { return first.toUpperCase(); } ) );
       	       	 
       	 if (bookingDataSystem.configuration.driver_information)
       	 {
       	   $('#fs_driver').show();
       	 }
       	 
         var locale = $.datepicker.regional["es"];

         $('#datefrom').datepicker({numberOfMonths:2, minDate:bookingDataSystem.configuration.min_date, 
         	maxDate: new Date(bookingDataSystem.configuration.max_date).add(-1).days(), dateFormat: 'dd/mm/yy'}, locale);
         $('#datefrom').datepicker('setDate', '+0'); 

         $('#dateto').datepicker({numberOfMonths:2, minDate:new Date(bookingDataSystem.configuration.min_date).add(1).days(),
            maxDate: bookingDataSystem.configuration.max_date , dateFormat: 'dd/mm/yy'}, locale);
         $('#dateto').datepicker('setDate', '+1');

         if (bookingDataSystem.configuration.payment) {
           this.configurePaymentMethods();
           $('#button_ir_a_pagar_reserva').show();
           $('#button_confirmar_reserva').hide();
           $('#button_ir_a_pagar_reserva').bind('click', function(event) {
             bookingController.go_to_booking_payment_click();
           });
         }
         else {
           $('#button_ir_a_pagar_reserva').hide();
           $('#button_confirmar_reserva').show();
         }

       	 
       },	    	
       
       init : function () { /* Inits the View */	
       	       	       	       	       	       	
       	 // Configure the date controls
       	 // http://jquery-ui.googlecode.com/svn/trunk/ui/i18n/ (locales for datepicker)
       	 // http://keith-wood.name/uiDatepickerValidation.html (validation for datepicker)
       	 $.datepicker.setDefaults( $.datepicker.regional[ "" ] );
       	        	   	 
       	 this.configureBookingGui();
  	          
         // Configure driver date of birth and driver license date                                            
         var dataControlDateOfBirth = new DateControl(document.getElementById('car_booking[driver_date_of_birth_day]'), 
                                              document.getElementById('car_booking[driver_date_of_birth_month]'),
                                              document.getElementById('car_booking[driver_date_of_birth_year]'), 
                                              document.getElementById('car_booking[driver_date_of_birth]'));

         var dataControlLicenseDate = new DateControl(document.getElementById('car_booking[driver_driving_license_date_day]'), 
                                              document.getElementById('car_booking[driver_driving_license_date_month]'),
                                              document.getElementById('car_booking[driver_driving_license_date_year]'), 
                                              document.getElementById('car_booking[driver_driving_license_date]'));

         // Configure the comments textarea
         YSDForms.limit_text_area_content_size(document.getElementById('booking[comments]'), 256, 
            function (content_remain) {
              document.getElementById('booking_comments_length').innerHTML = '<strong>' + content_remain + '</strong>';
            }
         );                
         
         // configure place holders
         $('input[placeholder],textarea[placeholder]').placeholder();
         
         // Configure item behaviour
         $('#booking\\[item_id\\]').bind('change',
           function() {
           	
           	 bookingController.change_item($(this).val(), $(this).find(":selected").attr('data-optional'));
           	
           });
          	 
       	 // Configure the pickup_place and return_place behaviour
       	 $('#pickup_place').bind('change',
       	   function() {
       	   	 bookingController.change_pickup_place_select($(this).val());
       	   });
       	 $('#pickup_place_other').bind('blur',
       	   function() {
       	   	 bookingController.blur_pickup_place_input($(this).val());
       	   });
       	 $('#car_booking\\[pickup_place\\]').val($('#pickup_place').val());  
       	   
       	 $('#return_place').bind('change',
       	   function() {
       	   	 bookingController.change_return_place_select($(this).val());
       	   });
       	 $('#return_place_other').bind('blur',
       	   function() {
       	   	 bookingController.blur_return_place_input($(this).val());
       	   });
       	 $('#car_booking\\[return_place\\]').val($('#return_place').val());  
       	      	       	
       	 // Configure the dialog(s)
       	 $('#sending-booking').dialog({autoOpen: false, height: 260, modal: true,
       	      closeOnEscape: false,
       	       open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); },
       	       close: function(event, ui) { $(".ui-dialog-titlebar-close").show(); }
             });
       	 	
	     // Mostrar los enlaces incrustados
	     $("a[rel='#overlay'].external").overlay({
	      	
	      	// Mascara para los dialogos modales
	        mask: {
		       color: '#aaaaaa',
		       loadSpeed: 200,
		       opacity: 0.5
   	        },
	
	        closeOnClick : false,
	      	
		    onBeforeLoad: function() {
		    	
		      this.getOverlay().width(640);
		      this.getOverlay().height(440);	
			  
			  // grab wrapper element inside content
			  var wrap = this.getOverlay().find(".contentWrap");

		  	  // load the page specified in the trigger
			  wrap.load(this.getTrigger().attr("href"));
	      	}

	      });
	      
	      // Mostrar los templates
	      $("a[rel='#overlay'].template").overlay({
	      	
	      	// Mascara para los dialogos modales
	        mask: {
		       color: '#aaaaaa',
		       loadSpeed: 200,
		       opacity: 0.5
   	        },
	
	        closeOnClick : false,
	      	
		    onBeforeLoad: function() {
		    	
		      this.getOverlay().width(500);
		      this.getOverlay().height(320);	
		    	
			  // grab wrapper element inside content
			  var wrap = this.getOverlay().find(".contentWrap");

		  	  // load the page specified in the trigger
		  	
		  	  var message = tmpl(this.getTrigger().attr("href"), {booking: bookingModel.booking, bookingDataSystem: bookingDataSystem});
		  	  
			  wrap.html(message);
	      	}
	      
	      	
	      });
         
         // Configure name and surname events
         $('#booking\\[customer_name\\],#booking\\[customer_surname\\]').bind('blur',
             function(){
               bookingController.copy_customer_to_driver();
             }
           );
         
         
       	 // Configure validations	
       	 this.configure_validations();
       	
       	 // Configure state
       	 this.state_changed(bookingModel.process_state);
    
         //
         this.init_form();   	
       	
       },	
       
       init_form : function () {
       	
       	  var url_vars = bookingModel.getUrlVars();
       	  
       	  var datefrom = decodeURIComponent(url_vars['datefrom']);    	  
       	  var timefrom = decodeURIComponent(url_vars['timefrom']);
       	  var dateto = decodeURIComponent(url_vars['dateto']);
       	  var timeto = decodeURIComponent(url_vars['timeto']);
       	  
       	  if (datefrom != 'undefined' && dateto != 'undefined') {       	  
            $('#datefrom').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", datefrom)); 
            $('#timefrom').val(timefrom);
            $('#dateto').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", dateto)); 
            $('#timeto').val(timeto);       	   
            this.calculate_prices();

       	  }
       },        
            
       calculate_prices : function() {

       	    bookingController.calculate_prices($('#datefrom').datepicker("getDate"), 
                                               $('#timefrom option:selected').val(),
                                               $('#dateto').datepicker("getDate"), 
                                               $('#timeto option:selected').val()); 
       	
       },     
              
       configure_validations : function () {
       	
       	
       	 // Search item form validation
       	 
       	 $('#form-search-item').validate(
       	  {
       	  	
            submitHandler: function(form) {
               bookingView.calculate_prices();
               return false;
            },
                 	        	   
       	    rules : {
       	   
       	       'datefrom': {
       	         required: true	
       	       },
       	     
       	       'dateto': {
       	         required: true,
       	         dpCompareDate : { 'notLessThan' : '#datefrom'} // dateto can not be less than datefrom
       	       }
       	   	
       	    },
       	    
       	    messages : {
       	    	
       	       'datefrom': {
       	       	 required : 'Debe informar la fecha de entrega'
       	       },	
       	    	
       	       'dateto' : {
       	       	 required : 'Debe informar la fecha de devolución',
       	       	 dpCompareDate : 'La fecha de devolución no puede ser anterior a la de entrega'
       	       }	
       	    },
       	    
       	    errorPlacement : function(error, element) {
       	    	
       	    	if (element.attr('name') === 'datefrom') {
       	    	  error.insertAfter('#timefrom');
       	    	}
       	    	
       	    	if (element.attr('name') === 'dateto') {
       	    	  error.insertAfter('#timeto');	
       	    	}
       	    	
       	    }
       	    
       	    
       	  }
       	 );
       	
       	// Booking Form Validation
        $('#form-reservation').validate(
         {
          
           submitHandler: function(form) {
           	 bookingController.confirm_booking($(form).formParams(false)); // Numbers and booleans are not converted (hold as strings)
           	 return false;
           },
           
           invalidHandler : function (form, validator) {
      
               $('<div title="Formulario no válido"> Por favor, revise el formulario. Contiene datos no válidos </div>').dialog( { height: 260, modal: true,     	 
       	        buttons: {
       	            Ok: function() {
				   	  $( this ).dialog( "close" );
       	            }
       	        } }
       	        );
      
           },
           
           rules : {
           	
           	'booking[customer_name]': 'required',
           	'booking[customer_surname]' : 'required',
           	'booking[customer_email]' : {
           	  required: true,
           	  email: true	
           	},
           	'booking[customer_email_confirmation]': {
           	  required: true,
           	  email: true,
           	  equalTo : '#booking\\[customer_email\\]'	/* scape slash with brackets \\[email\\] */
           	},
           	'booking[customer_phone]': {
           	  required: true,
           	  minlength: 9	
           	},
           	'car_booking[driver_date_of_birth]': {
           	  required: "#fs_driver:visible"	
           	},
           	'car_booking[pickup_place]': {
           	  required: "#fs_driver:visible"	
           	},
           	'car_booking[return_place]': {
           	  required: "#fs_driver:visible"	
           	},
           	'conditions_read' : 'required'
           	
           },
           
           messages : {
           	
            'booking[customer_name]': 'El nombre del cliente es obligatorio',
           	'booking[customer_surname]' : 'Los apellidos del cliente son obligatorios',
           	
           	'booking[customer_email]' : {
           	   required: 'El correo electrónico del cliente es obligatorio',
           	   email: 'El correo electrónico debe estar en formato usuario@dominio.com'
           	},
           	
           	'booking[customer_email_confirmation]': {
           	  'required': 'Confirmación del correo electrónico obligatorio',	
           	  email: 'El correo electrónico debe estar en formato usuario@dominio.com',
           	  'equalTo': 'Debe ser igual al correo electrónico'
           	},
           	
           	'booking[customer_phone]': {
           	  'required': 'El teléfono del cliente es obligatorio',
           	  'minlength': 'Debe introducir un número de teléfono de 9 dígitos'	
           	}, 
           	'car_booking[driver_date_of_birth]': {
           	  'required': 'La fecha de nacimiento del conductor es obligatoria'	
           	},       	
           	'car_booking[pickup_place]': {
           	  'required': 'El lugar de entrega es obligatorio'	
           	},
           	'car_booking[return_place]': {
           	  'required': 'El lugar de devolución es obligatorio'	
           	},
           	'conditions_read': 'Debe aceptar las condiciones'
           	
           },
        
           errorPlacement: function (error, element) {
           	  
           	  if (element.attr('name') == 'conditions_read')
           	  {
           	    error.insertAfter(element.parent()); 
           	  }
           	  else
           	  {
           	    error.insertAfter(element);
           	  }
           	  
           },
           
           errorClass : 'form-reservation-error'            
                   
         }
        );
       	
        $('#form-payment').validate({

          submitHandler : function(form) {
         	
            var bookingData = $('#form-reservation').formParams(false);
            var paymentData = $(form).formParams(false);
            for (item in paymentData) {
              if (item == 'booking') {
              	for (bookingItem in paymentData.booking) {
                  bookingData.booking[bookingItem] = paymentData.booking[bookingItem];	
                } 
              }
              else {
              	bookingData[item] = paymentData[item];
              }
            }
            bookingController.confirm_booking(bookingData);
         	return false;
          },

          invalidHandler : function (form, validator) {
      
            $('<div title="Formulario no válido"> Por favor, revise el formulario. Contiene datos no válidos </div>').dialog( { height: 260, modal: true,     	 
       	        buttons: {
       	            Ok: function() {
				   	  $( this ).dialog( "close" );
       	            }
       	        } 
       	      });
      
          },
  
          rules : {
        	'booking[payment_method_id]' : {
        		required: true
        	}
          },

          messages : {
        	'booking[payment_method_id]': {
        		required: 'Debe seleccionar la forma de pago'
        	}
          },

       	  errorPlacement : function(error, element) {
       	    	
       	  	if (element.attr('name') === 'booking[payment_method_id]') {
       	   	  error.insertAfter('#payment_methods');
       	   	}          
          
          }

        });

       },
              
       show_prices : function() { /* Show search result */

         var container = $('#result');
      
         // Unbind the previous click handlers
         $('.book-button').unbind('click');
      
      
         container.empty();
      
         var prices = bookingModel.all_prices;
      
         // Puts the prices      
         for (var family in prices) 
         {
      	
      	   var content =	     	
      	        '<div class="car '+family+'">' +
      	          '<div class="car_photo">' +
      	            '<img src="/img/clase-'+family+'.png"/>' +
      	          '</div>' +
      	          '<div class="car_detail">' +
      	            '<div class="car_detail_description"><span class="car_family_description">'+bookingDataSystem.families[family].description+'</span></div>' +
      	            '<div class="car_detail_cars"><span class="car_family_cars">'+bookingDataSystem.families[family].cars+'</span></div>'+
      	          '</div>';
     	   if (bookingDataSystem.optionals) {
      	     content += '<div class="car_price">';
             for (var option in bookingDataSystem.optionals) {
             	content += 
             	  '<div class="car_price_optional">'+
             	    '<div class="car_price_optional_text">' + bookingDataSystem.optionals[option].name + '</div>' +
                    '<div class="car_price_total"><span>' + prices[family][option].toFixed(0) + ' €' + '</span></div>' +
                    '<div class="car_price_booking"><input type="button" class="botones book-button" id="button_start_booking_'+family+'" value="Reservar" rel="'+family+'" data-optional="'+ option + '" /></div>' +     	          
      	          '</div>';
             }
             content += '</div>';
      	   }
      	   else {      
    	     content += '<div class="car_price car_price_not_optional">'+
                    '<div class="car_price_total"><span>'+prices[family].toFixed(0) + ' €' + '</span></div>' +
                    '<div class="car_price_booking"><input type="button" class="botones book-button form-button" id="button_start_booking_'+family+'" value="Reservar" rel="'+family+'" /></div>' +     	          
      	          '</div>';
           }
      	      	     	
           container.append( content ); 
                     	
         }
       	 
       	 $('.book-button').bind('click', function() { bookingController.start_booking($(this).attr('rel'), $(this).attr('data-optional')); }); // configure the events
       	 
       },
       
       /* ---- Load the items in the combo ---- */
       
       load_items : function() {
       
          var comboItems = document.getElementById('booking[item_id]');
          
          // Remove the options
          if (comboItems.options.length > 0)
          {
          	while (comboItems.hasChildNodes())
          	{
          	  comboItems.removeChild(comboItems.firstChild);	
          	}
          }
          
          // Add the new options
          
          for (var item_class in bookingModel.all_prices)
          {
            if (bookingDataSystem.optionals) {
              for (var optional in bookingDataSystem.optionals) {
                var optionItem = document.createElement('option');
                optionItem.setAttribute('value', item_class);
                optionItem.setAttribute('data-item', item_class);
                optionItem.setAttribute('data-optional', optional);	
                optionItem.text = optionItem.innerText = bookingDataSystem.families[item_class].description + ' (' + bookingDataSystem.optionals[optional].abbr + ')' + ' ... ' + 
                  bookingModel.all_prices[item_class][optional] + ' €';
                if (bookingModel.booking.item_id == item_class && bookingModel.booking.optional == optional)
                {
                  optionItem.selected = true;	
                }
                comboItems.appendChild(optionItem);
              }
            }
            else {        
              var optionItem = document.createElement('option');
              optionItem.setAttribute('value', item_class);	
              optionItem.text = optionItem.innerText = bookingDataSystem.families[item_class].description + ' : ' + bookingModel.all_prices[item_class] + ' €';
              if (bookingModel.booking.item_id == item_class)
              {
                optionItem.selected = true;	
              }
              comboItems.appendChild(optionItem);
            }
          }
       },
       
       /* ------ Load the extras -------------------- */
       
       load_extras : function() {
       
         var extrasHtml = '';
         var extras = bookingDataSystem.extras;
         
         for (extra in extras) {
       	   extrasHtml += tmpl('script_extras', {extra: extras[extra], optional: bookingModel.booking.optional});
         }	
         
         $('#tblextras tbody').html(extrasHtml);
       	 $('.extra').bind('click', 
       	   function() { 
       	   	  var control = '#' + $(this).attr('rel').replace(/\[/g,'\\[').replace(/\]/g,'\\]');
       		  if ($(this).is(':checked')) 
       		  {    		  	
       		  	var value = parseInt($(control).val()) || 1;
       		  	bookingController.check_extra($(this).val(), value);
       		    if ($(control)){
       		      $(control).val(value.toString());	
       		    }
       		  }
       		  else
       		  {
       		  	bookingController.uncheck_extra($(this).val());
       		  	if ($(control)) {
       		  	  $(control).val('0');
       		  	}
       		  } 
       		}
       		);
       	 $('.extraquantity').bind('change',
       	   function() {
       	   	 bookingController.change_extra_quantity($(this).attr('rel'), $(this).val());
       	   }
       	 );       
       	
       },
       
       /* ------ Reflect the state change ----------- */
       
       state_changed : function(new_state) {
       	
       	 switch (new_state) {
       	 	
       	   case 'item_selection' : /* First state (begin process) */
       	     break;
       	        
       	   case 'completing_booking' : /* Second state (user choose an item and starts booking) */
       	     this.update_information('booking_data');      	               	   
       	     this.load_items();
       	     this.load_extras();
       	     break;

          case 'continue_booking' : /* Alternative state (user comes back to complete booking) */
            break;
          
          case 'pay_booking': /* Go to payment tab */
            this.showPaymentSummary();
            break;
       	 	
       	  case 'sending_booking' : /* Sending the booking using Ajax (user clicks confirm button) */
       	    $('#sending-booking').dialog('open');
       	    break;
       	    
       	  case 'process_completed' : /* The booking has been saved in the system */
       	    $('#sending-booking').dialog('close');   
            if (typeof(bookingModel.confirmBookingResponse) == 'string') {
              document.write(bookingModel.confirmBookingResponse);	
              return;
            }
       	    break;
       	    
       	  case 'process_error' : /* The booking has not been saved in the system */
       	    $('#sending-booking').dialog('close');
            $('<div title="Error en solicitud de reserva"> Error en el proceso </div>').dialog( { height: 260, modal: true,     	 
       	        buttons: {
       	            Ok: function() {
				     $(this).dialog("close");
				  }
				},
				close : function(event, ui) {
				   	$( this ).dialog( "close" );				
				}
           	  });       	           	  
       	    break;
       	 }
       	 
   	     this.wizard.state_changed(new_state);
       	
       },
       
       configurePaymentMethods: function() {
          
          var paymentMethodsDS = new RemoteDataSource('/paymethods', 
          	{id:'id', description: function(data){
          	  var img = (data.icon && data.icon.length > 0)?'<img src="'+ data.icon + '"/>':'';	
          	  img += '<span class="highlighted_text">' + 
          	    data.title +'</span><div class="lighter_text">' + data.description + '</div>';
          	  return img;} 
          	});
          
          var paymentMethods = new ListSelector('payment_methods_selector',
          	'booking[payment_method_id]', paymentMethodsDS, null, false);

       },

       showPaymentSummary : function() {

          var summary = tmpl('script_booking_summary', 
          	{date_from: $('#date_from_extended').val(), 
          	 date_to: $('#date_to_extended').val(),
          	 item: bookingDataSystem.families[bookingModel.booking.item_id].description,
          	 booking: bookingModel.booking,
          	 configuration: bookingDataSystem.configuration,
          	 priceSummary : tmpl('script_detailed_price', {booking: bookingModel.booking, 
                            bookingDataSystem: bookingDataSystem})
            });
          
          $('#booking_summary').html(summary);

       },

       /* --------- UPDATE DATA ---------------- */	 
       update_information : function(information) {
       	
       	 switch (information) {
       	 	
       	   case 'booking_data' :
       	     var date_time_from = new Date(bookingModel.booking.date_from).toString( "dddd, d MMMM yyyy");
       	     if (bookingDataSystem.configuration.show_time) {
       	       date_time_from += ' ' +bookingModel.booking.time_from;	
       	     }
       	     var date_time_to = new Date(bookingModel.booking.date_to).toString( "dddd, d MMMM yyyy");
       	     if (bookingDataSystem.configuration.show_time) {
       	       date_time_to +=  ' ' +bookingModel.booking.time_to;
       	     }
       	     $('#date_from_extended').val( date_time_from );  
       	     $('#date_to_extended').val( date_time_to );

       	   case 'booking_item' :
       	     var path='/img/clase-'+bookingModel.booking.item_id+'.png';
       	     $('#item_image').attr('src',path);

       	   case 'booking_cost' :
       	     $('#total_cost').val( bookingModel.booking.total_cost.toFixed(0) + ' €' );
       	     //$('span.total_cost').html( bookingModel.booking.total_cost.toFixed(0) + ' €' );
       	     $('#detailed_summary').html( 
       	      tmpl('script_detailed_price', {booking: bookingModel.booking, 
                            bookingDataSystem: bookingDataSystem}) );
       	     break;
       	   
           case 'optional':
             var extras = bookingDataSystem.extras;
             for (extra in extras) { //Hide the not accepted extras
             	if (!extras[extra].optionalAccepted(bookingModel.booking.optional)) {
             	  $('#booking_extra_'+extra).hide();	
             	}
             	else {
             	  $('#booking_extra_'+extra).show();	
             	}
             }
             break;

       	   case 'booking_extras' :
       	         	            	  
               // Uncheck the removed extras
               $('.extra').each( function(index, element) {
               	if ($(this).is(':checked') && bookingModel.booking.booking_extras[$(this).attr('value')] == null) {
               	  $(this).attr('checked', false);
               	}
               });  
               
               // Update the extras
         	   var extras = bookingModel.booking.booking_extras;
       	       for (var extra_id in extras) {
       	  	     
       	  	     // Extras checkbox
       	  	     var checkbox = $('#extras\\['+extra_id+'\\[extra_id\\]\\]');
       	  	    
       	  	     if (!checkbox.is(':checked')) {
       	  	     	checkbox.attr('checked', true);
       	  	     }
       	  	 
       	  	     // Extras quantity
       	  	     var option = $('#extras\\['+extra_id+'\\[quantity\\]\\]');
       	  	     
       	  	     if (option.val() != extras[extra_id].quantity)
       	  	     {
       	  	       option.val(extras[extra_id].quantity);	
       	  	     }       	  	     
       	  	     
        	   }
        	           	     
        	   /* Update the cost */
       	       this.update_information('booking_cost');
       	       break;
       	 	
       	 }
       	
       },	 
       	    	   	    
       	    	   	    
       wizard : {
       	
       	 tabs : { 
       	 	       'tab-choose-item' : new WizardTab ('tab-choose-item', true),
       	 	       'tab-complete-reservation' : new WizardTab('tab-complete-reservation', true),
       	 	       'tab-payment' : new WizardTab('tab-payment', bookingDataSystem.configuration.payment)
       	        },
       	       
       	 state_changed : function (new_state) {
       	 
       	   switch (new_state) {
       	   	
       	   	  case 'item_selection' : /* Item selection tab */
       	        $('#form-reservation').hide();
       	        $('#item-selection').show();
       	        $('#booking-payment').hide();
       	   	    this.tabs['tab-choose-item'].setState('active'); 
       	   	    this.tabs['tab-complete-reservation'].setState('not-enabled');
       	   	    this.tabs['tab-payment'].setState('not-enabled');
       	   	    break;
       	   	  
       	   	  case 'completing_booking' : /* Complete booking data tab */
       	   	  case 'continue_booking' :
       	        $('#item-selection').hide();
                $('#form-reservation').show();
       	   	    $('#booking-payment').hide();
       	   	    this.tabs['tab-choose-item'].setState('not-enabled'); 
       	   	    this.tabs['tab-complete-reservation'].setState('active');
       	   	    this.tabs['tab-payment'].setState('not-enabled');
       	   	    break;

              case 'pay_booking': /* Payment tab */
                $('#item-selection').hide();
                $('#form-reservation').hide();
                $('#booking-payment').show();
     	   	    this.tabs['tab-choose-item'].setState('not-enabled'); 
       	   	    this.tabs['tab-complete-reservation'].setState('not-enabled');
       	   	    this.tabs['tab-payment'].setState('active');                
                break;
       	   	  
              case 'process_completed': /* Summary tab */
         	    $('#item-selection').hide();
         	    $('#form-reservation').hide();
         	    $('#booking-payment').hide();

		       	var data = $('#form-reservation').formParams(false);
		       	data.bookingConfiguration = bookingDataSystem.configuration;   
		       	var message = tmpl('script_booking_finished', data);
		       	$('#booking-complete-message').html(message);
       	        $('#booking-complete-message').show();
       	        
     	   	    this.tabs['tab-choose-item'].setState('not-enabled'); 
       	   	    this.tabs['tab-complete-reservation'].setState('not-enabled');
       	   	    this.tabs['tab-payment'].setState('not-enabled');  

                break;

       	   }
       	 	
       	 },
       	 
       	 show : function() {
       	 	$('#wizard-navigation').show();
       	 },
       	 
       	 hide: function() {
       	 	$('#wizard-navigation').hide();
       	 }
       	
       }
              	    	   	    
       	    	   	          	
    }
  
    bookingView.init();
  
  });
  </script>
