<%= partial('not_assigned_bookings.js'.to_sym) %>

require(['YSDSpreadSheet', 'YSDEventTarget', 'jquery', 'confirmedBooking'], 
        function(Spreadsheet, EventTarget, $, confirmedBooking) {

  planningModel = {

     bookingItems: [],            /** Array of booking_item' reference **/
     bookingItemsDetail: [],      /** Array of booking_item objects (reference + category) **/
     bookingItemsDescription: [], /** Array of resources description with link **/
     bookingItemsCategory: {},    /** Hash, the key is the category and the value an array
                                   of booking items of this category. Used to display the table of bookings **/
     bookings: [],                // Array of the bookings represented in the planning
     bookingsHash: {},            // Hash where the id is booking.id and the value the booking

     month:new Date().getMonth()+1,
     year:new Date().getFullYear(),
     events: new EventTarget(),

     addListener: function(type, listener) { /* addListener */
       this.events.addEventListener(type, listener); 
     },

     removeListener: function(type, listener) { /* removeListener */
       this.events.removeEventListener(type, listener);      
     },

     daysInMonth: function() {
       return new Date(this.year, this.month, 0).getDate();
     },

     prevMonth: function() {
       if (this.month == 1) {
         this.month = 12;
         this.year--;
       }
       else {
        this.month--;
       }
       planningView.update('month_navigation');
       this.events.fireEvent({type:'month_changed', data: {month: this.month, year: this.year}});
     },

     nextMonth: function() {
       if (this.month == 12) {
         this.month = 1;
         this.year++;
       }
       else {
         this.month++;
       }
       planningView.update('month_navigation');
       this.events.fireEvent({type:'month_changed', data: {month: this.month, year: this.year}});
     },

     reassignBooking: function(booking_line_resource_id,
                               booking_line_resource_index, 
                               bookingItemReference, 
                               isReassigned, 
                               aBooking) {

       var booking = this.bookingsHash[aBooking.id];
       if (booking) {
          if (booking.booking_line_resources && booking.booking_line_resources[booking_line_resource_index]) {
            booking.booking_line_resources[booking_line_resource_index].booking_item_reference = bookingItemReference;
            planningView.update('booking_assigned', {booking: booking, 
                                                     isReassigned: isReassigned,
                                                     booking_line_resource_index : booking_line_resource_index});
          }
       }
       else {
          if (this.prepareBookingForPlanning(aBooking)) {
            this.bookings.push(aBooking);
            this.bookingsHash[bookingId] = aBooking;
            planningView.update('booking_assigned', {booking: aBooking, 
                                                     isReassigned: isReassigned,
                                                     booking_line_resource_index : booking_line_resource_index});
          }
       }

     },

     loadBookingItems: function() { /* Load the booking items */

       $.ajax({
               type: 'GET',
               url : '/api/booking-items',
               contentType: 'application/json; charset=utf-8',
               dataType : 'json',
               success: function(data, textStatus, jqXHR) {
                  for (var idx=0; idx < data.length; idx++) {
                     if (!((data[idx].category_code) in planningModel.bookingItemsCategory)) {
                       planningModel.bookingItemsCategory[data[idx].category_code] = [];
                     }
                     planningModel.bookingItemsCategory[data[idx].category_code].push(data[idx].reference);
                  }
                  planningModel.bookingItems = data.map(function(value, index, array) {
                    return value.reference; 
                  });
                  planningModel.bookingItemsDetail = data.map(function(value, index, array) {
                    return {code: value.reference, category: value.category_code}; 
                  });                  
                  planningView.update('items_available');
                  planningModel.events.fireEvent({type:'items_available', data: planningModel.bookingItemsCategory});
              }
          });

     },

     loadBookings: function() { /* Load the bookings */

        $.ajax({
                 type: 'GET',
                 url: '/api/booking/planning?month=' + this.month + '&year=' + this.year,
                 contentType: 'application/json; charset=utf-8',
                 dataType: 'json',
                 success: function(data, textStatus, jqXHR) {
                   planningModel.bookings = data;
                   planningModel.bookingsHash = {};
                   data.forEach(function(value, index, array) {
                      planningModel.bookingsHash[value.id] = value;
                   });
                   planningView.update('bookings_available');
                 }
        });


     },
     prepareBookingForPlanning: function(booking) {

        var from, to;
        var booking_item_reference;
        var is_in_planning = false;
        booking.planning = [];

        for (var x=0;x<booking.booking_line_resources.length;x++) {
            booking_item_reference = booking.booking_line_resources[x].booking_item_reference;
            from = booking.date_from.getDate();
            if (booking.date_to.getMonth() != booking.date_from.getMonth()) {
              if (booking.date_from.getMonth()+1 == planningModel.month) {
                var d = new Date();
                d.setFullYear(booking.date_to.getYear(), booking.date_to.getMonth() + 1, 0);
                to = d.getDate();
              }
              else {
                from = 1;
                to = booking.date_to.getDate();
              }
            }
            else {
              to = Math.min(booking.date_to.getDate())
            }
            booking.planning.push({ resource: booking_item_reference , from: from, to: to, booking_id: booking.id });
            is_in_planning = true;
        }

        return is_in_planning;
    },     

  };

  planningController = {

    prevMonthClick: function() {
       planningModel.prevMonth();
    },

    nextMonthClick: function() {
       planningModel.nextMonth();
    } 

  };

  planningView = {

    spreadsheet : null,

    init : function() {
      planningModel.events.fireEvent({type:'month_changed', data: {month: planningModel.month, year: planningModel.year}});                  
      planningModel.loadBookingItems();
      $('#month').html(planningModel.month);
      $('#year').html(planningModel.year);
      $('#prev').bind('click', function() {
         planningController.prevMonthClick();
      });
      $('#next').bind('click', function() {
         planningController.nextMonthClick();
      });

    },

    update: function(event, data) {

      switch (event) {
         case 'month_navigation':
           $('#month').html(planningModel.month);
           $('#year').html(planningModel.year);     
           planningModel.loadBookings();     
           break;

         case 'items_available':
           this.buildSpreadsheet();
           planningModel.loadBookings();
           break;

         case 'bookings_available':
           this.loadBookings();
           break;

         case 'booking_assigned':
           if (data.isReassigned) {
             this.unloadBooking(data.booking, data.booking_line_resource_index);             
           }
           if (data.booking.planning && data.booking.planning[data.booking_line_resource_index]) {
             data.booking.planning[data.booking_line_resource_index].resource = data.booking.booking_line_resources[data.booking_line_resource_index].booking_item_reference;
           }           
           this.loadBooking(data.booking, data.booking_line_resource_index);
           break;
      }

    },

    buildSpreadsheet: function() { // Builds the spreadsheet with the booking items

      var days = [];
      var total = planningModel.daysInMonth();
      for (var i=1;i<=total;i++) {
        days[i-1]=i;
      }

      planningModel.bookingItemsDescription = planningModel.bookingItemsDetail.map(function(value, index, array) {
             return '<a style="margin-right:20px; margin-left:20px" href="/admin/booking/scheduler/' + value.code +'?year=' + planningModel.year + '&month=' + (planningModel.month-1) +'" target="blank">'+ value.category + ' - ' + value.code+'</a>'
      });

      $('#planning_table').html('');
      spreadsheet = new Spreadsheet("planning_table",  
          planningModel.bookingItems,            // rows
          days,                                  // columns
          planningModel.bookingItems.length,     // number of rows (items.count)
          "Planning ",                           // 0-0 title
          "planning",                            // input prefix
          1,                                     // input size
          "centered_text",                       // class
          true,                                  // readonly
          planningModel.bookingItemsDescription);  // row description  

      $('.spread_input').bind('click', function(event) { /* Select the bookings */
         var exp = /(\[\w+])/g;
         var values = $(this).attr('name').match(exp);
         if (values.length == 3) {
           var resource = values[1].substring(1,values[1].length-1);
           var day = parseInt(values[2].substring(1,values[2].length-1));
           var selectedBookings = planningModel.bookings.filter(function(booking)Â {
             var isIn = false;
             for (var idx=0;idx<booking.planning.length;idx++) {
               if (booking.planning[idx].resource == resource &&
                   booking.planning[idx].from <= day && 
                   booking.planning[idx].to >= day) {
                 isIn = true;
                 break;
               }
             }
             return isIn;
           }).map(function(booking) {
             return booking.id;
           });
           planningModel.events.fireEvent({type:'filter',
                 data: {resource: resource, 
                        day : day,
                        bookings: selectedBookings}});
         }
      });                             

    },

    loadBookings: function() { // Display the bookings and the spreadsheet

      this.buildSpreadsheet();

      var idx = 0;
      var reference;
      var from, to;
      $('.spread_input').val('');
      for (var i=0;i<planningModel.bookings.length;i++) {
        if (planningModel.prepareBookingForPlanning(planningModel.bookings[i])) {
          this.loadBooking(planningModel.bookings[i]);           
        }
      }
    },

    loadBooking: function(booking, booking_line_resource_index) {

        if (!booking.planning) {
          return;
        }
        var planning = null, booking_item_refrence = null;

        var from = typeof booking_line_resource_index != 'undefined' ? booking_line_resource_index : 0;
        var to = typeof booking_line_resource_index != 'undefined' ? booking_line_resource_index + 1 : booking.planning.length;

        for (var idx=from;idx<to;idx++) {
           planning = booking.planning[idx];
           for (var day=planning.from;day<=planning.to;day++) {
             var selector = '#\\[planning\\]\\['+planning.resource+'\\]\\['+day+'\\]';
             var value = $(selector).val();
             if (value == '') {
               $(selector).val('X');
             }
             else if (value == 'X') {
               $(selector).val('2');
               $(selector).addClass('more_contrast_text');               
             }
             else {
               if (parseInt(value) != NaN) {
                 $(selector).val(parseInt(value)+1);
               }
             }
             if (booking.planning_color) {
               $(selector).css('background', booking.planning_color);
               //$(selector).css('color', 'white');
             }
           }
        }

    },

    unloadBooking: function(booking, booking_line_resource_index) {

        if (!booking.planning) {
          return;
        }
        var planning = null;
        var from = typeof booking_line_resource_index != 'undefined' ? booking_line_resource_index : 0;
        var to = typeof booking_line_resource_index != 'undefined' ? booking_line_resource_index + 1 : booking.planning.length;

        for (var idx=from;idx<to;idx++) {
           planning = booking.planning[idx];
           for (var day=planning.from;day<=planning.to;day++) {
             var selector = '#\\[planning\\]\\['+planning.resource+'\\]\\['+day+'\\]';
             var value = $(selector).val();
             if (value == 'X') {
               $(selector).val('');
             }
             else if (value == '2') {
               $(selector).val('X');
               $(selector).removeClass('more_contrast_text');               
             }
             else {
               if (parseInt(value) != NaN) {
                 $(selector).val(parseInt(value)-1);
               }
             }
           }
        }
    }



  };

  planningModel.addListener('items_available', function(data) {
    confirmedBooking.model.setResources(data.data);
  });

  planningModel.addListener('month_changed', function(data) {
    confirmedBooking.model.getBookings(data.data.month, data.data.year);
  });

  planningModel.addListener('filter', function(data) {
    confirmedBooking.model.filterDayResourceBookings(data.data.resource,
                                  data.data.day,
                                  planningModel.month,
                                  data.data.bookings);
  });

  confirmedBooking.model.addListener('booking_assigned', function(data) {
    planningModel.reassignBooking(data.data.id,
                                  data.data.booking_resource_index,
                                  data.data.resource, 
                                  data.data.reassigned, 
                                  data.data.booking);
  });

  planningView.init();

});