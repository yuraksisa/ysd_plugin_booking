<%= partial('not_assigned_bookings.js'.to_sym) %>

require(['YSDSpreadSheet', 'YSDEventTarget', 'jquery', 'confirmedBooking'], 
        function(Spreadsheet, EventTarget, $, confirmedBooking) {

  planningModel = {

     bookingItems: [],            /** Array of booking_item' reference **/
     bookingItemsDetail: [],      /** Array of booking_item objects (reference + category) **/
     bookingItemsDescription: [], /** Array of resources description with link **/
     bookingItemsCategory: {},    /** Hash, the key is the category and the value an array
                                   of booking items of this category. Used to display the table of bookings **/
     bookings: [],                // Array of the bookings represented in the planning
     bookingsHash: {},            // Hash where the id is booking.id and the value the booking
     month:new Date().getMonth()+1,
     year:new Date().getFullYear(),
     events: new EventTarget(),

     addListener: function(type, listener) { /* addListener */
       this.events.addEventListener(type, listener); 
     },

     removeListener: function(type, listener) { /* removeListener */
       this.events.removeEventListener(type, listener);      
     },

     daysInMonth: function() {
       return new Date(this.year, this.month, 0).getDate();
     },

     prevMonth: function() {
       if (this.month == 1) {
         this.month = 12;
         this.year--;
       }
       else {
        this.month--;
       }
       planningView.update('month_navigation');
       this.events.fireEvent({type:'month_changed', data: {month: this.month, year: this.year}});
     },

     nextMonth: function() {
       if (this.month == 12) {
         this.month = 1;
         this.year++;
       }
       else {
         this.month++;
       }
       planningView.update('month_navigation');
       this.events.fireEvent({type:'month_changed', data: {month: this.month, year: this.year}});
     },

     reassignBooking: function(bookingId, bookingItemReference, isReassigned) {

       var booking = this.bookingsHash[bookingId];
       if (booking) {
          booking.booking_item_reference = bookingItemReference;
          planningView.update('booking_assigned', {booking: booking, isReassigned: isReassigned});
       }

     },

     loadBookingItems: function() { /* Load the booking items */

       $.ajax({
               type: 'GET',
               url : '/api/booking-items',
               contentType: 'application/json; charset=utf-8',
               dataType : 'json',
               success: function(data, textStatus, jqXHR) {
                  for (var idx=0; idx < data.length; idx++) {
                     if (!((data[idx].category_code) in planningModel.bookingItemsCategory)) {
                       planningModel.bookingItemsCategory[data[idx].category_code] = [];
                     }
                     planningModel.bookingItemsCategory[data[idx].category_code].push(data[idx].reference);
                  }
                  planningModel.bookingItems = data.map(function(value, index, array) {
                    return value.reference; 
                  });
                  planningModel.bookingItemsDetail = data.map(function(value, index, array) {
                    return {code: value.reference, category: value.category_code}; 
                  });                  
                  planningView.update('items_available');
                  planningModel.events.fireEvent({type:'items_available', data: planningModel.bookingItemsCategory});
              }
          });

     },

     loadBookings: function() { /* Load the bookings */

        $.ajax({
                 type: 'GET',
                 url: '/api/booking/planning?month=' + this.month + '&year=' + this.year,
                 contentType: 'application/json; charset=utf-8',
                 dataType: 'json',
                 success: function(data, textStatus, jqXHR) {
                   planningModel.bookings = data;
                   data.forEach(function(value, index, array) {
                      planningModel.bookingsHash[value.id] = value;
                   });
                   planningView.update('bookings_available');
                 }
        });


     }

  };

  planningController = {

    prevMonthClick: function() {
       planningModel.prevMonth();
    },

    nextMonthClick: function() {
       planningModel.nextMonth();
    } 

  };

  planningView = {

    spreadsheet : null,

    init : function() {
      planningModel.events.fireEvent({type:'month_changed', data: {month: planningModel.month, year: planningModel.year}});                  
      planningModel.loadBookingItems();
      $('#month').html(planningModel.month);
      $('#year').html(planningModel.year);
      $('#prev').bind('click', function() {
         planningController.prevMonthClick();
      });
      $('#next').bind('click', function() {
         planningController.nextMonthClick();
      });

    },

    update: function(event, data) {

      switch (event) {
         case 'month_navigation':
           $('#month').html(planningModel.month);
           $('#year').html(planningModel.year);     
           planningModel.loadBookings();     
           break;

         case 'items_available':
           this.buildSpreadsheet();
           planningModel.loadBookings();
           break;

         case 'bookings_available':
           this.loadBookings();
           break;

         case 'booking_assigned':
           if (data.isReassigned) {
             this.unloadBooking(data.booking);
             data.booking.planning.resource = data.booking.booking_item_reference;
           }
           this.loadBooking(data.booking);
           break;
      }

    },

    buildSpreadsheet: function() { // Builds the spreadsheet with the booking items

      var days = [];
      var total = planningModel.daysInMonth();
      for (var i=1;i<=total;i++) {
        days[i-1]=i;
      }

      planningModel.bookingItemsDescription = planningModel.bookingItemsDetail.map(function(value, index, array) {
             return '<a style="margin-right:20px; margin-left:20px" href="/admin/booking/scheduler/' + value.code +'?year=' + planningModel.year + '&month=' + (planningModel.month-1) +'" target="blank">'+ value.category + ' - ' + value.code+'</a>'
      });

      $('#planning_table').html('');
      spreadsheet = new Spreadsheet("planning_table",  
          planningModel.bookingItems,            // rows
          days,                                  // columns
          planningModel.bookingItems.length,     // number of rows (items.count)
          "Planning ",                           // 0-0 title
          "planning",                            // input prefix
          1,                                     // input size
          "centered_text",                       // class
          true,                                  // readonly
          planningModel.bookingItemsDescription);  // row description                               

    },

    loadBookings: function() { // Display the bookings and the spreadsheet

      this.buildSpreadsheet();

      var idx = 0;
      var reference;
      var from, to;
      $('.spread_input').val('');
      for (var i=0;i<planningModel.bookings.length;i++) {
         reference = planningModel.bookings[i].booking_item_reference;
         idx = planningModel.bookingItems.indexOf(reference);
         if (idx >= 0) {
           from = planningModel.bookings[i].date_from.getDate();
           if (planningModel.bookings[i].date_to.getMonth() != planningModel.bookings[i].date_from.getMonth()) {
             if (planningModel.bookings[i].date_from.getMonth()+1 == planningModel.month) {
               var d = new Date();
               d.setFullYear(planningModel.bookings[i].date_to.getYear(), planningModel.bookings[i].date_to.getMonth() + 1, 0);
               to = d.getDate();
             }
             else {
               from = 1;
               to = planningModel.bookings[i].date_to.getDate();
             }
           }
           else {
             to = Math.min(planningModel.bookings[i].date_to.getDate())
           }
           planningModel.bookings[i].planning = { resource: planningModel.bookings[i].booking_item_reference , from: from, to: to };
           this.loadBooking(planningModel.bookings[i]);   
         }
      }
    },

    loadBooking: function(booking) {

           for (var day=booking.planning.from;day<=booking.planning.to;day++) {
             var selector = '#\\[planning\\]\\['+booking.booking_item_reference+'\\]\\['+day+'\\]';
             var value = $(selector).val();
             if (value == '') {
               $(selector).val('X');
             }
             else if (value == 'X') {
               $(selector).val('2');
               $(selector).addClass('more_contrast_text');               
             }
             else {
               if (parseInt(value) != NaN) {
                 $(selector).val(parseInt(value)+1);
               }
             }
           }

    },

    unloadBooking: function(booking) {

           for (var day=booking.planning.from;day<=booking.planning.to;day++) {
             var selector = '#\\[planning\\]\\['+booking.planning.resource+'\\]\\['+day+'\\]';
             var value = $(selector).val();
             if (value == 'X') {
               $(selector).val('');
             }
             else if (value == '2') {
               $(selector).val('X');
               $(selector).removeClass('more_contrast_text');               
             }
             else {
               if (parseInt(value) != NaN) {
                 $(selector).val(parseInt(value)-1);
               }
             }
           }

    }



  };

  planningModel.addListener('items_available', function(data) {
    confirmedBooking.model.setResources(data.data);
  });

  planningModel.addListener('month_changed', function(data) {
    confirmedBooking.model.getBookings(data.data.month, data.data.year);
  });

  confirmedBooking.model.addListener('booking_assigned', function(data) {
    planningModel.reassignBooking(data.data.id, data.data.resource, data.data.reassigned);
  });

  planningView.init();

});