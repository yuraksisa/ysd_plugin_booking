require(['jquery', 'YSDEntityManagement','YSDRemoteDataSource', 'YSDSelectSelector', 
         'YSDForms', 'ysdtemplate', 'YSDGui', 'jquery.validate',
         'jquery.ui', 'jquery.ui.datepicker-es', 'jquery.ui.datepicker.validation',
         'jquery.formparams', 'jquery.ui.timepicker','autonumeric' ],
    function($, EntityManagement, RemoteDataSource, SelectSelector, YSDForms, tmpl,
         YSDGui) {

 
  function BookingHook() {

    this.stockCategory = {};
    this.stockIds = [];
    this.stockDetail = [];

    this.statusDescription = {
       'pending_confirmation' : '<%= t.booking_status.pending_confirmation%>',
       'confirmed' : '<%= t.booking_status.confirmed%>',
       'in_progress' : '<%= t.booking_status.in_progress%>',
       'done' : '<%= t.booking_status.done%>',
       'cancelled' : '<%= t.booking_status.cancelled%>'
    }
 	   
    this.paymentStatusDescription = {
       'none' : '<%= t.booking_payment_status.none%>',
       'deposit' : '<%= t.booking_payment_status.deposit%>',
       'total' : '<%= t.booking_payment_status.total%>',
       'refunded': '<%= t.booking_payment_status.refunded%>'
    }

    this.chargeStatusDescription = {
       'pending': '<%= t.charge_status.pending %>',
       'processing': '<%= t.charge_status.processing %>',
       'done': '<%= t.charge_status.done %>',
       'denied': '<%= t.charge_status.denied %>',
       'refunded': '<%= t.charge_status.refunded%>'
    };

    this.entityKey = function(entity) {
      return entity.id;
    }    
  	
    this.onRenderEntities = function(entities) {
      $('.elements-search').show(); 
      $('.new-entity-button').hide();
    }

    this.onProcessSearch = function() {
      <% if params[:search] %>
      $('input[name=search]').val('<%=params[:search]%>');
      <% end %>
    }

    this.onEdit = function(entity) {

       this.configForm(entity);
       
       $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );

       $('#driver_date_of_birth').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date()}, "<%=session[:locale] || 'es'%>" );
       $('#driver_date_of_birth').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_date_of_birth, 'dd/MM/yyyy')));

       $('#driver_document_id_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date()}, "<%=session[:locale] || 'es'%>" );
       $('#driver_document_id_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_document_id_date, 'dd/MM/yyyy')));

       $('#driver_document_id_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date().add(10).years()}, "<%=session[:locale] || 'es'%>" );
       $('#driver_document_id_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_document_id_expiration_date, 'dd/MM/yyyy')));

       $('#driver_driving_license_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date()}, "<%=session[:locale] || 'es'%>" );
       $('#driver_driving_license_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_driving_license_date, 'dd/MM/yyyy')));

       $('#driver_driving_license_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date().add(10).years()}, "<%=session[:locale] || 'es'%>" );
       $('#driver_driving_license_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_driving_license_expiration_date, 'dd/MM/yyyy')));

       $('#additional_driver_1_date_of_birth').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_1_date_of_birth').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_date_of_birth, 'dd/MM/yyyy')));

       $('#additional_driver_1_document_id_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_1_document_id_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_document_id_date, 'dd/MM/yyyy')));

       $('#additional_driver_1_document_id_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date().add(10).years()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_1_document_id_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_document_id_expiration_date, 'dd/MM/yyyy')));

       $('#additional_driver_1_driving_license_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_1_driving_license_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_driving_license_date, 'dd/MM/yyyy')));

       $('#additional_driver_1_driving_license_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date().add(10).years()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_1_driving_license_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_driving_license_expiration_date, 'dd/MM/yyyy')));

       $('#additional_driver_2_date_of_birth').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_2_date_of_birth').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_date_of_birth, 'dd/MM/yyyy')));

       $('#additional_driver_2_document_id_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_2_document_id_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_document_id_date, 'dd/MM/yyyy')));

       $('#additional_driver_2_document_id_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date().add(10).years()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_2_document_id_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_document_id_expiration_date, 'dd/MM/yyyy')));

       $('#additional_driver_2_driving_license_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_2_driving_license_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_driving_license_date, 'dd/MM/yyyy')));

       $('#additional_driver_2_driving_license_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date().add(10).years()}, "<%=session[:locale] || 'es'%>" );
       $('#additional_driver_2_driving_license_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_driving_license_expiration_date, 'dd/MM/yyyy')));

       // Configure resources combo 

       for (var lineIdx=0; lineIdx < entity.booking_lines.length; lineIdx++) { 
         for (var resourceIdx=0; resourceIdx < entity.booking_lines[lineIdx].booking_line_resources.length; resourceIdx++) { 
           var valueModel = entity.booking_lines[lineIdx].booking_line_resources[resourceIdx].booking_item_reference; 
           var dataSourceModel = new RemoteDataSource('/api/booking-items',{'id':'reference',
                                                      'description':'reference'});
           dataSourceModel.addListener('data_available', function(event){
             var exists = false;
             for (var idx=0;idx<event.data.length;idx++) {
                if (event.data['reference'] == valueModel) {
                  exists = true;
                  break;
                }
             }
             if (!exists) {
               event.data.push({'id':valueModel, 'description': valueModel});
             }
           });
           var selectorModel = new SelectSelector('booking_item_reference_'+entity.booking_lines[lineIdx].booking_line_resources[resourceIdx].id,
                                                  dataSourceModel, valueModel, true );
         }
       }

       // Improve height and weights (including current value if not in list)
       
       for (var lineIdx=0; lineIdx < entity.booking_lines.length; lineIdx++) { 
         for (var resourceIdx=0; resourceIdx < entity.booking_lines[lineIdx].booking_line_resources.length; resourceIdx++) { 
           var heightValue = entity.booking_lines[lineIdx].booking_line_resources[resourceIdx].customer_height;
           if (heightValue != null) {
             if ($('select[name=customer_height][data-lineindex='+lineIdx+'][data-resourceindex='+resourceIdx+'] option[value="'+heightValue+'""]').length == 0) {
               $('select[name=customer_height][data-lineindex='+lineIdx+'][data-resourceindex='+resourceIdx+']').append('<option value="'+heightValue+'" selected="selected">'+heightValue+'</option>');
             }
           }
           var weightValue = entity.booking_lines[lineIdx].booking_line_resources[resourceIdx].customer_weight;
           if (weightValue != null) {
             if ($('select[name=customer_weight][data-lineindex='+lineIdx+'][data-resourceindex='+resourceIdx+'] option[value="'+weightValue+'""]').length == 0) {
               $('select[name=customer_weight][data-lineindex='+lineIdx+'][data-resourceindex='+resourceIdx+']').append('<option value="'+weightValue+'" selected="selected">'+weightValue+'</option>');
             }           
           }
         }
       }

       // Validation

       $('form[name=real_pickup_return_form]').validate({

            submitHandler: function(form) 
            {
              return false;
            },   

            rules : {        
               'pickup_time': {
                 time24: true
               },
               'return_time': {
                 time24: true
               }
            },
            
            messages : {
               'pickup_time': {
                 time24: '<%=t.validations.time_format_invalid%>'
               },
               'return_time': {
                 time24: '<%=t.validations.time_format_invalid%>'
               }
            }

       });

              
       $.ajax({
               type: 'GET',
               url : '/api/bookings/linked/'+entity.id,
               contentType: 'application/json; charset=utf-8',
               dataType : 'json',
               success: function(data, textStatus, jqXHR) {
                 if (data.length > 1) {
                   $("#linked_bookings").html(tmpl('linked_bookings_script', {data: data, 'self':bookingManager.view}));
                   if ($('#link_booking').is(':visible')) {                 
                     $('#link_booking').hide();
                   }
                 }
                 else {
                   $('#linked_bookings').html('');
                 }
               }
              });       

       $('#link_booking').bind('click', function() {
           $('#main_booking_form').show();
           $('#link_booking').hide();
           $("#search_main_booking").autocomplete({
             source: "/api/bookings/main-search/"+entity.id,
             minLength: 1,
             select: function( event, ui ) {
               if (ui.item && ui.item.value) {
                 $('#main_booking_id').val(ui.item.value);
                 $('#display_selected_booking').html(ui.item.label);
                 $('#display_selected_booking_container').show();
                 $('#link_booking_bar').show();
               }
              }
           });
       });

      var self = this;
      $('.resource_user_name').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_surname').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_document_id').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });   
      $('.resource_user_phone').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });          
      $('.resource_user_email').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });       
      $('.customer_height').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.customer_weight').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_2_name').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_2_surname').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_2_document_id').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });   
      $('.resource_user_2_phone').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });          
      $('.resource_user_2_email').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });       
      $('.customer_2_height').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.customer_2_weight').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });      
      $('.booking_item_reference').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });

      $('#new_charge').bind('click', function(){
        $('#new_charge_button').unbind('click');
        $('#date').datetimepicker(
            {controlType: 'select', showTimezone: false, useLocalTimezone: true, 
             numberOfMonths:1, dateFormat: 'dd/mm/yy'},
            '<%= session[:locale] %>');
        $('#date').datetimepicker('setDate', new Date());
        $('#amount').autoNumeric('init',{aSep:''});
        $('#new_charge_button').bind('click', function(){
           var formdata = $('form[name="charge"]').formParams(true);
           var json_request = JSON.stringify(formdata);
           $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/booking/charge',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('<%=t.booking_management.charge_form.done%>');
                 $('form[name="charge"]').hide();
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error updating resource');
               }
           });
        });       
        if ($('form[name="charge"]').is(':visible')) {
          $('form[name="charge"]').hide();
        }
        else {
          $('form[name="charge"]').show();          
        }
      });

      $('#new_booking_line_button').bind('click', function() {
        self.prepareFormNewBookingLine(entity);
      });

      $('#new_booking_extra_button').bind('click', function() {
        self.prepareFormNewBookingExtra(entity);
      });

      $('.remove-booking-extra-id').bind('click', function() {
        var bookingExtraId = $(this).attr('data-id');
        $("<div title='" + '<%=t.booking_management.form.extra_removed.confirm_delete_title%>' + "'>" +
                           '<%=t.booking_management.form.extra_removed.confirm_delete_message%>' + "</div>").dialog( 
          { height: 250, modal: true,        
            buttons: {
                Ok: function() {
                      response = true;
                      $(this).dialog( "close" );
                },
                Cancel: function() {
                      response = false;  
                      $( this ).dialog( "close" );
                }
          },
          close : function(event, ui) {                   
            if (response) {
              $.ajax({
                type: 'DELETE',
                url : '/api/booking/booking-extra?id='+bookingExtraId,
                success: function(data, textStatus, jqXHR) {
                  bookingManager.model.synchronizeCurrentEntity(data);
                  bookingManager.model.change_state('entity_updated_successfully');
                  alert('<%=t.booking_management.form.extra_removed.done%>');
                  $('form[name="charge"]').hide();
                },
                error: function(data, textStatus, jqXHR) {
                  alert('<%=t.booking_management.form.extra_removed.error%>');
                }
              }); 
            }
          }
        }); 
      });

      $('.remove-booking-charges').bind('click', function() {
        var bookingId = $(this).attr('data-booking-id');
        var chargeId = $(this).attr('data-charge-id');
        $("<div title='" + '<%=t.booking_management.form.charge_removed.confirm_delete_title%>' + "'>" +
                           '<%=t.booking_management.form.charge_removed.confirm_delete_message%>' + "</div>").dialog( 
          { height: 250, modal: true,        
            buttons: {
                Ok: function() {
                      response = true;
                      $(this).dialog( "close" );
                },
                Cancel: function() {
                      response = false;  
                      $( this ).dialog( "close" );
                }
          },
          close : function(event, ui) {                   
            if (response) {
              $.ajax({
                type: 'DELETE',
                url : '/api/booking/booking-charge?booking_id='+bookingId+'&charge_id='+chargeId,
                success: function(data, textStatus, jqXHR) {
                  bookingManager.model.synchronizeCurrentEntity(data);
                  bookingManager.model.change_state('entity_updated_successfully');
                  alert('<%=t.booking_management.form.charge_removed.done%>');
                  $('form[name="charge"]').hide();
                },
                error: function(data, textStatus, jqXHR) {
                  alert('<%=t.booking_management.form.charge_removed.error%>');
                }
              }); 
            }
          }
        }); 
      });

      $('#booking_supplements_button').bind('click', function() {
        self.prepareFormBookingSupplements(entity);
      });

      $('.booking-line-item-id').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');
        var priceValue = $(this).attr('data-value-price');
        self.prepareFormEditBookingLineItemId(id, value, priceValue);
      });

      $('.booking-line-quantity').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');
        self.prepareFormEditBookingLineQuantity(id, value);
      });

      $('.booking-line-unit-cost').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');        
        self.prepareFormEditBookingLineItemUnitCost(id, value);
      });      

      $('.booking-line-deposit').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');        
        self.prepareFormEditBookingLineItemDeposit(id, value);
      });  

      $('.booking-extra-quantity').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');
        self.prepareFormEditBookingExtraQuantity(id, value);
      });

      $('.booking-extra-item-cost').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');        
        self.prepareFormEditBookingExtraItemCost(id, value);
      });      

      $('.booking_item_reference_detail').bind('click', function() {
        var form = $(this)[0].form;
        var lineIdx = $(form).attr('data-lineindex');
        var resourceIdx = $(form).attr('data-resourceindex');
        self.prepareFormEditBookingLineResource(lineIdx, resourceIdx);
      });

    }

    this.configForm = function(entity) {

      $('.delete-entity-button').hide();
      $("#content > div").hide(); // Initially hide all content
      $("#content_tabs li:first").attr("id","current"); // Activate first tab
      $("#content > div:first").fadeIn(); // Show first tab content
      $('#content_tabs a').click(function(e) {
        e.preventDefault();
        if ($(this).attr("name") == 'preview') {
          ($('#home_frame')[0]).contentWindow.location.reload();
        }
        if ($(this).closest("li").attr("id") == "current"){ //detection for current tab
         return;       
        }
        else{             
          $("#content > div").hide(); //Hide all content
          $("#content_tabs li").attr("id",""); //Reset id's
          $(this).parent().attr("id","current"); // Activate this
          $('#' + $(this).attr('name')).fadeIn(); // Show content for current tab
        }
      });

    }

    this.prepareFormNewBookingLine = function(entity) { /* Show the form to create a new booking line */

      var html = tmpl('new_booking_line_script', {entity: entity});
      $("#dialogs_container").html(html);

      var dataSourceModel = new RemoteDataSource('/api/booking-categories?all=yes',{'id':'code','description':'name'});
      var valueModel = null; 
      var selectorModel = new SelectSelector('new_booking_line_item_id',
                                             dataSourceModel, valueModel, true );

      $('#create_booking_line_button').unbind('click');
      $('#create_booking_line_button').bind('click', function(){

        var formdata = $('form[name="new_booking_line"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/booking/booking-line',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Nueva línea de producto añadida');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error creando línea de reserva: ' + data.responseText);
               }
           });

      });
      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }

    this.prepareFormBookingSupplements = function(entity) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_supplements_script', {entity: entity});
      $("#dialogs_container").html(html);
      $('#update_booking_supplements_button').unbind('click');
      $('#update_booking_supplements_button').bind('click', function(){

        var formdata = $('form[name="edit_booking_supplements"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/booking/booking-supplements',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Suplementos actualizados');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando suplementos: ' + data.responseText);
               }
           });

      });
      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }    

    this.prepareFormNewBookingExtra = function(entity) { /* Show the form to create a new booking line */

      var html = tmpl('new_booking_extra_script', {entity: entity});
      $("#dialogs_container").html(html);

      var dataSourceModel = new RemoteDataSource('/api/booking-extras?all=yes',{'id':'code','description':'name'});
      var valueModel = null; 
      var selectorModel = new SelectSelector('new_booking_extra_extra_id',
                                             dataSourceModel, valueModel, true);

      $('#create_booking_extra_button').unbind('click');
      $('#create_booking_extra_button').bind('click', function(){

        var formdata = $('form[name="new_booking_extra"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/booking/booking-extra',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Nuevo extra añadido');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error creando extra: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }

    this.prepareFormEditBookingLineItemId = function(booking_line_id, item_id, price) {

      var html = tmpl('edit_booking_line_item_id_script', {booking_line_id: booking_line_id, 
         item_id: item_id, price: price});
      $("#dialogs_container").html(html);
      
      var dataSourceModel = new RemoteDataSource('/api/booking-categories?all=yes',{'id':'code','description':'name'});
      var valueModel = item_id; 
      var selectorModel = new SelectSelector('edit_booking_line_item_id',
                                             dataSourceModel, valueModel, true );

      $('#edit_booking_line_item_id_button').unbind('click');
      $('#edit_booking_line_item_id_button').bind('click', function(){

        var formdata = $('form[name="update_booking_line_item_id"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-line/item-id',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Producto actualizado');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando producto: ' + data.responseText);
               }
           });

      });
      
      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    } 

    this.prepareFormEditBookingLineQuantity = function(booking_line_id, quantity) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_line_quantity_script', {booking_line_id: booking_line_id, quantity: quantity});
      $("#dialogs_container").html(html);
      
      $('#edit_booking_line_quantity_button').unbind('click');
      $('#edit_booking_line_quantity_button').bind('click', function(){

        var formdata = $('form[name="update_booking_line_quantity"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-line/quantity',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Cantidad actualizada');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando cantidad: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }


    this.prepareFormEditBookingLineItemUnitCost = function(booking_line_id, item_unit_cost) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_line_item_cost_script', {booking_line_id: booking_line_id, item_unit_cost: item_unit_cost});
      $("#dialogs_container").html(html);

      $('#edit_booking_item_cost_button').unbind('click');
      $('#edit_booking_item_cost_button').bind('click', function(){

        var formdata = $('form[name="update_booking_line_item_cost"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-line/item-cost',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Coste actualizado');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando coste: ' + data.responseText);
               }
           });

      });


      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }

    this.prepareFormEditBookingLineItemDeposit = function(booking_line_id, item_deposit) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_line_deposit_cost_script', {booking_line_id: booking_line_id, item_deposit: item_deposit});
      $("#dialogs_container").html(html);
    
      $('#edit_booking_item_deposit_button').unbind('click');
      $('#edit_booking_item_deposit_button').bind('click', function(){

        var formdata = $('form[name="update_booking_line_deposit_cost"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-line/deposit',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Fianza actualizada');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando fianza: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }

    this.prepareFormEditBookingExtraQuantity = function(booking_extra_id, quantity) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_extra_quantity_script', {booking_extra_id: booking_extra_id, quantity: quantity});
      $("#dialogs_container").html(html);
      
      $('#edit_booking_extra_quantity_button').unbind('click');
      $('#edit_booking_extra_quantity_button').bind('click', function(){

        var formdata = $('form[name="update_booking_extra_quantity"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-extra/quantity',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Cantidad de extra actualizada');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando cantidad del extra: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }


    this.prepareFormEditBookingExtraItemCost = function(booking_extra_id, extra_unit_cost) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_extra_item_cost_script', {booking_extra_id: booking_extra_id, extra_unit_cost: extra_unit_cost});
      $("#dialogs_container").html(html);
      
      $('#edit_booking_extra_cost_button').unbind('click');
      $('#edit_booking_extra_cost_button').bind('click', function(){

        var formdata = $('form[name="update_booking_extra_item_cost"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-extra/extra-cost',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Coste de extra actualizado');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando coste del extra: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }

    this.prepareFormEditBookingLineResource = function(lineIdx, resourceIdx) {

      var booking = this.manager.model.currentEntity();
      var bookingLineResource = booking.booking_lines[lineIdx].booking_line_resources[resourceIdx];

      var html = tmpl('booking_line_resource_detail_script', {entity: bookingLineResource});
      $("#dialogs_container").html(html);
      
      $('#update_booking_line_resource_button').unbind('click');
      $('#update_booking_line_resource_button').bind('click', function(){
        var formdata = $('form[name="update_booking_line_resource"]').formParams(true);
        var json_request = JSON.stringify(formdata);       
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking-line-resource',
               success: function(data, textStatus, jqXHR) {
                 for (attribute in formdata) {
                   booking.booking_lines[lineIdx].booking_line_resources[resourceIdx][attribute] = formdata[attribute];
                 }
                 alert('Datos actualizados');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));                 
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error updating resource');
               }
           });

      });



      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }

    this.updateLineResource = function(control) {

       var form = $(control.form)
       var formdata = form.formParams(true);
       var lineIdx = form.attr('data-lineindex');
       var resourceIdx = form.attr('data-resourceindex');
       var booking = this.manager.model.currentEntity();
       var json_request = JSON.stringify(formdata);

       $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking-line-resource',
               success: function(data, textStatus, jqXHR) {
                 for (attribute in formdata) {
                   booking.booking_lines[lineIdx].booking_line_resources[resourceIdx][attribute] = formdata[attribute];
                 }
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error updating resource');
               }
           });

    }

    this.statusClass = function(entity) {
      var className = null;
      switch (entity.status) {
        case 'pending_confirmation' :
          className = 'pending-status';
          break;
        case 'confirmed':
          className = 'confirmed-status';
          break;
        case 'in_progress':
          className = 'doing-status';
          break;
        case 'done':
          className = 'done-status';
          break;
        case 'cancelled':
          className = 'error-status';
          break;          
      }
      return className;
    }

    this.paymentStatusClass = function(entity) {
      var className = null;
      switch (entity.payment_status) {
        case 'none' :
          className = 'pending-status';
          break;
        case 'deposit':
          className = 'doing-status';
          break;
        case 'total':
          className = 'done-status';
          break;
        case 'refunded':
          className = 'error-status';
          break;          
      }
      return className; 
    }

    this.chargeStatusClass = function(entity) {
      var className = null;
      switch (entity.status) {
        case 'pending' :
          className = 'pending-status';
          break;
        case 'processing':
          className = 'doing-status';
          break; 
        case 'done':
          className = 'done-status';
          break;
        case 'denied':
          className = 'error-status';
          break;
        case 'refunded':
          className = 'error-status';
          break;          
      }
      return className;
    }    


  };
  
  var urls = { 
  	           query_url  : '/api/bookings',
  	           get_url : '/api/booking',
               update_url: '/api/booking'
             };
  
  var bookingHook = new BookingHook();
  var bookingManager = new EntityManagement(urls, 'bookings', <%=bookings_page_size%>, bookingHook, {prefix: '/admin/booking', hold_form_after_action:true});
 
 });
