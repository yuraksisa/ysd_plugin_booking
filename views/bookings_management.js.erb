require(['jquery', 'YSDEntityManagement','YSDRemoteDataSource', 'YSDSelectSelector', 
         'YSDForms', 'ysdtemplate', 'YSDGui', 'jquery.validate',
         'jquery.ui', 'jquery.ui.datepicker-es', 'jquery.ui.datepicker.validation',
         'jquery.formparams', 'jquery.ui.timepicker','autonumeric' ],
    function($, EntityManagement, RemoteDataSource, SelectSelector, YSDForms, tmpl,
         YSDGui) {

 
  function BookingHook() {

    this.stockCategory = {};
    this.stockIds = [];
    this.stockDetail = [];

    <% if @addon_sales_channels %>
    this.frontendPrefixes = {
        <% @booking_frontend_prefix_sales_channels.each do |k,v| %>
        '<%=k%>':'<%=v.nil? or v.empty? ? booking_front_end_prefix : v %>',
        <% end %>
    };
    <% end %>

    this.statusDescription = {
       'pending_confirmation' : '<span class="label label-warning"><%= t.booking_status.pending_confirmation%></span>',
       'confirmed' : '<span class="label label-success"><%= t.booking_status.confirmed%></span>',
       'in_progress' : '<span class="label label-info"><%= t.booking_status.in_progress%></span>',
       'done' : '<span class="label label-primary"><%= t.booking_status.done%></span>',
       'cancelled' : '<span class="label label-danger"><%= t.booking_status.cancelled%></span>'
    }
 	   
    this.paymentStatusDescription = {
       'none' : '<%= t.booking_payment_status.none%>',
       'deposit' : '<span class="label label-primary"><%= t.booking_payment_status.deposit%></span>',
       'total' : '<span class="label label-success"><%= t.booking_payment_status.total%></span>',
       'refunded': '<span class="label label-danger"><%= t.booking_payment_status.refunded%></span>'
    }

    this.chargeStatusDescription = {
       'pending': '<%= t.charge_status.pending %>',
       'processing': '<%= t.charge_status.processing %>',
       'done': '<%= t.charge_status.done %>',
       'denied': '<%= t.charge_status.denied %>',
       'refunded': '<%= t.charge_status.refunded%>'
    };

    this.nextExternalInvoiceNumber = function() {
        $.ajax({
            type: 'GET',
            url : '/api/bookings/next-external-invoice-number',
            contentType: 'application/json; charset=utf-8',
            dataType : 'json',
            success: function(data, textStatus, jqXHR) {
                $('#external_invoice_number').val(data);
            }
        });
    }

    this.entityKey = function(entity) {
      return entity.id;
    }    
  	
    this.onRenderEntities = function(entities) {
      $('.elements-search').show(); 
      $('.new-entity-button').remove();
    }

    this.onProcessSearch = function() {
      <% if params[:search] %>
      $('input[name=search]').val('<%=params[:search]%>');
      <% end %>
    }

    this.onEdit = function(entity) {

       this.configForm(entity);
       
       $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );

       $('#driver_date_of_birth').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.driver_date_of_birth != null) {
           $('#driver_date_of_birth').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_date_of_birth, 'dd/MM/yyyy')));
       }

       $('#driver_document_id_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.driver_document_id_date != null) {
           $('#driver_document_id_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_document_id_date, 'dd/MM/yyyy')));
       }

       $('#driver_document_id_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.driver_document_id_date != null) {
           $('#driver_document_id_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_document_id_expiration_date, 'dd/MM/yyyy')));
       }

       $('#driver_driving_license_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.driver_driving_license_date != null) {
           $('#driver_driving_license_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_driving_license_date, 'dd/MM/yyyy')));
       }

       $('#driver_driving_license_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.driver_driving_license_expiration_date != null) {
           $('#driver_driving_license_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_driving_license_expiration_date, 'dd/MM/yyyy')));
       }

       $('#additional_driver_1_date_of_birth').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_1_date_of_birth != null) {
            $('#additional_driver_1_date_of_birth').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_date_of_birth, 'dd/MM/yyyy')));
       }

       $('#additional_driver_1_document_id_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_1_document_id_date != null) {
           $('#additional_driver_1_document_id_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_document_id_date, 'dd/MM/yyyy')));
       }

       $('#additional_driver_1_document_id_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_1_document_id_expiration_date != null) {
           $('#additional_driver_1_document_id_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_document_id_expiration_date, 'dd/MM/yyyy')));
       }

       $('#additional_driver_1_driving_license_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_1_driving_license_date != null) {
           $('#additional_driver_1_driving_license_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_driving_license_date, 'dd/MM/yyyy')));
       }

       $('#additional_driver_1_driving_license_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_1_driving_license_expiration_date != null) {
            $('#additional_driver_1_driving_license_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_1_driving_license_expiration_date, 'dd/MM/yyyy')));
       }

       $('#additional_driver_2_date_of_birth').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_2_date_of_birth != null) {
           $('#additional_driver_2_date_of_birth').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_date_of_birth, 'dd/MM/yyyy')));
       }

       $('#additional_driver_2_document_id_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_2_document_id_date != null) {
           $('#additional_driver_2_document_id_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_document_id_date, 'dd/MM/yyyy')));
       }

       $('#additional_driver_2_document_id_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_2_document_id_expiration_date != null) {
          $('#additional_driver_2_document_id_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_document_id_expiration_date, 'dd/MM/yyyy')));
       }

       $('#additional_driver_2_driving_license_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_2_driving_license_date != null) {
          $('#additional_driver_2_driving_license_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_driving_license_date, 'dd/MM/yyyy')));
       }

       $('#additional_driver_2_driving_license_expiration_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.additional_driver_2_driving_license_expiration_date != null) {
          $('#additional_driver_2_driving_license_expiration_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.additional_driver_2_driving_license_expiration_date, 'dd/MM/yyyy')));
       }

       $('#external_invoice_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
       if (entity.external_invoice_date != null) {
          $('#external_invoice_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.external_invoice_date, 'dd/MM/yyyy')));
       }

        // Configure resources combo

       for (var lineIdx=0; lineIdx < entity.booking_lines.length; lineIdx++) { 
         for (var resourceIdx=0; resourceIdx < entity.booking_lines[lineIdx].booking_line_resources.length; resourceIdx++) { 
           var valueModel = entity.booking_lines[lineIdx].booking_line_resources[resourceIdx].booking_item_reference; 
           var dataSourceModel = new RemoteDataSource('/api/booking-items',{'id':'reference',
                                                      'description':'reference'});
           dataSourceModel.addListener('data_available', function(event){
             var exists = false;
             for (var idx=0;idx<event.data.length;idx++) {
                if (event.data['reference'] == valueModel) {
                  exists = true;
                  break;
                }
             }
             if (!exists) {
               event.data.push({'id':valueModel, 'description': valueModel});
             }
           });
           var selectorModel = new SelectSelector('booking_item_reference_'+entity.booking_lines[lineIdx].booking_line_resources[resourceIdx].id,
                                                  dataSourceModel, valueModel, true );
         }
       }

       // Improve height and weights (including current value if not in list)
       
       for (var lineIdx=0; lineIdx < entity.booking_lines.length; lineIdx++) { 
         for (var resourceIdx=0; resourceIdx < entity.booking_lines[lineIdx].booking_line_resources.length; resourceIdx++) { 
           var heightValue = entity.booking_lines[lineIdx].booking_line_resources[resourceIdx].customer_height;
           if (heightValue != null) {
             if ($('select[name=customer_height][data-lineindex='+lineIdx+'][data-resourceindex='+resourceIdx+'] option[value="'+heightValue+'"]').length == 0) {
               $('select[name=customer_height][data-lineindex='+lineIdx+'][data-resourceindex='+resourceIdx+']').append('<option value="'+heightValue+'" selected="selected">'+heightValue+'</option>');
             }
           }
           var weightValue = entity.booking_lines[lineIdx].booking_line_resources[resourceIdx].customer_weight;
           if (weightValue != null) {
             if ($('select[name=customer_weight][data-lineindex='+lineIdx+'][data-resourceindex='+resourceIdx+'] option[value="'+weightValue+'"]').length == 0) {
               $('select[name=customer_weight][data-lineindex='+lineIdx+'][data-resourceindex='+resourceIdx+']').append('<option value="'+weightValue+'" selected="selected">'+weightValue+'</option>');
             }           
           }
         }
       }

       // Validation

       this.configValidations();

              
       $.ajax({
               type: 'GET',
               url : '/api/bookings/linked/'+entity.id,
               contentType: 'application/json; charset=utf-8',
               dataType : 'json',
               success: function(data, textStatus, jqXHR) {
                 if (data.length > 1) {
                   $("#linked_bookings").html(tmpl('linked_bookings_script', {data: data, 'self':bookingManager.view}));
                   if ($('#link_booking').is(':visible')) {                 
                     $('#link_booking').hide();
                   }
                 }
                 else {
                   $('#linked_bookings').html('');
                 }
               }
              });       

       $('#link_booking').bind('click', function() {
           $('#main_booking_form').show();
           $('#link_booking').hide();
           $("#search_main_booking").autocomplete({
             source: "/api/bookings/main-search/"+entity.id,
             minLength: 1,
             select: function( event, ui ) {
               if (ui.item && ui.item.value) {
                 $('#main_booking_id').val(ui.item.value);
                 $('#display_selected_booking').html(ui.item.label);
                 $('#display_selected_booking_container').show();
                 $('#link_booking_bar').show();
               }
              }
           });
       });

      var self = this;
      $('.resource_user_name').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_surname').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_document_id').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });   
      $('.resource_user_phone').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });          
      $('.resource_user_email').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });       
      $('.customer_height').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.customer_weight').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_2_name').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_2_surname').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.resource_user_2_document_id').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });   
      $('.resource_user_2_phone').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });          
      $('.resource_user_2_email').bind('blur', function() {
        self.updateLineResource($(this)[0]);
      });       
      $('.customer_2_height').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });
      $('.customer_2_weight').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });      
      $('.booking_item_reference').bind('change', function() {
        self.updateLineResource($(this)[0]);
      });

      $('#new_charge').bind('click', function(){
        $('#new_charge_button').unbind('click');
        $('#date').datetimepicker(
            {controlType: 'select', showTimezone: false, useLocalTimezone: true, 
             numberOfMonths:1, dateFormat: 'dd/mm/yy'},
            '<%= session[:locale] %>');
        $('#date').datetimepicker('setDate', new Date());
        $('#amount').autoNumeric('init',{aSep:''});
        $('#new_charge_button').bind('click', function(){
           var formdata = $('form[name="charge"]').formParams(true);
           var json_request = JSON.stringify(formdata);
           $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/booking/charge',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('<%=t.booking_management.charge_form.done%>');
                 $('form[name="charge"]').hide();
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error updating resource');
               }
           });
        });       
        if ($('form[name="charge"]').is(':visible')) {
          $('form[name="charge"]').hide();
        }
        else {
          $('form[name="charge"]').show();          
        }
      });

      $('#new_booking_line_button').bind('click', function() {
        self.prepareFormNewBookingLine(entity);
      });

      $('#new_booking_extra_button').bind('click', function() {
        self.prepareFormNewBookingExtra(entity);
      });

      $('.remove-booking-extra-id').bind('click', function() {
        var bookingExtraId = $(this).attr('data-id');
        $("<div title='" + '<%=t.booking_management.form.extra_removed.confirm_delete_title%>' + "'>" +
                           '<%=t.booking_management.form.extra_removed.confirm_delete_message%>' + "</div>").dialog( 
          { height: 250, modal: true,        
            buttons: {
                Ok: function() {
                      response = true;
                      $(this).dialog( "close" );
                },
                Cancel: function() {
                      response = false;  
                      $( this ).dialog( "close" );
                }
          },
          close : function(event, ui) {                   
            if (response) {
              $.ajax({
                type: 'DELETE',
                url : '/api/booking/booking-extra?id='+bookingExtraId,
                success: function(data, textStatus, jqXHR) {
                  bookingManager.model.synchronizeCurrentEntity(data);
                  bookingManager.model.change_state('entity_updated_successfully');
                  alert('<%=t.booking_management.form.extra_removed.done%>');
                  $('form[name="charge"]').hide();
                },
                error: function(data, textStatus, jqXHR) {
                  alert('<%=t.booking_management.form.extra_removed.error%>');
                }
              }); 
            }
          }
        }); 
      });

      $('.remove-booking-charges').bind('click', function() {
        var bookingId = $(this).attr('data-booking-id');
        var chargeId = $(this).attr('data-charge-id');
        $("<div title='" + '<%=t.booking_management.form.charge_removed.confirm_delete_title%>' + "'>" +
                           '<%=t.booking_management.form.charge_removed.confirm_delete_message%>' + "</div>").dialog( 
          { height: 250, modal: true,        
            buttons: {
                Ok: function() {
                      response = true;
                      $(this).dialog( "close" );
                },
                Cancel: function() {
                      response = false;  
                      $( this ).dialog( "close" );
                }
          },
          close : function(event, ui) {                   
            if (response) {
              $.ajax({
                type: 'DELETE',
                url : '/api/booking/booking-charge?booking_id='+bookingId+'&charge_id='+chargeId,
                success: function(data, textStatus, jqXHR) {
                  bookingManager.model.synchronizeCurrentEntity(data);
                  bookingManager.model.change_state('entity_updated_successfully');
                  alert('<%=t.booking_management.form.charge_removed.done%>');
                  $('form[name="charge"]').hide();
                },
                error: function(data, textStatus, jqXHR) {
                  alert('<%=t.booking_management.form.charge_removed.error%>');
                }
              }); 
            }
          }
        }); 
      });

      $('#booking_supplements_button').bind('click', function() {
        self.prepareFormBookingSupplements(entity);
      });

      $('#booking_deposit_button').bind('click', function() {
         self.prepareFormBookingDeposit(entity);
      });

      $('#booking_driver_age_button').bind('click', function() {
         self.prepareFormEditDriverDateOfBirth(entity);
      });

      $('.booking-line-item-id').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');
        var priceValue = $(this).attr('data-value-price');
        self.prepareFormEditBookingLineItemId(id, value, priceValue);
      });

      $('.booking-line-quantity').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');
        self.prepareFormEditBookingLineQuantity(id, value);
      });

      $('.booking-line-unit-cost').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');        
        self.prepareFormEditBookingLineItemUnitCost(id, value);
      });      

      $('.booking-line-deposit').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');        
        self.prepareFormEditBookingLineItemDeposit(id, value);
      });  

      $('.booking-extra-quantity').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');
        self.prepareFormEditBookingExtraQuantity(id, value);
      });

      $('.booking-extra-item-cost').bind('click', function() {
        var id = $(this).attr('data-id');
        var value = $(this).attr('data-value');        
        self.prepareFormEditBookingExtraItemCost(id, value);
      });      

      $('.booking_item_reference_detail').bind('click', function() {
        var form = $(this)[0].form;
        var lineIdx = $(form).attr('data-lineindex');
        var resourceIdx = $(form).attr('data-resourceindex');
        self.prepareFormEditBookingLineResource(lineIdx, resourceIdx);
      });

      $('#next_external_invoice_number').bind('click', function(){
          self.nextExternalInvoiceNumber();
      })

      // Configure rental
      <% if multiple_rental_locations %>
      var dataSourceRentalLocation = new RemoteDataSource('/api/booking-rental-locations?all=yes',{'id':'code','description':'name'});
      var valueRentalLocation = entity.rental_location_code;
      var selectorRentalLocation = new SelectSelector('rental_location',
            dataSourceRentalLocation, valueRentalLocation, true );
      <% end %>

    }

    this.configForm = function(entity) {

      $('.delete-entity-button').hide();
      $("#content > div").hide(); // Initially hide all content
      $("#content_tabs li:first").attr("id","current"); // Activate first tab
      $("#content > div:first").fadeIn(); // Show first tab content
      $('#content_tabs a').click(function(e) {
        e.preventDefault();
        if ($(this).attr("name") == 'preview') {
          ($('#home_frame')[0]).contentWindow.location.reload();
        }
        if ($(this).closest("li").attr("id") == "current"){ //detection for current tab
         return;       
        }
        else{             
          $("#content > div").hide(); //Hide all content
          $("#content_tabs li").attr("id",""); //Reset id's
          $(this).parent().attr("id","current"); // Activate this
          $('#' + $(this).attr('name')).fadeIn(); // Show content for current tab
        }
      });

    }

    this.configValidations = function() {

        this.configCustomerValidation();
        this.configDriverValidation();
        this.configAdditionalDriverValidation();
        this.configRealPickupReturnValidation();

    }

    this.configCustomerValidation = function() {

        $('form[name=customer]').validate({

            submitHandler: function(form)
            {
                $('#customer_error_summary').html('');
                $('#customer_error_summary').hide();
                return false;
            },

            invalidHandler : function (form, validator) {
                $('#customer_error_summary').html('<%=t.booking_management.form.validations.customer_errors_summary%>');
                $('#customer_error_summary').show();
            },

            rules : {
                'customer_name': {
                    required: true
                },
                'customer_surname': {
                    required: true
                }
            },

            messages : {
                'customer_name': {
                    required: '<%=t.booking_management.form.validations.customer_name_required%>'
                },
                'customer_surname': {
                    required: '<%=t.booking_management.form.validations.customer_surname_required%>'
                }
            },

            errorPlacement : function(error, element) {

                if (element.attr('name') === 'customer_name' || element.attr('name') === 'customer_surname')  {
                    error.insertAfter('#customer_surname');
                }

                if (element.attr('name') === 'customer_phone') {
                    error.insertAfter('#customer_mobile_phone');
                }

                if (element.attr('name') === 'customer_email') {
                    error.insertAfter('#customer_email');
                }

            }

        });

    }

    this.configDriverValidation = function() {

        $('form[name=driver]').validate({

            submitHandler: function(form)
            {
                $('#driver_error_summary').html('');
                $('#driver_error_summary').hide();
                return false;
            },

            invalidHandler : function (form, validator) {
                $('#driver_error_summary').html('<%=t.booking_management.form.validations.driver_errors_summary%>');
                $('#driver_error_summary').show();
            },

            rules : {
                'driver_date_of_birth': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date().add(-18).years(),
                },
                'driver_driving_license_date': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date()
                },
                'driver_driving_license_expiration_date': {
                    validDate: true,
                    minDate: new Date()
                },
                'driver_document_id_date': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date(),
                },
                'driver_document_id_expiration_date': {
                    validDate: true,
                    minDate: new Date()
                }
            },

            messages : {
                'driver_date_of_birth': {
                    validDate: '<%=t.booking_management.form.validations.driver_date_of_birth_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.driver_date_of_birth_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.driver_date_of_birth_max((d=Date.today;Date.new(d.year-18,d.month,d.day)).strftime('%d-%m-%Y'))%>'
                },
                'driver_driving_license_date': {
                    validDate: '<%=t.booking_management.form.validations.driver_driving_license_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.driver_driving_license_date_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.driver_driving_license_date_max(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'driver_driving_license_expiration_date': {
                    validDate: '<%=t.booking_management.form.validations.driver_driving_license_expiration_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.driver_driving_license_expiration_date_min(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'driver_document_id_date': {
                    validDate: '<%=t.booking_management.form.validations.driver_document_id_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.driver_document_id_date_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.driver_document_id_date_max(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'driver_document_id_expiration_date': {
                    validDate: '<%=t.booking_management.form.validations.driver_document_id_expiration_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.driver_document_id_expiration_date_min(Date.today.strftime('%d-%m-%Y'))%>'
                }

            },

            errorPlacement : function(error, element) {

                if (element.attr('name') === 'driver_date_of_birth')  {
                    error.insertAfter('#driver_date_of_birth');
                }

                if (element.attr('name') === 'driver_driving_license_date')  {
                    error.insertAfter('#driver_driving_license_date');
                }

                if (element.attr('name') === 'driver_driving_license_expiration_date')  {
                    error.insertAfter('#driver_driving_license_expiration_date');
                }

                if (element.attr('name') === 'driver_document_id_date')  {
                    error.insertAfter('#driver_document_id_date');
                }

                if (element.attr('name') === 'driver_document_id_expiration_date')  {
                    error.insertAfter('#driver_document_id_expiration_date');
                }

            }

        });

    }

    this.configAdditionalDriverValidation = function() {

        $('form[name=additional_drivers]').validate({

            submitHandler: function(form)
            {
                $('#additional_drivers_error_summary').html('');
                $('#additional_drivers_error_summary').hide();
                return false;
            },

            invalidHandler : function (form, validator) {
                $('#additional_drivers_error_summary').html('<%=t.booking_management.form.validations.driver_errors_summary%>');
                $('#additional_drivers_error_summary').show();
            },

            rules : {
                'additional_driver_1_date_of_birth': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date().add(-18).years()
                },
                'additional_driver_1_driving_license_date': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date()
                },
                'additional_driver_1_driving_license_expiration_date': {
                    validDate: true,
                    minDate: new Date()
               },
                'additional_driver_1_document_id_date': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date(),
                },
                'additional_driver_1_document_id_expiration_date': {
                    validDate: true,
                    minDate: new Date()
                },
                'additional_driver_2_date_of_birth': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date().add(-18).years()
                },
                'additional_driver_2_driving_license_date': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date()
                },
                'additional_driver_2_driving_license_expiration_date': {
                    validDate: true,
                    minDate: new Date()
                },
                'additional_driver_2_document_id_date': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date(),
                },
                'additional_driver_2_document_id_expiration_date': {
                    validDate: true,
                    minDate: new Date()
                }
            },

            messages : {
                'additional_driver_1_date_of_birth': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_1_date_of_birth_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_1_date_of_birth_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.additional_driver_1_date_of_birth_max((d=Date.today;Date.new(d.year-18,d.month,d.day)).strftime('%d-%m-%Y'))%>'
                },
                'additional_driver_1_driving_license_date': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_1_driving_license_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_1_driving_license_date_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.additional_driver_1_driving_license_date_max(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'additional_driver_1_driving_license_expiration_date': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_1_driving_license_expiration_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_1_driving_license_expiration_date_min(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'additional_driver_1_document_id_date': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_1_document_id_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_1_document_id_date_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.additional_driver_1_document_id_date_max(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'additional_driver_1_document_id_expiration_date': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_1_document_id_expiration_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_1_document_id_expiration_date_min(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'additional_driver_2_date_of_birth': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_2_date_of_birth_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_2_date_of_birth_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.additional_driver_2_date_of_birth_max((d=Date.today;Date.new(d.year-18,d.month,d.day)).strftime('%d-%m-%Y'))%>'
                },
                'additional_driver_2_driving_license_date': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_2_driving_license_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_2_driving_license_date_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.additional_driver_2_driving_license_date_max(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'additional_driver_2_driving_license_expiration_date': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_2_driving_license_expiration_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_2_driving_license_expiration_date_min(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'additional_driver_2_document_id_date': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_2_document_id_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_2_document_id_date_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.additional_driver_2_document_id_date_max(Date.today.strftime('%d-%m-%Y'))%>'
                },
                'additional_driver_2_document_id_expiration_date': {
                    validDate: '<%=t.booking_management.form.validations.additional_driver_2_document_id_expiration_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.additional_driver_2_document_id_expiration_date_min(Date.today.strftime('%d-%m-%Y'))%>'
                }
            },

            errorPlacement : function(error, element) {

                if (element.attr('name') === 'additional_driver_1_date_of_birth')  {
                    error.insertAfter('#additional_driver_1_date_of_birth');
                }

                if (element.attr('name') === 'additional_driver_1_driving_license_date')  {
                    error.insertAfter('#additional_driver_1_driving_license_date');
                }

                if (element.attr('name') === 'additional_driver_1_driving_license_expiration_date')  {
                    error.insertAfter('#additional_driver_1_driving_license_expiration_date');
                }

                if (element.attr('name') === 'additional_driver_1_document_id_date')  {
                    error.insertAfter('#additional_driver_1_document_id_date');
                }

                if (element.attr('name') === 'additional_driver_1_document_id_expiration_date')  {
                    error.insertAfter('#additional_driver_1_document_id_expiration_date');
                }

                if (element.attr('name') === 'additional_driver_2_date_of_birth')  {
                    error.insertAfter('#additional_driver_2_date_of_birth');
                }

                if (element.attr('name') === 'additional_driver_2_driving_license_date')  {
                    error.insertAfter('#additional_driver_2_driving_license_date');
                }

                if (element.attr('name') === 'additional_driver_2_driving_license_expiration_date')  {
                    error.insertAfter('#additional_driver_2_driving_license_expiration_date');
                }

                if (element.attr('name') === 'additional_driver_2_document_id_date')  {
                    error.insertAfter('#additional_driver_2_document_id_date');
                }

                if (element.attr('name') === 'additional_driver_2_document_id_expiration_date')  {
                    error.insertAfter('#additional_driver_2_document_id_expiration_date');
                }

            }

        });

    }

    this.configRealPickupReturnValidation = function() {

        $('form[name=real_pickup_return_form]').validate({

            submitHandler: function(form)
            {
                return false;
            },

            rules : {
                'pickup_time': {
                    time24: true
                },
                'return_time': {
                    time24: true
                }
            },

            messages : {
                'pickup_time': {
                    time24: '<%=t.validations.time_format_invalid%>'
                },
                'return_time': {
                    time24: '<%=t.validations.time_format_invalid%>'
                }
            }

        });

    }


    this.prepareFormNewBookingLine = function(entity) { /* Show the form to create a new booking line */

      var html = tmpl('new_booking_line_script', {entity: entity});
      $("#dialogs_container").html(html);

      var dataSourceModel = new RemoteDataSource('/api/booking-categories?all=yes',{'id':'code','description':'name'});
      var valueModel = null; 
      var selectorModel = new SelectSelector('new_booking_line_item_id',
                                             dataSourceModel, valueModel, true );

      $('#create_booking_line_button').unbind('click');
      $('#create_booking_line_button').bind('click', function(){

        var formdata = $('form[name="new_booking_line"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/booking/booking-line',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Nueva línea de producto añadida');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error creando línea de reserva: ' + data.responseText);
               }
           });

      });
      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }

    this.prepareFormBookingSupplements = function(entity) { /* Show the form to edit deposit */

      var html = tmpl('edit_booking_supplements_script', {entity: entity});
      $("#dialogs_container").html(html);
      $('#update_booking_supplements_button').unbind('click');
      $('#update_booking_supplements_button').bind('click', function(){

        var formdata = $('form[name="edit_booking_supplements"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/booking/booking-supplements',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Suplementos actualizados');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando suplementos: ' + data.responseText);
               }
           });

      });
      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }    

    this.prepareFormBookingDeposit = function(entity) { /* Show the form to edit deposit */

        var html = tmpl('edit_booking_deposits_script', {entity: entity});
        $("#dialogs_container").html(html);
        $('#update_booking_deposit_button').unbind('click');
        $('#update_booking_deposit_button').bind('click', function(){

            var formdata = $('form[name="edit_booking_deposits"]').formParams(true);
            var json_request = JSON.stringify(formdata);
            $.ajax({
                type: 'POST',
                data : json_request,
                url : '/api/booking/booking-deposits',
                success: function(data, textStatus, jqXHR) {
                    bookingManager.model.synchronizeCurrentEntity(data);
                    bookingManager.model.change_state('entity_updated_successfully');
                    alert('Fianza actualizada');
                    YSDGui.hideElement(document.getElementById('dialogs_container'));
                },
                error: function(data, textStatus, jqXHR) {
                    alert('Error actualizando fianza: ' + data.responseText);
                }
            });

        });
        YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }

    this.prepareFormEditDriverDateOfBirth = function (entity) {

        var html = tmpl('booking_driver_age_of_birth_script', {entity: entity});
        $("#dialogs_container").html(html);

        $('#driver_date_of_birth').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
        if (entity.driver_date_of_birth != null) {
            $('#driver_date_of_birth').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_date_of_birth, 'dd/MM/yyyy')));
        }

        $('#driver_driving_license_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy', maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
        if (entity.driver_driving_license_date != null) {
            $('#driver_driving_license_date').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", bookingManager.view.formatDate(entity.driver_driving_license_date, 'dd/MM/yyyy')));
        }

        $('form[name="driver_dates_form"]').validate({

            submitHandler: function(form)
            {
                $('#driver_age_error_summary').html('');
                $('#driver_age_error_summary').hide();
                return false;
            },

            invalidHandler : function (form, validator) {
                $('#driver_age_error_summary').html('<%=t.booking_management.form.validations.driver_errors_summary%>');
                $('#driver_age_error_summary').show();
            },

            rules : {
                'driver_date_of_birth': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date().add(-18).years(),
                },
                'driver_driving_license_date': {
                    validDate: true,
                    minDate: new Date().add(-100).years(),
                    maxDate: new Date()
                }

            },

            messages : {
                'driver_date_of_birth': {
                    validDate: '<%=t.booking_management.form.validations.driver_date_of_birth_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.driver_date_of_birth_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.driver_date_of_birth_max((d=Date.today;Date.new(d.year-18,d.month,d.day)).strftime('%d-%m-%Y'))%>'
                },
                'driver_driving_license_date': {
                    validDate: '<%=t.booking_management.form.validations.driver_driving_license_date_invalid_date%>',
                    minDate: '<%=t.booking_management.form.validations.driver_driving_license_date_min((d=Date.today;Date.new(d.year-100,d.month,d.day)).strftime('%d-%m-%Y'))%>',
                    maxDate: '<%=t.booking_management.form.validations.driver_driving_license_date_max(Date.today.strftime('%d-%m-%Y'))%>'
                }
            },

            errorPlacement : function(error, element) {

                if (element.attr('name') === 'driver_date_of_birth')  {
                    error.insertAfter('#driver_date_of_birth');
                }

                if (element.attr('name') === 'driver_driving_license_date')  {
                    error.insertAfter('#driver_driving_license_date');
                }

            }

        });

        $('#update_driver_age_of_birth_button').unbind('click');
        $('#update_driver_age_of_birth_button').bind('click', function(){

            if ($('form[name="driver_dates_form"]').validate()) {
                var formdata = $('form[name="driver_dates_form"]').formParams(true);
                var json_request = JSON.stringify(formdata);
                $.ajax({
                    type: 'POST',
                    data: json_request,
                    url: '/api/booking/booking-driver-dates',
                    success: function (data, textStatus, jqXHR) {
                        bookingManager.model.synchronizeCurrentEntity(data);
                        bookingManager.model.change_state('entity_updated_successfully');
                        alert('Fechas del conductor actualizadas');
                        YSDGui.hideElement(document.getElementById('dialogs_container'));
                    },
                    error: function (data, textStatus, jqXHR) {
                        alert('Error actualizando fechas del conductor: ' + data.responseText);
                    }
                });
            }

        });
        YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }

    this.prepareFormNewBookingExtra = function(entity) { /* Show the form to create a new booking line */

      var html = tmpl('new_booking_extra_script', {entity: entity});
      $("#dialogs_container").html(html);

      var dataSourceModel = new RemoteDataSource('/api/booking-extras?all=yes',{'id':'code','description':'name'});
      var valueModel = null; 
      var selectorModel = new SelectSelector('new_booking_extra_extra_id',
                                             dataSourceModel, valueModel, true);

      $('#create_booking_extra_button').unbind('click');
      $('#create_booking_extra_button').bind('click', function(){

        var formdata = $('form[name="new_booking_extra"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/booking/booking-extra',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Nuevo extra añadido');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error creando extra: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }

    this.prepareFormEditBookingLineItemId = function(booking_line_id, item_id, price) {

      var html = tmpl('edit_booking_line_item_id_script', {booking_line_id: booking_line_id, 
         item_id: item_id, price: price});
      $("#dialogs_container").html(html);
      
      var dataSourceModel = new RemoteDataSource('/api/booking-categories?all=yes',{'id':'code','description':'name'});
      var valueModel = item_id; 
      var selectorModel = new SelectSelector('edit_booking_line_item_id',
                                             dataSourceModel, valueModel, true );

      $('#edit_booking_line_item_id_button').unbind('click');
      $('#edit_booking_line_item_id_button').bind('click', function(){

        var formdata = $('form[name="update_booking_line_item_id"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-line/item-id',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Producto actualizado');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando producto: ' + data.responseText);
               }
           });

      });
      
      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    } 

    this.prepareFormEditBookingLineQuantity = function(booking_line_id, quantity) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_line_quantity_script', {booking_line_id: booking_line_id, quantity: quantity});
      $("#dialogs_container").html(html);
      
      $('#edit_booking_line_quantity_button').unbind('click');
      $('#edit_booking_line_quantity_button').bind('click', function(){

        var formdata = $('form[name="update_booking_line_quantity"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-line/quantity',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Cantidad actualizada');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando cantidad: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }


    this.prepareFormEditBookingLineItemUnitCost = function(booking_line_id, item_unit_cost) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_line_item_cost_script', {booking_line_id: booking_line_id, item_unit_cost: item_unit_cost});
      $("#dialogs_container").html(html);

      $('#edit_booking_item_cost_button').unbind('click');
      $('#edit_booking_item_cost_button').bind('click', function(){

        var formdata = $('form[name="update_booking_line_item_cost"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-line/item-cost',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Coste actualizado');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando coste: ' + data.responseText);
               }
           });

      });


      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }

    this.prepareFormEditBookingLineItemDeposit = function(booking_line_id, item_deposit) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_line_deposit_cost_script', {booking_line_id: booking_line_id, item_deposit: item_deposit});
      $("#dialogs_container").html(html);
    
      $('#edit_booking_item_deposit_button').unbind('click');
      $('#edit_booking_item_deposit_button').bind('click', function(){

        var formdata = $('form[name="update_booking_line_deposit_cost"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-line/deposit',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Fianza actualizada');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando fianza: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }

    this.prepareFormEditBookingExtraQuantity = function(booking_extra_id, quantity) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_extra_quantity_script', {booking_extra_id: booking_extra_id, quantity: quantity});
      $("#dialogs_container").html(html);
      
      $('#edit_booking_extra_quantity_button').unbind('click');
      $('#edit_booking_extra_quantity_button').bind('click', function(){

        var formdata = $('form[name="update_booking_extra_quantity"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-extra/quantity',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Cantidad de extra actualizada');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando cantidad del extra: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }


    this.prepareFormEditBookingExtraItemCost = function(booking_extra_id, extra_unit_cost) { /* Show the form to create a new booking line */

      var html = tmpl('edit_booking_extra_item_cost_script', {booking_extra_id: booking_extra_id, extra_unit_cost: extra_unit_cost});
      $("#dialogs_container").html(html);
      
      $('#edit_booking_extra_cost_button').unbind('click');
      $('#edit_booking_extra_cost_button').bind('click', function(){

        var formdata = $('form[name="update_booking_extra_item_cost"]').formParams(true);
        var json_request = JSON.stringify(formdata);
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking/booking-extra/extra-cost',
               success: function(data, textStatus, jqXHR) {
                 bookingManager.model.synchronizeCurrentEntity(data);
                 bookingManager.model.change_state('entity_updated_successfully');
                 alert('Coste de extra actualizado');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error actualizando coste del extra: ' + data.responseText);
               }
           });

      });

      YSDGui.showElement(document.getElementById('dialogs_container'), true);
    }

    this.prepareFormEditBookingLineResource = function(lineIdx, resourceIdx) {

      var booking = this.manager.model.currentEntity();
      var bookingLineResource = booking.booking_lines[lineIdx].booking_line_resources[resourceIdx];

      var html = tmpl('booking_line_resource_detail_script', {entity: bookingLineResource});
      $("#dialogs_container").html(html);
      
      $('#update_booking_line_resource_button').unbind('click');
      $('#update_booking_line_resource_button').bind('click', function(){
        var formdata = $('form[name="update_booking_line_resource"]').formParams(true);
        var json_request = JSON.stringify(formdata);       
        $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking-line-resource',
               success: function(data, textStatus, jqXHR) {
                 for (attribute in formdata) {
                   booking.booking_lines[lineIdx].booking_line_resources[resourceIdx][attribute] = formdata[attribute];
                 }
                 alert('Datos actualizados');
                 YSDGui.hideElement(document.getElementById('dialogs_container'));                 
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error updating resource');
               }
           });

      });



      YSDGui.showElement(document.getElementById('dialogs_container'), true);

    }

    this.updateLineResource = function(control) {

       var form = $(control.form)
       var formdata = form.formParams(true);
       var lineIdx = form.attr('data-lineindex');
       var resourceIdx = form.attr('data-resourceindex');
       var booking = this.manager.model.currentEntity();
       var json_request = JSON.stringify(formdata);

       $.ajax({
               type: 'PUT',
               data : json_request,
               url : '/api/booking-line-resource',
               success: function(data, textStatus, jqXHR) {
                 for (attribute in formdata) {
                   booking.booking_lines[lineIdx].booking_line_resources[resourceIdx][attribute] = formdata[attribute];
                 }
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error updating resource');
               }
           });

    }

    this.statusClass = function(entity) {
      var className = null;
      switch (entity.status) {
        case 'pending_confirmation' :
          className = 'pending-status';
          break;
        case 'confirmed':
          className = 'confirmed-status';
          break;
        case 'in_progress':
          className = 'doing-status';
          break;
        case 'done':
          className = 'done-status';
          break;
        case 'cancelled':
          className = 'error-status';
          break;          
      }
      return className;
    }

    this.paymentStatusClass = function(entity) {
      var className = null;
      switch (entity.payment_status) {
        case 'none' :
          className = 'pending-status';
          break;
        case 'deposit':
          className = 'doing-status';
          break;
        case 'total':
          className = 'done-status';
          break;
        case 'refunded':
          className = 'error-status';
          break;          
      }
      return className; 
    }

    this.chargeStatusClass = function(entity) {
      var className = null;
      switch (entity.status) {
        case 'pending' :
          className = 'pending-status';
          break;
        case 'processing':
          className = 'doing-status';
          break; 
        case 'done':
          className = 'done-status';
          break;
        case 'denied':
          className = 'error-status';
          break;
        case 'refunded':
          className = 'error-status';
          break;          
      }
      return className;
    }    

    this.adaptFormData = function(data) {

        <% if booking_item_family.driver and driver_min_age_rules and !driver_min_age_edition %>
        delete data.driver_date_of_birth;
        delete data.driver_driving_license_date;
        <% end %>

        return data;

    }

  };
  
  var urls = { 
  	           query_url  : '/api/bookings',
  	           get_url : '/api/booking',
               update_url: '/api/booking'
             };
  
  var bookingHook = new BookingHook();
  var bookingManager = new EntityManagement(urls, 'bookings', <%=bookings_page_size%>, bookingHook, {prefix: '/admin/booking', hold_form_after_action:true});
 
 });
