  require(['jquery', 'YSDForms', 'YSDDateControl', 'ysdtemplate',
           'YSDListSelector', 'YSDRemoteDataSource', 'json2', 'jquery.validate', 
  	       'jquery.placeholder', 'jquery.ui', 'jquery.ui.datepicker-es', 
  	       'jquery.ui.datepicker.validation',
  	       'jquery.tools', 'jquery.formparams', 'datejs', 'autonumeric'], 
  	       function($, YSDForms, DateControl, tmpl,
  	       ListSelector, RemoteDataSource) {  
  
  bookingEditModel = {

        bookingId: <%= booking.id %>,
        calculator: null,
        products: null,
        availableResources: null,
        resources: null,
        bookingResources: null,
        fullAvailability: null,
        changesInAvailability: null,
        pendingReassign: null,
        extras: null,
        allowCustomPlaces : <%=pickup_return_places_configuration == 'list+custom'%>,

        <% if booking_item_family.pickup_return_place %>
          pickup_places : {
            <%  booking_pickup_return_places.each do |item| %>
               <% if item.is_pickup %>
              "<%=item.name%>" : "<%=item.name%>",
              <% end %>
            <% end %>
          },
          pickup_placesRates: {
              <%  booking_pickup_return_places.each do |item| %>
                <% if item.is_pickup %>
              "<%=item.name%>" : new Number('<%=item.price%>'),
                <% end %>
              <% end %>
          },
          return_places: {
              <%  booking_pickup_return_places.each do |item| %>
                <% if item.is_return %>
              "<%=item.name%>" : "<%=item.name%>",
                <% end %>
              <% end %>
          },
          return_placesRates: {
              <%  booking_pickup_return_places.each do |item| %>
                <% if item.is_return %>
              "<%=item.name%>" : new Number('<%=item.price%>'),
                <% end %>
              <% end %>
          },
          custom_pickup_return_place_price: new Number('<%=booking_custom_pickup_return_place_cost%>'),
        <% else %>
          pickup_places : {},
          pickup_placesRates: {},
          return_places: {},
          return_placesRates: {},
          custom_pickup_return_place_price: 0,
        <% end %>

        booking : {

          date_from: $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_from.strftime('%d/%m/%y')%>"),
          time_from: '<%=booking.time_from%>',
          date_to: $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_to.strftime('%d/%m/%y')%>"),
          time_to: '<%=booking.time_to%>',

          <% if booking_item_family.pickup_return_place %>
            pickup_place: "<%=booking.custom_pickup_place ? 'other' : (booking.pickup_place ? booking.pickup_place.gsub(/\R+/,"<br/>") : '')%>",
            custom_pickup_place: <%=booking.custom_pickup_place%>,
            pickup_place_other: "<%=booking.custom_pickup_place ? booking.pickup_place.gsub(/\R+/,"<br/>") : ''%>",
            return_place: "<%=booking.custom_return_place ? 'other' : (booking.return_place ? booking.return_place.gsub(/\R+/,"<br/>") : '')%>",
            custom_return_place: <%=booking.custom_return_place%>,
            return_place_other: "<%=booking.custom_return_place ? booking.return_place.gsub(/\R+/,"<br/>") : ''%>",
          <% else %>
            pickup_place: null,
            custom_pickup_place: null,
            pickup_place_other:null,
            return_place: null,
            custom_return_place: null,
            return_place_other: null,
          <% end %>

          days: <%=booking.days%>,
          date_to_price_calculation: $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_to_price_calculation.strftime('%d/%m/%y')%>"),
          item_cost: <%=booking.item_cost%>,
          extras_cost: <%=booking.extras_cost%>,
          time_from_cost: <%= booking.time_from_cost%>, 
          time_to_cost: <%= booking.time_to_cost%>,          
          pickup_place_cost: <%=booking.pickup_place_cost%>,
          return_place_cost: <%=booking.return_place_cost%>,
          product_deposit_cost: <%=booking.product_deposit_cost%>,           
          driver_date_of_birth: <%if !booking.driver_date_of_birth.nil? %>
                                $.datepicker.parseDate("dd/mm/yy", "<%= booking.driver_date_of_birth.strftime('%d/%m/%y')%>"),
                                <% else %>
                                null,
                                <% end %>
          driver_driving_license_date: <%if !booking.driver_driving_license_date.nil? %>
                                $.datepicker.parseDate("dd/mm/yy", "<%= booking.driver_driving_license_date.strftime('%d/%m/%y')%>"),
                                <% else %>
                                 null,
                                <% end %>
          number_of_adults: <%= booking.number_of_adults || 0 %> ,
          number_of_children: <%= booking.number_of_children || 0 %> ,
          sales_channel_code: <% if booking.sales_channel_code %>'<%= booking.sales_channel_code %>'<%else%>null<%end%>,
          promotion_code: <% if booking.promotion_code %>'<%=booking.promotion_code%>'<%else%>null<%end%>,
          booking_lines: [
            <% booking.booking_lines.each do |item| %>
              {'id':<%=item.id%>, 'item_id':'<%=item.item_id%>', 'item_description':'<%=item.item_description%>',
               'item_unit_cost':new Number('<%=item.item_unit_cost%>'), 'item_cost':new Number('<%=item.item_cost%>'),
               'product_deposit_unit_cost': new Number('<%=item.product_deposit_unit_cost%>'),
               'product_deposit_cost': new Number('<%=item.product_deposit_cost%>'),
               'quantity':new Number('<%=item.quantity%>')
              },      
            <% end %>                    
          ],
          booking_extras: [
            <% booking.booking_extras.each do |extra| %>
              {'id':<%=extra.id%>, 'extra_id':'<%=extra.extra_id%>', 'extra_description':'<%=extra.extra_description%>',
               'extra_unit_cost':new Number('<%=extra.extra_unit_cost%>'), 'extra_cost':new Number('<%=extra.extra_cost%>'),
               'quantity':new Number('<%=extra.quantity%>')
              },
            <% end %>
          ],
          booking_resources: [
              <% booking.booking_line_resources.each do |resource| %>
                <% unless resource.booking_item_reference.nil? %>
                {'reference' : '<%=resource.booking_item_reference%>',
                 'category'  : '<%=resource.booking_item_category%>'},
                <% end %>
              <% end %>
          ]

        },

     
        update: function() {

             var stock = $('select[name=stock_assignation]').val();

             var bookingRequest = $.extend({}, this.booking);

             <% if booking_item_family.pickup_return_place %>
               if (bookingRequest.pickup_place) {
                   bookingRequest.pickup_place = bookingRequest.pickup_place.replace('<br>', '\n');
               }
               if (bookingRequest.pickup_place_other) {
                   bookingRequest.pickup_place_other = bookingRequest.pickup_place_other.replace('<br>', '\n');
               }
               if (bookingRequest.return_place) {
                   bookingRequest.return_place = bookingRequest.return_place.replace('<br>', '\n');
               }
               if (bookingRequest.return_place_other) {
                   bookingRequest.return_place_other = bookingRequest.return_place_other.replace('<br>', '\n');
               }
             <% end %>

             var request = JSON.stringify(bookingRequest);
        	   var url = '/api/booking/<%=booking.id%>/pickup-return';
        	   if (stock && stock != '') {
        	     url += '?stock-assignation='+stock;
             }

             $.ajax( 
       	         {
       	           type : 'PUT',
       	           url : url,
       	           data : request,
                   dataType: 'json', 
                   contentType: 'application/json; charset=utf-8', /* Data type sent to the server */
       	                  	           
       	           success : function(data, textStatus, jqXHR) { /* RESPONSE OK */
       	           	 location.href="/admin/booking/bookings/<%=booking.id%>"
       	           },	
       	           
       	           error: function(jqXHR, textStatus, errorThrow){ /* RESPONSE ERROR */
       	           	 alert('Error'); 
       	           }
       	           
       	         });       
       	

        },

        calculatePrice : function(date_from, time_from, date_to, time_to, pickup_place, custom_pickup_place, pickup_place_other, return_place, custom_return_place, return_place_other) {

            var self = this;

            var request = JSON.stringify({date_from: date_from.toString("yyyy-MM-dd"),
                                          time_from: time_from,
                                          date_to: date_to.toString("yyyy-MM-dd"),
                                          time_to: time_to,
                                          pickup_place: pickup_place,
                                          custom_pickup_place: custom_pickup_place,
                                          pickup_place_other: pickup_place_other,
                                          return_place: return_place,
                                          custom_return_place: custom_return_place,
                                          return_place_other: pickup_place_other,
                                          date_of_birth: this.booking.driver_date_of_birth ? this.booking.driver_date_of_birth.toString("yyyy-MM-dd") : null,
                                          driver_driving_license_date: this.booking.driver_driving_license_date  ? this.booking.driver_driving_license_date.toString("yyyy-MM-dd") : null,
                                          sales_channel_code: this.booking.sales_channel_code ? this.booking.sales_channel_code : null,
                                          promotion_code: this.booking.promotion_code ? this.booking.promotion_code : null,
                                          resources: this.booking.booking_resources,
                                          id: this.bookingId});

            $.ajax(
                {
                    type : 'POST',
                    url :  '/api/booking/verify-reservation-pickup-return-changes',
                    data : request,
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8', /* Data type sent to the server */

                    success : function(data, textStatus, jqXHR) { /* RESPONSE OK */
                        // Update prices
                        self.calculator = data.calculator;
                        self.products = {};
                        self.availableResources = data.available_resources;
                        self.resources = data.resources;
                        self.bookingResources = data.booking_resources;
                        self.fullAvailability = data.full_availability;
                        self.changesInAvailability = data.changes_in_availability;
                        self.pendingReassign = data.pending_reassign;
                        for (var idx=0; idx<data.products.length; idx++) {
                           self.products[data.products[idx].code] = {price: new Number(data.products[idx].price),
                                                                     base_price :  new Number(data.products[idx].base_price),
                                                                     deposit:  new Number(data.products[idx].deposit),
                                                                     availableCount: data.products[idx].stock - data.products[idx].busy,
                                                                     isAvailable: data.products[idx].availability,
                                                                     resources: data.products[idx].resources};
                        }
                        self.extras = {};
                        for (var idx=0; idx<data.extras.length; idx++) {
                           self.extras[data.extras[idx].code] = {unit_price: new Number(data.extras[idx].unit_price),
                                                                 max_quantity: parseInt(data.extras[idx].max_quantity)};
                        }

                        if (self.calculator.valid) {

                            self.booking.date_from = new Date(Date.UTC(date_from.getFullYear(), date_from.getMonth(), date_from.getDate(), date_from.getHours(), date_from.getMinutes(), date_from.getSeconds()));
                            self.booking.time_from = time_from;

                            self.booking.date_to = new Date(Date.UTC(date_to.getFullYear(), date_to.getMonth(), date_to.getDate(), date_to.getHours(), date_to.getMinutes(), date_to.getSeconds()));;
                            self.booking.time_to = time_to;

                            self.booking.pickup_place = pickup_place;
                            self.booking.custom_pickup_place = custom_pickup_place;
                            self.booking.pickup_place_other = pickup_place_other;

                            self.booking.return_place = return_place;
                            self.booking.custom_return_place = custom_return_place;
                            self.booking.return_place_other = return_place_other;

                            self.booking.days = self.calculator.days;
                            self.booking.date_to_price_calculation = self.calculator.date_to_price_calculation;

                            self.booking.item_cost = 0;
                            self.booking.extras_cost = 0;

                            for (var i=0;i<self.booking.booking_lines.length;i++) {
                                self.booking.booking_lines[i].item_unit_cost = self.products[self.booking.booking_lines[i].item_id].price || 0;
                                self.booking.booking_lines[i].item_cost = self.booking.booking_lines[i].item_unit_cost * self.booking.booking_lines[i].quantity;
                                self.booking.item_cost += self.booking.booking_lines[i].item_cost;
                            }
                            for (var i=0;i<self.booking.booking_extras.length;i++) {
                                if (self.extras[self.booking.booking_extras[i].extra_id]) {
                                    self.booking.booking_extras[i].extra_unit_cost = self.extras[self.booking.booking_extras[i].extra_id].unit_price || 0;
                                    self.booking.booking_extras[i].extra_cost = self.booking.booking_extras[i].extra_unit_cost * self.booking.booking_extras[i].quantity;
                                }
                                else {
                                    self.booking.booking_extras[i].extra_unit_cost = 0;
                                    self.booking.booking_extras[i].extra_cost = 0;
                                }
                                self.booking.extras_cost += self.booking.booking_extras[i].extra_cost;
                            }

                            self.booking.time_from_cost = new Number(self.calculator.time_from_cost).valueOf();
                            self.booking.time_to_cost = new Number(self.calculator.time_to_cost).valueOf();
                            self.booking.pickup_place_cost = new Number(self.calculator.pickup_place_cost).valueOf();
                            self.booking.return_place_cost = new Number(self.calculator.return_place_cost).valueOf();

                            bookingEditView.showNewPrices();
                            $('#update_button').unbind('click');
                            $('#update_button').bind('click', function() {
                                if (confirm('¿Está seguro que desea realizar los cambios?')) {
                                    bookingEditController.updateButtonClick();
                                }
                            });

                            $('.price').autoNumeric('init',{aSep:''});
                            $('#situation_change').fadeIn();
                            $('#update_button').show();

                        }

                    },

                    error: function(jqXHR, textStatus, errorThrow){ /* RESPONSE ERROR */
                        alert('Error');
                    }

                });

       },  

       updateItemPrice: function(index, value) {
          var oldValue = this.booking.booking_lines[index].item_cost;
          this.booking.booking_lines[index].item_unit_cost = value;
          this.booking.booking_lines[index].item_cost = value * this.booking.booking_lines[index].quantity;

          this.booking.item_cost = this.booking.item_cost - oldValue + this.booking.booking_lines[index].item_cost;

          bookingEditView.showNewPrices();
       },

       updateExtraCost: function(index, value) {
          var oldValue = this.booking.booking_extras[index].extra_cost;
       	  this.booking.booking_extras[index].extra_unit_cost = value;
       	  this.booking.booking_extras[index].extra_cost = value * this.booking.booking_extras[index].quantity;

          this.booking.extras_cost = this.booking.extras_cost - oldValue + this.booking.booking_extras[index].extra_cost;

          bookingEditView.showNewPrices();       	
       }

  }

  bookingEditController = {

     recalculateButtonClick: function() {
       bookingEditModel.calculatePrice($('#date_from').datepicker("getDate"),
             $('#time_from').val(),
             $('#date_to').datepicker("getDate"),
             $('#time_to').val(),
             $('#pickup_place').val(),
             $('input[name=custom_pickup_place]').val(),
             $('#pickup_place_other').val(),
             $('#return_place').val(),
             $('input[name=custom_return_place]').val(),
             $('#return_place_other').val());
     },

     change_pickup_place_select : function(pickup_place) { /* change pickup place */
        
        if ($('#pickup_place :selected').val() == 'other' ) {
            $('input[name=custom_pickup_place]').val('true');
            $('#another_pickup_place_group').show();
            $('#pickup_place_other').focus();
        } 
        else
        {
            $('input[name=custom_pickup_place]').val('false');
            $('#another_pickup_place_group').hide();
        }

     },

     change_return_place_select : function(return_place) { /* change return place */
        
        if ($('#return_place :selected').val() == 'other'  ) {
            $('input[name=custom_return_place]').val('true');
            $('#another_return_place_group').show();
            $('#return_place_other').focus();
        } 
        else
        {
            $('input[name=custom_return_place]').val('false');
            $('#another_return_place_group').hide();
        }          

     },

     itemCostBlur: function(index, value) {  // item cost lost focus
          bookingEditModel.updateItemPrice(index, value);
     },

     extraCostBlur: function(index, value) { // extra cost lost focus
          bookingEditModel.updateExtraCost(index, value);
     },

     updateButtonClick: function() { // Update button click
          bookingEditModel.update();
     }


  }

  bookingEditView = {

    init : function() {

      $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );

      $('#date_from').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy'}, "<%=session[:locale] || 'es'%>" );
      $('#date_to').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy'}, "<%=session[:locale] || 'es'%>" );
      $('#date_from').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_from.strftime('%d/%m/%y')%>")); 
      $('#date_to').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_to.strftime('%d/%m/%y')%>"));

      $('#recalculate_button').bind('click', function() {
         if ($('form[name=reservation]').valid()) {
             bookingEditController.recalculateButtonClick();
         }
         else {
             alert('Por favor, revise los errores');
         }
      });

      $('#pickup_place').bind('change',
          function() {
             bookingEditController.change_pickup_place_select($('#pickup_place option:selected').val());
          });

      $('#return_place').bind('change',
          function() {
             bookingEditController.change_return_place_select($('#return_place option:selected').val());
          });


      // Add the new options
      var comboItems = document.getElementById('pickup_place');
      if (comboItems) {
        var selected = false;
        for (var pickup_place_id in bookingEditModel.pickup_places)
        {
          var optionItem = document.createElement('option');
          optionItem.setAttribute('value', pickup_place_id);	
          if (pickup_place_id == bookingEditModel.booking.pickup_place) {
            optionItem.setAttribute('selected', 'selected');
            selected = true;
          }
          var text = bookingEditModel.pickup_places[pickup_place_id];
          if (bookingEditModel.pickup_placesRates[pickup_place_id]>0) {
            text += " (" + bookingEditModel.pickup_placesRates[pickup_place_id] + "€)";
          }
          optionItem.text = optionItem.innerText = text;
          comboItems.appendChild(optionItem);
        }
        if (bookingEditModel.allowCustomPlaces) {
            var optionItem = document.createElement('option');
            optionItem.setAttribute('value', 'other');
            if (!selected) {
                optionItem.setAttribute('selected', 'selected');
                $('#other_pickup_place').show();
            }
            optionItem.text = optionItem.innerText = '<%=t.new_booking.other%>';
            if (this.custom_pickup_return_place_price > 0) {
                optionItem.text += " (" + this.custom_pickup_return_place_price + "€)";
            }
            comboItems.appendChild(optionItem);
        }
      }
      if (bookingEditModel.booking.custom_pickup_place) {
        $('#another_pickup_place_group').show();
        $('input[name=custom_pickup_place]').val('true');
      }

      // Add the new options
      comboItems = document.getElementById('return_place');
      if (comboItems) {
        var selected = false;
        for (var return_place_id in bookingEditModel.return_places)
        {
          var optionItem = document.createElement('option');
          optionItem.setAttribute('value', return_place_id);	
          if (return_place_id == bookingEditModel.booking.return_place) {
            optionItem.setAttribute('selected', 'selected');
            selected = true;
          }          
          var text = bookingEditModel.return_places[return_place_id];
          if (bookingEditModel.return_placesRates[return_place_id]>0) {
            text += " (" + bookingEditModel.return_placesRates[return_place_id] + "€)";
          } 
          optionItem.text = optionItem.innerText = text;
          comboItems.appendChild(optionItem);
        }

        if (bookingEditModel.allowCustomPlaces) {
            var optionItem = document.createElement('option');
            optionItem.setAttribute('value', 'other');
            if (!selected) {
                optionItem.setAttribute('selected', 'selected');
                $('#other_return_place').show();
            }
            optionItem.text = optionItem.innerText = '<%=t.new_booking.other%>';
            if (this.custom_pickup_return_place_price > 0) {
                optionItem.text += " (" + this.custom_pickup_return_place_price + "€)";
            }
            comboItems.appendChild(optionItem);
        }
      }
      if (bookingEditModel.booking.custom_return_place) {
          $('#another_return_place_group').show();
          $('input[name=custom_return_place]').val('true');
      }
      //
      bookingEditView.loadExtras();

      // Validation
      YSDForms.appendValidators();

      $('form[name=reservation]').validate({

          submitHandler: function(form)
          {
              return false;
          },

          rules : {
              'date_to': {
                  greaterOrEqualThan : '#date_from'
              },
              'time_from': {
                  time24: true
              },
              'time_to': {
                  time24: true
              }
          },

          messages : {
              'date_to': {
                  greaterOrEqualThan: '<%= BookingDataSystem.r18n.t.booking_business_literals.starting_date[booking_item_family.starting_date.to_s]["date_to_greater_than_validation"] %>'
              },
              'time_from': {
                  time24: '<%=t.validations.time_format_invalid%>'
              },
              'time_to': {
                  time24: '<%=t.validations.time_format_invalid%>'
              }
          }

      });

    },

    loadExtras: function() {
    	$('#extras').html(tmpl('script_current_situation', {booking: bookingEditModel.booking}));
    },

    showNewPrices: function() {

      $('#new_prices').html(tmpl('script_new_situation', {booking: bookingEditModel.booking, products: bookingEditModel.products,
                                                          resources: bookingEditModel.resources,
                                                          availableResources: bookingEditModel.availableResources,
                                                          fullAvailability: bookingEditModel.fullAvailability,
                                                          changesInAvailability: bookingEditModel.changesInAvailability,
                                                          pendingReassign: bookingEditModel.pendingReassign}));
      $('.extra-cost').bind('blur', function(event) {
           bookingEditController.extraCostBlur($(event.currentTarget).attr('rel'), $(event.currentTarget).val());
      }); 
    	$('.item-cost').bind('blur', function(event) {
    		bookingEditController.itemCostBlur($(event.currentTarget).attr('rel'), $(event.currentTarget).val());
    	});
    }

  }

  bookingEditView.init();

});