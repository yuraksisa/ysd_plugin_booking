  require(['jquery', 'YSDForms', 'YSDDateControl', 'ysdtemplate',
           'YSDListSelector', 'YSDRemoteDataSource', 'json2', 'jquery.validate', 
  	       'jquery.placeholder', 'jquery.ui', 'jquery.ui.datepicker-es', 
  	       'jquery.ui.datepicker.validation',
  	       'jquery.tools', 'jquery.formparams', 'datejs', 'autonumeric'], 
  	       function($, YSDForms, DateControl, tmpl,
  	       ListSelector, RemoteDataSource) {  
  
  bookingEditModel = {

        calculator: null,
        products: null,
        extras: null,

        pickup_places : {
          <%  booking_pickup_return_places.each do |item| %>
             <% if item.is_pickup %>
            '<%=item.name%>' : '<%=item.name%>',
            <% end %>
          <% end %>
        },
        pickup_placesRates: {
            <%  booking_pickup_return_places.each do |item| %>
              <% if item.is_pickup %>
                '<%=item.name%>' : new Number('<%=item.price%>'),
              <% end %>
            <% end %>
        },
        return_places: {
            <%  booking_pickup_return_places.each do |item| %>
              <% if item.is_return %>
                '<%=item.name%>' : '<%=item.name%>',
              <% end %>
            <% end %>
        },
        return_placesRates: {
            <%  booking_pickup_return_places.each do |item| %>
              <% if item.is_return %>
                '<%=item.name%>' : new Number('<%=item.price%>'),
              <% end %>
            <% end %>
        },
        custom_pickup_return_place_price: new Number('<%=booking_custom_pickup_return_place_cost%>'),

        booking : {

          date_from: $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_from.strftime('%d/%m/%y')%>"),
          time_from: '<%=booking.time_from%>',
          date_to: $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_to.strftime('%d/%m/%y')%>"),
          time_to: '<%=booking.time_to%>',
          pickup_place: '<%=booking.pickup_place ? booking.pickup_place.gsub("\n","<br/>") : ""%>',
          return_place: '<%=booking.return_place ? booking.return_place.gsub("\n","<br/>") : ""%>',
          days: <%=booking.days%>,
          date_to_price_calculation: $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_to_price_calculation.strftime('%d/%m/%y')%>"),
          item_cost: <%=booking.item_cost%>,
          extras_cost: <%=booking.extras_cost%>,
          time_from_cost: <%= booking.time_from_cost%>, 
          time_to_cost: <%= booking.time_to_cost%>,          
          pickup_place_cost: <%=booking.pickup_place_cost%>,
          return_place_cost: <%=booking.return_place_cost%>,
          product_deposit_cost: <%=booking.product_deposit_cost%>,           
          total_cost: <%=booking.total_cost%>,
          total_paid: <%=booking.total_paid%>,
          total_pending: <%=booking.total_pending%>,
          booking_amount: <%=booking.booking_amount%>,
          driver_date_of_birth: <%if !booking.driver_date_of_birth.nil? %> 
                                $.datepicker.parseDate("dd/mm/yy", "<%= booking.driver_date_of_birth.strftime('%d/%m/%y')%>"),
                                <% else %>
                                null,
                                <% end %>
          number_of_adults: <%= booking.number_of_adults || 0 %> ,
          number_of_children: <%= booking.number_of_children || 0 %> ,
          booking_lines: [
            <% booking.booking_lines.each do |item| %>
              {'id':<%=item.id%>, 'item_id':'<%=item.item_id%>', 'item_description':'<%=item.item_description%>',
               'item_unit_cost':new Number('<%=item.item_unit_cost%>'), 'item_cost':new Number('<%=item.item_cost%>'),
               'product_deposit_unit_cost': new Number('<%=item.product_deposit_unit_cost%>'),
               'product_deposit_cost': new Number('<%=item.product_deposit_cost%>'),
               'quantity':new Number('<%=item.quantity%>'')
              },      
            <% end %>                    
          ],
          booking_extras: [
            <% booking.booking_extras.each do |extra| %>
              {'id':<%=extra.id%>, 'extra_id':'<%=extra.extra_id%>', 'extra_description':'<%=extra.extra_description%>',
               'extra_unit_cost':new Number('<%=extra.extra_unit_cost%>'), 'extra_cost':new Number('<%=extra.extra_cost%>'),
               'quantity':new Number('<%=extra.quantity%>')
              },
            <% end %>
          ]

        },

     
        update: function() {

        	 var request = JSON.stringify(this.booking);

             $.ajax( 
       	         {
       	           type : 'PUT',
       	           url :  '/api/booking/<%=booking.id%>/price', 
       	           data : request,
                   dataType: 'json', 
                   contentType: 'application/json; charset=utf-8', /* Data type sent to the server */
       	                  	           
       	           success : function(data, textStatus, jqXHR) { /* RESPONSE OK */
       	           	 location.href="/admin/booking/bookings/<%=booking.id%>"
       	           },	
       	           
       	           error: function(jqXHR, textStatus, errorThrow){ /* RESPONSE ERROR */
       	           	 alert('Error'); 
       	           }
       	           
       	         });       
       	

        },

        calculatePrice : function(date_from, time_from, date_to, time_to, pickup_place, return_place) {

            var self = this;

            var request = JSON.stringify({date_from: date_from.toString("yyyy-MM-dd"),
                                          time_from: time_from,
                                          date_to: date_to.toString("yyyy-MM-dd"),
                                          time_to: time_to,
                                          pickup_place: pickup_place,
                                          return_place: return_place,
                                          date_of_birth: this.booking.driver_date_of_birth ? this.booking.driver_date_of_birth.toString("yyyy-MM-dd") : null});

            $.ajax(
                {
                    type : 'POST',
                    url :  '/api/booking/prices',
                    data : request,
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8', /* Data type sent to the server */

                    success : function(data, textStatus, jqXHR) { /* RESPONSE OK */
                        // Update prices
                        self.calculator = data.calculator;
                        self.products = {};
                        for (var idx=0; idx<data.products.length; idx++) {
                           self.products[data.products[idx].code] = {price: new Number(data.products[idx].price),
                                                                     base_price :  new Number(data.products[idx].base_price),
                                                                     deposit:  new Number(data.products[idx].deposit)};
                        }
                        self.extras = {};
                        for (var idx=0; idx<data.extras.length; idx++) {
                           self.extras[data.extras[idx].code] = {unit_price: new Number(data.extras[idx].unit_price),
                                                                 max_quantity: parseInt(data.extras[idx].max_quantity)};
                        }

                        if (self.calculator.valid) {

                            self.booking.date_from = new Date(Date.UTC(date_from.getFullYear(), date_from.getMonth(), date_from.getDate(), date_from.getHours(), date_from.getMinutes(), date_from.getSeconds()));
                            self.booking.time_from = time_from;

                            self.booking.date_to = new Date(Date.UTC(date_to.getFullYear(), date_to.getMonth(), date_to.getDate(), date_to.getHours(), date_to.getMinutes(), date_to.getSeconds()));;
                            self.booking.time_to = time_to;

                            self.booking.pickup_place = pickup_place;
                            self.booking.return_place = return_place;

                            self.booking.days = self.calculator.days;
                            self.booking.date_to_price_calculation = self.calculator.date_to_price_calculation;

                            self.booking.item_cost = 0;
                            self.booking.extras_cost = 0;

                            for (var i=0;i<self.booking.booking_lines.length;i++) {
                                self.booking.booking_lines[i].item_unit_cost = self.products[self.booking.booking_lines[i].item_id].price || 0;
                                self.booking.booking_lines[i].item_cost = self.booking.booking_lines[i].item_unit_cost * self.booking.booking_lines[i].quantity;
                                self.booking.item_cost += self.booking.booking_lines[i].item_cost;
                            }
                            for (var i=0;i<self.booking.booking_extras.length;i++) {
                                self.booking.booking_extras[i].extra_unit_cost = self.extras[self.booking.booking_extras[i].extra_id].price || 0;
                                self.booking.booking_extras[i].extra_cost = self.booking.booking_extras[i].extra_unit_cost * self.booking.booking_extras[i].quantity;
                                self.booking.extras_cost += self.booking.booking_extras[i].extra_cost;
                            }

                            self.booking.time_from_cost = new Number(self.calculator.time_from_cost);
                            self.booking.time_to_cost = new Number(self.calculator.time_to_cost);
                            self.booking.pickup_place_cost = new Number(self.calculator.pickup_place_cost);
                            self.booking.return_place_cost = new Number(self.calculator.return_place_cost);

                            self.updateTotal();

                            bookingEditView.showNewPrices();
                            $('.price').autoNumeric('init',{aSep:''});
                            $('#situation_change').fadeIn();
                            $('#update_button').show();

                        }

                    },

                    error: function(jqXHR, textStatus, errorThrow){ /* RESPONSE ERROR */
                        alert('Error');
                    }

                });

       },  

       updateItemPrice: function(index, value) {
          var oldValue = this.booking.booking_lines[index].item_cost;
          this.booking.booking_lines[index].item_unit_cost = value;
          this.booking.booking_lines[index].item_cost = value * this.booking.booking_lines[index].quantity;

          this.booking.item_cost = this.booking.item_cost - oldValue + this.booking.booking_lines[index].item_cost;

          this.updateTotal();

          bookingEditView.showNewPrices();
       },

       updateExtraCost: function(index, value) {
          var oldValue = this.booking.booking_extras[index].extra_cost;
       	  this.booking.booking_extras[index].extra_unit_cost = value;
       	  this.booking.booking_extras[index].extra_cost = value * this.booking.booking_extras[index].quantity;

          this.booking.extras_cost = this.booking.extras_cost - oldValue + this.booking.booking_extras[index].extra_cost;

          this.updateTotal();

          bookingEditView.showNewPrices();       	
       },

       updatePickupPlace: function(pickupPlace) {

          if (bookingEditModel.pickup_places[pickupPlace]) {
            this.booking.pickup_place_cost = bookingEditModel.pickup_placesRates[pickupPlace];
          }
          else {
            this.booking.pickup_place_cost = this.custom_pickup_return_place_price;
          }

          this.updateTotal();          

          this.booking.pickup_place = pickupPlace;
          bookingEditView.showNewPrices(); 
          $('#situation_change').fadeIn();
          $('#update_button').show();

       },

       updateReturnPlace: function(returnPlace) {

          if (this.return_places[returnPlace]) {
            this.booking.return_place_cost = this.return_placesRates[returnPlace];
          }
          else {
            this.booking.return_place_cost = this.custom_pickup_return_place_price;
          }

          this.updateTotal();

          this.booking.return_place = returnPlace;
          bookingEditView.showNewPrices(); 
          $('#situation_change').fadeIn();
          $('#update_button').show();
       
       },

       updateTotal : function() {

          this.booking.total_cost = this.booking.item_cost +
                                    this.booking.time_from_cost + 
                                    this.booking.time_to_cost +          
                                    this.booking.pickup_place_cost +
                                    this.booking.return_place_cost +
                                    this.booking.product_deposit_cost +
                                    this.booking.extras_cost;
          this.booking.total_pending = this.booking.total_cost - this.booking.total_paid;
          this.booking.booking_amount = new Number(this.booking.total_cost * <%=booking_deposit%> / 100).toFixed(0);

       }


  }

  bookingEditController = { 

     dateFromChanged: function() { // date from changed -> calculate price
       bookingEditModel.calculatePrice($('#date_from').datepicker("getDate"), 
                                       $('#time_from').val(),
                                       $('#date_to').datepicker("getDate"), 
                                       $('#time_to').val(),
                                       $('#pickup_place_value').val(),
                                       $('#return_place_value').val());
     },

     dateToChanged: function() { // date to changed -> calculate price
        bookingEditModel.calculatePrice($('#date_from').datepicker("getDate"), 
                                        $('#time_from').val(),
                                        $('#date_to').datepicker("getDate"), 
                                        $('#time_to').val(),
                                        $('#pickup_place_value').val(),
                                        $('#return_place_value').val());
     },

     change_pickup_place_select : function(pickup_place) { /* change pickup place */
        
        if ($('#pickup_place :selected').val() == '<%=t.new_booking.other%>' ) {
          $('#other_pickup_place').show();  
          $('#pickup_place_value').val('');
          $('#pickup_place_other').focus();
        } 
        else
        {
          $('#other_pickup_place').hide();
          $('#pickup_place_other').val(''); 
          $('#pickup_place_value').val(pickup_place);
        }

        bookingEditModel.updatePickupPlace($('#pickup_place_value').val());
        
     },
      
     blur_pickup_place_input : function(pickup_place) { /* Lost focus on the custom pickup place */
      
        if ($('#pickup_place_other').val() != $('#pickup_place_value').val()) {
          $('#pickup_place_value').val(pickup_place);
          bookingEditModel.updatePickupPlace(pickup_place);
        }
                
     },
     
     change_return_place_select : function(return_place) { /* change return place */
        
        if ($('#return_place :selected').val() == '<%=t.new_booking.other%>'  ) {
          $('#other_return_place').show();
          $('#return_place_value').val('');   
          $('#return_place_other').focus();
        } 
        else
        {
          $('#other_return_place').hide();
          $('#return_place_other').val(''); 
          $('#return_place_value').val(return_place);
        }          

        bookingEditModel.updateReturnPlace($('#return_place_value').val());

     },
      
     blur_return_place_input : function(return_place) { /* Lost focus on custom return place */
        
        if ($('#return_place_other').val() != $('return_place_value').val()) {
          $('return_place_value').val(return_place);
          bookingEditModel.updateReturnPlace(return_place);        
        }
        
     },

     itemCostBlur: function(index, value) {  // item cost lost focus
          bookingEditModel.updateItemPrice(index, value);
     },

     extraCostBlur: function(index, value) { // extra cost lost focus
          bookingEditModel.updateExtraCost(index, value);
     },

     updateButtonClick: function() { // Update button click
          bookingEditModel.update();
     }


  }

  bookingEditView = {

    init : function() {

      $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );

      $('#date_from').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy'}, "<%=session[:locale] || 'es'%>" );
      $('#date_to').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy'}, "<%=session[:locale] || 'es'%>" );
      $('#date_from').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_from.strftime('%d/%m/%y')%>")); 
      $('#date_to').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", "<%= booking.date_to.strftime('%d/%m/%y')%>"));

      $('#date_from').bind('change', function() {
         bookingEditController.dateFromChanged();
      });
      $('#time_from').bind('change', function(){
      	 bookingEditController.dateFromChanged();
      })
      $('#date_to').bind('change', function() {
         bookingEditController.dateToChanged();
      });
      $('#time_to').bind('change', function() {
      	 bookingEditController.dateToChanged();
      });
      $('#update_button').bind('click', function() {
         bookingEditController.updateButtonClick();
      });
      $('#pickup_place').bind('change',
          function() {
             bookingEditController.change_pickup_place_select($('#pickup_place option:selected').val());
          });
      $('#pickup_place_other').bind('blur',
          function() {
             bookingEditController.blur_pickup_place_input($(this).val());
          });
      $('#pickup_place_value').val('<%=booking.pickup_place ? booking.pickup_place.gsub("\n","<br/>") : "" %>');  
           
      $('#return_place').bind('change',
          function() {
             bookingEditController.change_return_place_select($('#return_place option:selected').val());
          });
      $('#return_place_other').bind('blur',
          function() {
            bookingEditController.blur_return_place_input($(this).val());
          });
      $('#return_place_value').val('<%=booking.return_place ? booking.return_place.gsub("\n","<br/>"): "" %>');  


      // Add the new options
      var comboItems = document.getElementById('pickup_place');
      if (comboItems) {
        var selected = false;
        for (var pickup_place_id in bookingEditModel.pickup_places)
        {
          var optionItem = document.createElement('option');
          optionItem.setAttribute('value', pickup_place_id);	
          if (pickup_place_id == bookingEditModel.booking.pickup_place) {
            optionItem.setAttribute('selected', 'selected');
            selected = true;
          }
          var text = bookingEditModel.pickup_places[pickup_place_id];
          if (bookingEditModel.pickup_placesRates[pickup_place_id]>0) {
            text += " (" + bookingEditModel.pickup_placesRates[pickup_place_id] + "€)";
          }
          optionItem.text = optionItem.innerText = text;
          comboItems.appendChild(optionItem);
        }
        <% if booking_allow_custom_pickup_return_place %>
        var optionItem = document.createElement('option');
        optionItem.setAttribute('value', '<%=t.new_booking.other%>');
        if (!selected) {
          optionItem.setAttribute('selected', 'selected');
          $('#other_pickup_place').show();
        }  
        optionItem.text = optionItem.innerText = '<%=t.new_booking.other%>';
        if (this.custom_pickup_return_place_price > 0) {
          optionItem.text += " (" + this.custom_pickup_return_place_price + "€)";
        } 
        comboItems.appendChild(optionItem);    
        <% end %>  
      }

      // Add the new options
      comboItems = document.getElementById('return_place');
      if (comboItems) {
        var selected = false;
        for (var return_place_id in bookingEditModel.return_places)
        {
          var optionItem = document.createElement('option');
          optionItem.setAttribute('value', return_place_id);	
          if (return_place_id == bookingEditModel.booking.return_place) {
            optionItem.setAttribute('selected', 'selected');
            selected = true;
          }          
          var text = bookingEditModel.return_places[return_place_id];
          if (bookingEditModel.return_placesRates[return_place_id]>0) {
            text += " (" + bookingEditModel.return_placesRates[return_place_id] + "€)";
          } 
          optionItem.text = optionItem.innerText = text;
          comboItems.appendChild(optionItem);
        }

        <% if booking_allow_custom_pickup_return_place %>
        var optionItem = document.createElement('option');
        optionItem.setAttribute('value', '<%=t.new_booking.other%>');  
        if (!selected) {
          optionItem.setAttribute('selected','selected');
          $('#other_return_place').show();
        }
        optionItem.text = optionItem.innerText = '<%=t.new_booking.other%>';
        if (this.custom_pickup_return_place_price > 0) {
          optionItem.text += " (" + this.custom_pickup_return_place_price + "€)";
        }
        comboItems.appendChild(optionItem);    
        <% end %>  
      }
      bookingEditView.loadExtras();
    },

    loadExtras: function() {
    	$('#extras').html(tmpl('script_extras', {booking: bookingEditModel.booking}));
    },

    showNewPrices: function() {

      $('#new_prices').html(tmpl('script_new_extras', {booking: bookingEditModel.booking}));
      $('.extra-cost').bind('blur', function(event) {
           bookingEditController.extraCostBlur($(event.currentTarget).attr('rel'), $(event.currentTarget).val());
      }); 
    	$('.item-cost').bind('blur', function(event) {
    		bookingEditController.itemCostBlur($(event.currentTarget).attr('rel'), $(event.currentTarget).val());
    	});
    }

  }

  bookingEditView.init();

});