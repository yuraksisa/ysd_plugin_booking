
require(["jquery", "YSDEntityManagement", "YSDEntityManagementComplementHooks",
         "YSDRemoteDataSource", "YSDSelectSelector", "jquery.ui", "autonumeric", "YSDjson2", "jquery.validate"],
         function($, EntityManagement, EntityManagementComplementHooks, RemoteDataSource, SelectSelector) {
    
  var bookingItemHook = {
     
    entity: null,
       
    entityKey : function(entity) {
      return entity.reference;
    },

    onNew : function() { /* On new stock item */
        this.entity = null;
        $('#reference').focus();
        $('#reference').bind('input', function(){
            $(this).val(function(_, v){
                //return v.replace(/\s+/g, '');
                return v.replace(/[^a-zA-Z0-9\-\_]/g,'');
            });
        });
        $('form[name=element]').validate({
            submitHandler: function(form)
            {
                return false;
            },
            rules: {
                reference: {
                    required: true,
                    remote: {
                        url: '/api/booking-item/check-not-exists',
                        type: 'post',
                        data: {
                            reference: function () {
                                return $('#reference').val();
                            }
                        }
                    }
                }
            },
            messages: {
                reference: {
                    required: '<%=t.booking_item_management.form.reference.required%>',
                    remote: '<%=t.booking_item_management.form.reference.exist%>'
                }
            },
            errorClass : 'text-danger'
        });
        this.configForm();
    },

    onEdit : function(entity) { /* On edit stock item */
      this.entity = entity;
      $('#reference').attr('readonly', true);
      $('#name').focus();
      $('form[name=change_reference_form]').validate({
          submitHandler: function(form)
          {
              return false;
          },
          rules: {
              new_reference: {
                  required: true,
                  remote: {
                      url: '/api/booking-item/check-not-exists',
                      type: 'post',
                      data: {
                          reference: function () {
                              return $('#new_reference').val();
                          }
                      }
                  }
              }
          },
          messages: {
              new_reference: {
                  required: '<%=t.booking_item_management.form.reference.required%>',
                  remote: '<%=t.booking_item_management.form.reference.exist%>'
              }
          },
          errorClass : 'text-danger'
      });

      this.configForm();

      $('#change_reference_button').bind('click', function(){
         if ($('form[name=change_reference_form]').valid()) {
             var request = {new_reference: $('input[name=new_reference]').val()};
             var requestJSON = JSON.stringify(request);
             $.ajax({
                 type: 'PUT',
                 url: '/api/booking-item/' + entity.reference + '/change',
                 data: requestJSON,
                 dataType: 'json',
                 success: function (data, textStatus, jqXHR) {
                     bookingItemManager.model.synchronizeCurrentEntity(data);
                     bookingItemManager.model.change_state('entity_updated_successfully');
                     alert('<%=t.booking_item_management.change_reference_form.reference_change_success%>');
                     $('#change_reference_container').modal('hide');
                 },
                 error: function (textStatus, jqXHR) {
                     alert('<%=t.booking_item_management.change_reference_form.reference_change_error%>');
                 }
             });
         }
         else {
             alert('<%=t.entitymanagement.errors_in_form%>');
         }
      });
      $('#change_reference_modal_button').bind('click', function(){
          $('input[name=new_reference]').val(entity.reference);
          $('input[name=new_reference]').unbind('input');
          $('input[name=new_reference]').bind('input', function(){
              $(this).val(function(_, v){
                  return v.replace(/[^a-zA-Z0-9\-\_]/g,'');
              });
          });
          $('#change_reference_container').modal('show');
      });

    },

    onRenderEntities: function() {

      $('.elements-search').show(); 
      
    },

        
    /* ------- Internal function --------- */

    configForm : function(entity) {

      $("#content > div").hide(); // Initially hide all content
      $("#content_tabs li:first").attr("id","current"); // Activate first tab
      $("#content > div:first").fadeIn(); // Show first tab content
      $('#content_tabs a').click(function(e) {
        e.preventDefault();
        if ($(this).attr("name") == 'preview') {
          ($('#home_frame')[0]).contentWindow.location.reload();
        }
        if ($(this).closest("li").attr("id") == "current"){ //detection for current tab
         return;       
        }
        else{             
          $("#content > div").hide(); //Hide all content
          $("#content_tabs li").attr("id",""); //Reset id's
          $(this).parent().attr("id","current"); // Activate this
          $('#' + $(this).attr('name')).fadeIn(); // Show content for current tab          
        }
      });

      $('#cost').autoNumeric('init',{aSep:''});

      var categoryDataSource = new RemoteDataSource('/api/booking-categories?all=true',{'id':'code','description':'name'});
      var categoryValue = (this.entity && this.entity.category_code)?this.entity.category_code:null;
      var categorySelector = new SelectSelector('category[code]', categoryDataSource, categoryValue);

    },
      
    adaptFormData : function(data) {
            
      if ($('#active').length > 0) {
        if ($('#active').prop('checked')) {
          data.active = true;
        }
        else {
          data.active = false;
        }
      }

      if ($('#own_property').length > 0) {
        if ($('#own_property').prop('checked')) {
          data.own_property = true;
        }
        else {
          data.own_property = false;
        }
      }

      if ($('#assignable').length > 0) {
        if ($('#assignable').prop('checked')) {
            data.assignable = true;
        }
        else {
            data.assignable = false;
        }
      }

      return data;  
      
    }

  };

  var urls = { query_url  : '/api/booking-items',
               create_url : '/api/booking-item',
               update_url : '/api/booking-item',
               delete_url : '/api/booking-item',
               get_url    : '/api/booking-item'
             };
  
  var hooks = [bookingItemHook];
  
  // Add the complement hooks
  hooks = hooks.concat(EntityManagementComplementHooks.complements);
                 
  var bookingItemManager = new EntityManagement(urls, 'booking_item', 20, hooks,
    {prefix: '/admin/booking',hold_form_after_action:true});

  
});