 
  <% if defined?booking_js %>
    <%= booking_js %>
  <% end %>

  require(['jquery', 'YSDForms', 'YSDDateControl', 'ysdtemplate',
           <% if defined?booking_js %>'booking_js'<% else %>'/js/booking.js'<%end%>, 
           'YSDListSelector', 'YSDMemoryDataSource','YSDRemoteDataSource',
           'YSDSelectSelector',  'YSDGui',
           'json2', 'jquery.validate', 
           'jquery.placeholder', 'jquery.ui', 'jquery.ui.datepicker-es', 
           'jquery.ui.datepicker.validation',
           'jquery.tools', 'jquery.formparams', 'datejs', 'https://www.googleadservices.com/pagead/conversion_async.js'], 
           function($, YSDForms, DateControl, tmpl, bookingDataSystem,  
           ListSelector, MemoryDataSource, RemoteDataSource, SelectSelector, YSDGui) {  

    /* It represents the wizard tabs */

    var WizardTab = function (element_id, visible) {
        
      this.element_id = element_id;
      this.state = null;
                              
      this.setState = function(new_state) { /* set the state (not-enabled, active, not-active) */ 
          
        this.state = new_state;
            
        switch (this.state) {
            
          case 'not-enabled':
            $('#' + this.element_id).removeClass('active not-active').addClass('not-enabled');
            break;
                
          case 'active':
            $('#' + this.element_id).removeClass('not-active not-enabled').addClass('active');
            break;
                
          case 'not-active':
            $('#' + this.element_id).removeClass('active not-enabled').addClass('not-active');
            break;
               
        }               
      
      };
          
      this.setVisible = function(visible) { /* setVisible */
        this.visible = visible; 
            
        if (this.visible) {
          $('#' + element_id).show();
        }
        else {
          $('#' + element_id).hide();
        }
            
        return this;
      }
        
      this.setVisible(visible);

    };
 

    /* ----------------------------------- */
    /* An object that represents the MODEL */
    /* ----------------------------------- */
        
    var bookingModel = {

       all_prices_base : [],
       all_prices : [],    /* Caches all models prices for the period */
       discount : {
          value: <%= offer_discount.nil? ? 0 : "%.2f" % offer_discount.value %>,
          type: '<%= offer_discount.nil? ? 'percentage' : offer_discount.discount_type %>'
       },
       exceeded_hours : bookingDataSystem.gracePeriod || 2, /* Used when calculating prices. When exceeded it's considered one more day */
       pickup_places : bookingDataSystem.pickup_places,
       allow_custom_pickup_place : bookingDataSystem.allow_custom_pickup_place,
       return_places : bookingDataSystem.return_places,
       allow_custom_return_place : bookingDataSystem.allow_custom_pickup_place,
       process_states : [ 
         'item_selection', 
         'checking_availability',
         'availability_checked',
         'extras_selection',
         'completing_booking', 
         'pay_booking', 
         'continue_booking', 
         'sending_booking', 
         'process_finished', 
         'process_error' ],
       process_state : 'item_selection',
       categoriesAvailable: [],
       stock: {},
       categoriesPaymentEnabled: [],
       confirmBookingResponse : null, /* It holds the confirm booking response */
       pendingTimeToStartBooking: 0,
       last_hash: null, /* Hold the last location.href.hash value */       
       
       booking : {

          date_from : null, /* the booking date from */
          time_from : null, /* the booking time from */
          date_to : null, /* the booking date to */
          time_to: null, /* the booking time to */
          pickup_place: null, /* the pick up place */
          return_place: null, /* the return place */
          date_to_price_calculation : null, /* the date to used when calculating prices */
          days: 0, /* renting days */
          quantity: 1, /* Number of products */
          item_id : null, /* the booking item */
          item_description: null, /* the booking item description */
          optional: null, /* the booking optional */
          item_cost : 0, /* the item cost */
          extras_cost : 0, /* the extras cost */
          time_from_cost: 0, /* time from cost */
          time_to_cost: 0, /* time to cost */
          pickup_place_cost: 0, /* pickup place cost */
          return_place_cost: 0, /* return place cost */
          product_deposit_cost:0, /* product deposit cost */
          total_cost : 0, /* the total cost (item + extras) */
          booking_extras : {}, /* The booking extras */
          booking_lines: {}, /* the booking detail */
          booking_amount: 0, /* The amount to pay to confirm the booking */
          pay_now: false, /* The user will pay  */
          promotion_code: null, /* The promotion code */
          
          add_booking_line : function(item_id, quantity) { /** Adds a new item **/

            this.booking_lines[item_id] = new this.BookingLine(item_id, quantity);
            this.addItemCost(this.booking_lines[item_id].item_cost);
            this.addProductDepositCost(this.booking_lines[item_id].product_deposit_cost);
            bookingView.update_information('booking_lines');

          },

          remove_booking_lines: function() {

            for (item in this.booking_lines) {
               this.remove_booking_line(item);
            }

          },

          remove_booking_line: function(item_id) { /** Remove an item **/

            var oldCost = this.booking_lines[item_id].item_cost;
            var oldProductDepositCost = this.booking_lines[item_id].product_deposit_cost;
            delete this.booking_lines[item_id];
            this.addItemCost(-oldCost);
            this.addItemCost(-oldProductDepositCost); 
            bookingView.update_information('booking_lines');

          },

          change_booking_line_quantity: function(item_id, new_quantity) { /** Change item quantity **/

            if (this.booking_lines[item_id] == null && new_quantity > 0) {
               this.add_booking_line(item_id, new_quantity);
            }
            else 
              if (this.booking_lines[item_id] != null) {            
                if (new_quantity == 0) {
                  this.remove_booking_line(item_id);
                }
                else {
                  this.booking_lines[item_id].set_quantity(new_quantity);
                  bookingView.update_information('booking_lines');
                }
              }

          },
                     
          booking_lines_as_array : function() { /** Get the booking lines as array **/

            var result = [];
            for (line in this.booking_lines) {
              result.push(this.booking_lines[line]);
            }
            return result;

          },

          add_extra : function (extra_id, quantity) { /* Adds an extra to the booking */
                        
            this.booking_extras[extra_id] = new this.BookingExtra(extra_id, quantity);
            this.addExtraCost (this.booking_extras[extra_id].extra_cost);       
            bookingView.update_information('booking_extras');
                          
          },
     
          remove_extra : function (extra_id) { /* Remove an extra from the booking */
            
            var oldCost = this.booking_extras[extra_id].extra_cost;
            delete this.booking_extras [extra_id]; 
            this.addExtraCost (-oldCost);  
            bookingView.update_information('booking_extras');
            
          },
          
          change_extra_quantity : function (extra_id, new_quantity) { /* Updates an extra quantity */
                        
              if ( this.booking_extras[extra_id] == null && new_quantity > 0)
              {
                 this.add_extra(extra_id, new_quantity);
              }
              else 
                if (this.booking_extras[extra_id] != null) {            
                  if (new_quantity == 0) {
                   this.remove_extra(extra_id);
                  }
                  else {
                    this.booking_extras[extra_id].set_quantity(new_quantity);
                    bookingView.update_information('booking_extras');
                  }
              }
                          
          },

          recalcPrice: function() {

            this.item_cost = 0;
            this.total_cost = 0;
            this.product_deposit_cost = 0;
            for (family in bookingModel.all_prices) {
              if (this.booking_lines[family]) {
                this.booking_lines[family].set_item_unit_cost_base(bookingModel.all_prices_base[family]);
                this.booking_lines[family].set_item_unit_cost(bookingModel.all_prices[family]);
                this.item_cost += this.booking_lines[family].item_cost;
                this.product_deposit_cost += this.booking_lines[family].product_deposit_cost;
              }
            }
            this.time_from_cost = bookingDataSystem.calculate_pickup_time_price(this.date_from, this.time_from);
            this.time_to_cost = bookingDataSystem.calculate_return_time_price(this.date_to, this.time_to);
            this.total_cost = this.time_from_cost + this.time_to_cost +
                              this.pickup_place_cost + this.return_place_cost +
                              this.item_cost + this.extras_cost + this.product_deposit_cost;
            this.booking_amount = new Number(this.total_cost * 
              <%=booking_deposit%> / 100).toFixed(0).valueOf();
            bookingView.update_information('booking_cost');

          },


          addItemCost: function(value) { /** Add item cost */
            this.item_cost += value;
            this.addCost(value);
          },

          addProductDepositCost: function(value) { /** Add item deposit cost */
            this.product_deposit_cost += value;
            this.addCost(value);
          },

          addExtraCost : function (value) { /* Add extra cost */
            this.extras_cost += value;
            this.addCost(value);
          },
   
          addCost : function (value) { /* Add cost */
             this.total_cost += value;
             this.total_cost = new Number(this.total_cost.toFixed(bookingDataSystem.configuration.roundDecimals || 0)).valueOf();
             this.booking_amount = new Number(this.total_cost * 
              <%=booking_deposit%> / 100).toFixed(0).valueOf();
          },   

          apply_promotion_code: function(promotion_code, value, discount_type) {
             if (this.promotion_code == null) {
               for (family in bookingModel.all_prices) {                 
                 if (value > 0) {
                   if (discount_type == 'percentage') {
                     bookingModel.all_prices[family] = bookingModel.all_prices[family] * (100 - value) / 100;
                   }
                   else {
                     bookingModel.all_prices[family] = bookingModel.all_prices[family] - value;
                   }
                 }
               }
               this.promotion_code = promotion_code;
               this.recalcPrice();
               $('#promotion_code').prop('readOnly', true);
               $('#promotion_code_submit').prop('disabled', true);
               bookingView.promotionCodeApplied();
             }
          },

          BookingLine : function(item_id, quantity) {

             this.item_id = item_id;
             this.item_description = bookingDataSystem.families[item_id].description;
             this.quantity = quantity;
             this.item_unit_cost =  bookingModel.all_prices[item_id];
             this.item_unit_cost_base = bookingModel.all_prices_base[item_id];
             this.item_cost = this.quantity * this.item_unit_cost;
             this.product_deposit_unit_cost = bookingDataSystem.families[item_id].deposit;
             this.product_deposit_cost = this.product_deposit_unit_cost * this.quantity;
             this.resources = [];

             this.set_quantity = function(new_quantity) {
               this.quantity = new_quantity;
               var old_item_cost = this.item_cost;
               var old_product_deposit_cost = this.product_deposit_cost;
               this.item_cost = new_quantity * this.item_unit_cost;
               this.product_deposit_cost = new_quantity * this.product_deposit_unit_cost;
               bookingModel.booking.addItemCost(this.item_cost - old_item_cost);
               bookingModel.booking.addProductDepositCost(this.product_deposit_cost - old_product_deposit_cost);
             }

             this.set_item_unit_cost_base = function(value) {
                this.unit_cost_base = value;
             }

             this.set_item_unit_cost = function(value) {
                this.item_unit_cost = value;
                this.item_cost = this.quantity * this.item_unit_cost;
             }

             this.set_item_product_deposit_unit_cost = function(value) {
              this.product_deposit_unit_cost = value;
              this.product_deposit_cost = this.quantity * this.product_deposit_unit_cost;
             }

          },

          BookingExtra : function (extra_id, quantity) {
     
             this.extra_id = extra_id;
             this.quantity = quantity;
             this.extra_description = bookingDataSystem.extras[extra_id].the_name;
             this.extra_unit_cost = bookingDataSystem.calculate_extra_price(bookingModel.booking.date_from, 
              bookingModel.booking.date_to_price_calculation, this.extra_id, bookingModel.booking.item_id);
             this.extra_cost = this.quantity * this.extra_unit_cost;
             this.data = bookingDataSystem.extras[extra_id];
 
             this.set_quantity = function (new_quantity) {
      
               this.quantity = new_quantity;
               var old_extra_cost = this.extra_cost;
               this.extra_cost = new_quantity * this.extra_unit_cost;         
               bookingModel.booking.addExtraCost (this.extra_cost - old_extra_cost);  

             }
 
          }
       
       },
             
       getUrlVars : function() {
          var vars = [], hash;
          var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
          for(var i = 0; i < hashes.length; i++)
          {
             hash = hashes[i].split('=');
             vars.push(hash[0]);
             vars[hash[0]] = hash[1];
          }
          return vars;
       },

       set_hash: function(newHash) { 
         
         if (newHash != '#'+this.get_hash()) {
           window.location.hash = newHash;
         }
         this.last_hash = newHash;
      
       },       

       get_hash: function() {
         var hashValue = window.location.hash.substring(window.location.hash.indexOf('#'));
         hashValue.replace('#','');
         return hashValue;        
       },

       hash_changed: function(newHash) {         
         if (newHash != this.last_hash) {
           switch (this.get_hash()) {
              case '':
              case '#':
                window.history.go(-(window.history.length - 1));
                bookingView.wizard.set_tab(1);
                break;
              case '#2':
                if (this.booking.total_cost == 0) {
                  this.set_hash('');
                }
                bookingView.wizard.set_tab(2);
                break;
              case '#3':
                if (this.booking.total_cost == 0) {
                  this.set_hash('');
                }
                bookingView.wizard.set_tab(3);
                break;
           }
         }
         this.last_hash = newHash;
       },

       change_state : function( action ) {
        
          switch (action) {
             
             case 'start' :
               this.process_state = 'item_selection';
               break;
        
             case 'check_availability':
               this.process_state = 'checking_availability';
               break;

             case 'check_availability_finished':
               this.process_state = 'availability_checked';
               break;

             case 'select_item' :
                this.process_state = "extras_selection";
                break;

             case 'select_extras' :
               this.process_state = 'completing_booking';              
               break;
                        
             case 'go_to_complete_booking':
               this.process_state = 'continue_booking';
               break;
             
             case 'send_booking':
               this.process_state = 'sending_booking';
               break;
               
             case 'booking_response_ok':
               this.process_state = 'process_completed';
               break;
               
             case 'booking_response_error':
               this.process_state = 'process_error';
               break;
          }
                
          bookingView.state_changed(this.process_state);
        
       },
       
       /* Choose item */
       
       preselect_item : function(item) { // Select the item (in product selection mode)

         this.booking.add_booking_line(item, 1);
         bookingView.calculate_prices();

       }, 

       choose_item : function(item) { // Choose the item for reservation (in date selection mode)
         
         this.booking.remove_booking_lines();
         this.booking.add_booking_line(item, 1); 
         this.change_state('select_item');
        
       },
              
       set_booking_line_item_quantity : function(item, new_quantity) { // Change the item quantity

         this.booking.change_booking_line_quantity(item, new_quantity); // Sets the item
         bookingView.update_information('booking_item');
        
       },

       set_pickup_place : function(pickup_place) {

        this.booking.pickup_place = pickup_place;

        var pickupPlaceRate = 0;

        if (pickup_place == '<%=t.new_booking.other%>') {
          pickupPlaceRate = bookingDataSystem.custom_pickup_return_place_price;
        }
        else {
          pickupPlaceRate = bookingDataSystem.pickup_placesRates[pickup_place];
        }
       
        this.booking.addCost(-this.booking.pickup_place_cost);
        this.booking.pickup_place_cost = pickupPlaceRate;
        this.booking.addCost(this.booking.pickup_place_cost); 
        bookingView.update_information('booking_cost');

       },

       set_return_place : function(return_place) {

        this.booking.return_place = return_place;
        var returnPlaceRate = 0;

        if (return_place == '<%=t.new_booking.other%>') {
          returnPlaceRate = bookingDataSystem.custom_pickup_return_place_price;
        }
        else {
          returnPlaceRate = bookingDataSystem.pickup_placesRates[return_place];
        }

        this.booking.addCost(-this.booking.return_place_cost);
        this.booking.return_place_cost = returnPlaceRate;
        this.booking.addCost(this.booking.return_place_cost); 
        bookingView.update_information('booking_cost');

       },


       /* Check availability */
       
       check_availability: function(date_from, time_from, date_to, time_to, pickup_place, return_place) {


          var from = date_from.toString("yyyy-MM-dd");
          var to = date_to.toString("yyyy-MM-dd");

          this.change_state('check_availability');

          $.ajax( 
                 {
                   type : 'GET',
                   url : '/api/booking/check?from='+from+'&to='+to,
                   dataType: 'json',
                   contentType: 'application/json; charset=utf-8', 
                                       
                   success : function(data, textStatus, jqXHR) { /* RESPONSE OK */
                     bookingModel.categoriesAvailable = data.availability || [];
                     bookingModel.stock = data.stock || {};
                     bookingModel.categoriesPaymentEnabled = data.payment || [];
                     bookingModel.calculate_price(date_from, time_from, date_to, time_to, pickup_place, return_place);
                     <% if booking_reservation_starts_with == :dates %>
                     bookingView.show_prices();
                     <% else %>
                     bookingView.show_family_form();
                     <% end %>
                     bookingModel.change_state('check_availability_finished');
                   }, 
                   
                   error: function(jqXHR, textStatus, errorThrow){ /* RESPONSE ERROR */
                     bookingModel.categoriesAvailable = [];
                     bookingModel.categoriesPaymentEnabled = [];
                     bookingModel.calculate_price(date_from, time_from, date_to, time_to, pickup_place, return_place);
                     <% if booking_reservation_starts_with == :dates %>
                     bookingView.show_prices();
                     <% else %>
                     bookingView.show_family_form();
                     <% end %>
                     bookingModel.change_state('check_availability_finished');
                   }
                   
                 });    
      

       },

       /* The business logic of calculating prices */
       
       calculate_price : function(date_from, time_from, date_to, time_to, pickup_place, return_place) {
        
         this.booking.date_from = date_from; 
         this.booking.time_from = time_from;
         
         this.booking.date_to = date_to; 
         this.booking.time_to = time_to;

         this.booking.pickup_place = pickup_place;
         this.booking.return_place = return_place;
                   
         var _date_from = new Date( date_from.toString("MM/dd/yyyy ") + time_from);
         var _date_to = new Date( date_to.toString("MM/dd/yyyy ") + time_to);
                   
         var dias_diferencia = Math.round((date_to - date_from) / (1000*60*60*24));
         var horas_diferencia = Math.round((_date_to - _date_from) / (1000*60*60));
         
         this.pendingTimeToStartBooking = (date_from - new Date()) / (1000*60*60);

         this.booking.days = Math.max(Math.floor(dias_diferencia),0);
         this.booking.date_to_price_calculation = new Date(this.booking.date_to.getTime());
         
         if (this.exceeded_hours > 0 && (horas_diferencia/24 > dias_diferencia + this.exceeded_hours/24) ) {
           this.booking.date_to_price_calculation.add( {days:1});
           this.booking.days++;
         }

         this.all_prices_base = bookingDataSystem.calculate_items_price(this.booking.date_from, 
                                                                   this.booking.date_to_price_calculation);
         this.all_prices = {};

         for (category in this.all_prices_base) {
           if (this.discount.value > 0) {
             if (this.discount.type == 'percentage') {
               this.all_prices[category] = this.all_prices_base[category] * (100 - this.discount.value) / 100;
             }
             else {
               this.all_prices[category] = this.all_prices_base[category] - this.discount.value;
             }
           }
           else {
             this.all_prices[category] = this.all_prices_base[category];
           }
         }     
         this.booking.recalcPrice();     
       },     
              
       add_extra : function (extra, quantity) { /* Add an extra */
        
        this.booking.add_extra (extra, quantity);
        
       },
       
       remove_extra: function (extra) { /* Remove an extra */
        
        this.booking.remove_extra (extra);
        
       },
       
       change_extra_quantity : function (extra, quantity) { /* Change extra quantity */
        
        this.booking.change_extra_quantity (extra, quantity);
        
       },
                    
       go_to_fill_data : function() { /* Go to fill data tab */
      
        this.change_state('go_to_complete_booking');

       },

       confirm_booking : function (data, payNow) { /* Confirms the booking */
         this.confirmBookingResponse = null;
         this.booking.pay_now = payNow;
         var bookingRequest = this.prepare_request_object(data);
         var json_request = this.stringifyRequest(bookingRequest);
         this.change_state('send_booking');            
         $.ajax( 
                 {
                   type : 'POST',
                   url :  '<%=confirm_booking_url%>', //bookingDataSystem.configuration.booking_url ||
                   data : json_request,
                   dataType: 'html',  /* Response expected from the server */
                   contentType: 'application/json; charset=utf-8', /* Data type sent to the server */
                                       
                   success : function(data, textStatus, jqXHR) { /* RESPONSE OK */
                     if (jqXHR.getResponseHeader('Content-Type').match(/application\/json/)) {
                       bookingModel.confirmBookingResponse = JSON.parse(data);  
                     }
                     else {
                       bookingModel.confirmBookingResponse = data;  
                     }
                     bookingModel.change_state('booking_response_ok'); /* textStatus y data */
                   }, 
                   
                   error: function(jqXHR, textStatus, errorThrow){ /* RESPONSE ERROR */
                     bookingModel.change_state('booking_response_error'); /* textStatus y errorThrow */
                   }
                   
                 });       
        
       },

       prepare_request_object : function (data) { /* Prepares the request object */
        
            // Creates a request object with all the information (mixin the model and the data passed)
       
           var request = {
              booking : data.booking
           };
                    
           // Drop the properties not necessary to the request (they only live in the Gui)         
                    
           delete request.booking['customer_email_confirmation'];   
           delete request.booking['driver_date_of_birth_day'];
           delete request.booking['driver_date_of_birth_month'];
           delete request.booking['driver_date_of_birth_year'];
           delete request.booking['driver_driving_license_date_day'];
           delete request.booking['driver_driving_license_date_month'];
           delete request.booking['driver_driving_license_date_year'];
     
                         
           // Copies the booking model data to the request (only the data)
                     
           for (data in this.booking) {
           
               if (typeof this.booking[data] != 'function')
               {
                 request.booking[data] = this.booking[data];
               }
               
           }
           
           // Copies the booking lines model data to the request
           request.booking.booking_lines = [];
           var line_index = 0;
           for (var index in this.booking.booking_lines) {
              request.booking.booking_lines[line_index] = {
                 item_id : index,
                 item_description : this.booking.booking_lines[index].item_description,
                 item_unit_cost_base: this.booking.booking_lines[index].item_unit_cost_base,
                 item_unit_cost: this.booking.booking_lines[index].item_unit_cost,                
                 item_cost: this.booking.booking_lines[index].item_cost,
                 quantity: this.booking.booking_lines[index].quantity,
                 product_deposit_unit_cost: this.booking.booking_lines[index].product_deposit_unit_cost,
                 product_deposit_cost: this.booking.booking_lines[index].product_deposit_cost,
                 booking_line_resources: this.booking.booking_lines[index].resources
              }
              for (var idx=0;idx<this.booking.booking_lines[index].quantity;idx++) {
                 if (!request.booking.booking_lines[line_index].booking_line_resources[idx]) {
                   request.booking.booking_lines[line_index].booking_line_resources[idx] = {};
                 }
              }
              line_index++;
           }

           // Copies the booking extras model data to the request
           request.booking.booking_extras = [];
           var extra_index = 0;
           for (var index in this.booking.booking_extras) {
             request.booking.booking_extras[extra_index++] = { 
               extra_id : index,
               extra_description: this.booking.booking_extras[index].extra_description,
               extra_cost : this.booking.booking_extras[index].extra_cost,
               extra_unit_cost : this.booking.booking_extras[index].extra_unit_cost,
               quantity : this.booking.booking_extras[index].quantity
             }
           }

           return request;
        
        
         },

         stringifyRequest : function(request) {

           return JSON.stringify(
                  request, function (key, value) {
                      // Convert the date objects (edited as input text) in the right format
                      if (this[key] instanceof Date) {
                        return this[key].toString();
                      }
                      else   
                      if ((key == 'driver_driving_license_date' || key == 'driver_date_of_birth')) {
                        
                        if (typeof value == 'string' && $.trim(value) != '')
                        {
                          return new Date(value).toString();  //return Date.parse(value,'d/M/yyyy').toUTCString();  
                        }
                        else
                        {
                          return null;  
                        }
                      }
                        return value;
                     });

       },

       check_promotion_code: function(promotion_code) {

         $.ajax({
                   type : 'POST',
                   url :  '/api/check-promotion-code?code='+promotion_code, 
                   contentType: 'application/json; charset=utf-8', /* Data type sent to the server */
                                       
                   success : function(data, textStatus, jqXHR) { /* RESPONSE OK */
                     var value = data.value;
                     var discount_type = data.discount_type;
                     bookingModel.apply_promotion_code(promotion_code, value, discount_type);
                   }, 
                   
                   error: function(jqXHR, textStatus, errorThrow) {
                     bookingView.promotionCodeError();
                   }
                }); 


       },

       apply_promotion_code: function(promotion_code, value, discount_type) {
         this.booking.apply_promotion_code(promotion_code, value, discount_type);
       }, 

       google_adwords_conversion: function(conversion_id, conversion_label,
                                           conversion_value, conversion_currency) {
         var w = window;
         w.google_conversion_id = conversion_id;
         w.google_conversion_label = conversion_label;
         w.google_conversion_value = conversion_value;
         w.google_conversion_currency = conversion_currency || "EUR";
         w.google_remarketing_only = false;
         window.google_conversion_format = "3";
         var opt = new Object();
         var conv_handler = window['google_trackConversion'];
         if (typeof(conv_handler) == 'function') {
           conv_handler(opt);
         }
       }
       
    };
    
    /* ---------------------------------------- */
    /* An object that represents the CONTROLLER */
    /* ---------------------------------------- */
    
    var bookingController = {
    
      change_from_date : function(date_from) {
          
      },
      
      hash_changed: function() {
        var hash = location.hash;
        bookingModel.hash_changed(hash);
      },

      select_family: function(item) { /* product selection click select family */

        if (typeof _gaq != 'undefined') {
          _gaq.push(['_trackEvent', 'Reservations', 'Choose item family', item]);
        }

        bookingModel.preselect_item(item);

      },

      change_item_quantity: function(item, quantity) {

        if (bookingModel.all_prices.length == 0) {
          bookingModel.calculate_price($('#datefrom').datepicker("getDate"), 
                                        $('#timefrom option:selected').val() || $('#timefrom').val(),
                                        $('#dateto').datepicker("getDate"), 
                                        $('#timeto option:selected').val() || $('#timeto').val(),
                                        $('#pickup_place_value').val(),
                                        $('#return_place_value').val()); 
        }
        bookingModel.set_booking_line_item_quantity(item, quantity);
        bookingView.calculate_prices();
      },

      shoopingCartPhotoClick: function(item) {

        var html = tmpl('script_detailed_product', {family: bookingDataSystem.families[item]});
        $('#popup').html(html);
        $('.product_detail_close').unbind('click');
        $('.product_detail_close').bind('click', function() {
          YSDGui.hideElement(document.getElementById('popup'));
        });
        YSDGui.showElement(document.getElementById('popup'), true, function() {
            $('#popup').html('');
        });

      },

      /* calculate the prices */
        
      calculate_prices : function (date_from, time_from, date_to, time_to, pickup_place, return_place) {
        
        if (typeof _gaq != 'undefined') {
          _gaq.push(['_trackEvent', 'Reservations', 'Show prices', date_from.toString("dd-MM-yyyy") + ' ' + date_to.toString("dd-MM-yyyy")]);
        }
        
        bookingModel.check_availability(date_from, time_from, date_to, time_to, pickup_place, return_place);

      },  
    
      /* start booking */
      
      start_booking : function (item) {
        
        if (typeof _gaq != 'undefined') {
          _gaq.push(['_trackEvent', 'Reservations', 'Choose item', item]);
        }

        bookingModel.choose_item(item);
         
      },
      
      go_to_fill_data_click : function() { /* Go to fill data button click */

        if (typeof _gaq != 'undefined') {
          _gaq.push(['_trackEvent', 'Reservations', 'Filling reservation']);
        }
      
        bookingModel.go_to_fill_data();

      },
      
      pay_now_button_click: function(data) { /* Go to payment button click */

        if (typeof _gaq != 'undefined') {
          var event_label = $('#booking\\[customer_email\\]').val() + ' ' + 
                            $('#booking\\[customer_name\\]').val() + ' ' +
                            $('#booking\\[customer_surname\\]').val();          
          _gaq.push(['_trackEvent', 'Reservations', 'Go to payment',
                     event_label,
                     bookingModel.booking.total_cost]);
        }

        <% if booking_adwords_active %>       
        bookingModel.google_adwords_conversion(
             <%=booking_adwords_booking_pay_now_conversion_id%>,
             '<%=booking_adwords_booking_pay_now_conversion_label%>',
             bookingModel.booking.total_cost, 'EUR');
        <% end %>
        
        bookingModel.confirm_booking(data, true);
      },

      confirm_booking : function (data) { /* Confirm button click */
        if (typeof _gaq != 'undefined') {
          var event_label = $('#booking\\[customer_email\\]').val() + ' ' + 
                            $('#booking\\[customer_name\\]').val() + ' ' +
                            $('#booking\\[customer_surname\\]').val();
          _gaq.push(['_trackEvent', 'Reservations', 'Confirm Booking',
                     event_label,
                     bookingModel.booking.total_cost]);
        }

        <% if booking_adwords_active %>
        bookingModel.google_adwords_conversion(
             <%=booking_adwords_booking_request_conversion_id%>,
             '<%=booking_adwords_booking_request_conversion_label%>',
             bookingModel.booking.total_cost, 'EUR');
        <% end %>

        bookingModel.confirm_booking(data, false);
      },
      
      check_extra : function(extra, quantity) { /* check an extra */
        bookingModel.add_extra(extra, quantity==='0'?1:new Number(quantity));
      },
      
      uncheck_extra : function(extra) {  /* uncheck an extra */
        bookingModel.remove_extra(extra);
      },

      change_extra_quantity: function(extra, quantity) { /* change the extra quantity */
         bookingModel.change_extra_quantity(extra, new Number(quantity)); 
      },
      
      change_pickup_place_select : function(pickup_place) { /* change pickup place */
        

        bookingModel.set_pickup_place(pickup_place);

        if ($('#pickup_place :selected').val() == '<%=t.new_booking.other%>' ) {
          $('#other_pickup_place').show();  
          $('#pickup_place_value').val('');
          $('#pickup_place_other').focus();
        } 
        else
        {
          $('#other_pickup_place').hide();
          $('#pickup_place_other').val(''); 
          $('#pickup_place_value').val(pickup_place);
        }
        
      },
      
      blur_pickup_place_input : function(pickup_place) {
      
        if ($('#pickup_place_other').val() != $('#pickup_place_value').val()) {
          $('#pickup_place_value').val(pickup_place);
          bookingModel.booking.pickup_place = pickup_place;
        }
                
      },
     
      change_return_place_select : function(return_place) { /* change return place */
        
        bookingModel.set_return_place(return_place);

        if ($('#return_place :selected').val() == '<%=t.new_booking.other%>'  ) {
          $('#other_return_place').show();
          $('#return_place_value').val('');   
          $('#return_place_other').focus();
        } 
        else
        {
          $('#other_return_place').hide();
          $('#return_place_other').val(''); 
          $('#return_place_value').val(return_place);
        }      
      
      },
      
      blur_return_place_input : function(return_place) {
        
        if ($('#return_place_other').val() != $('#return_place_value').val()) {
          $('#return_place_value').val(return_place);
          bookingModel.booking.return_place = return_place;
        }
        
      },
        
      /* Copy customer name to driver name */

      copy_customer_to_driver : function() {
        
        if ($('#booking\\[driver_name\\]').val() == '')
        {
          $('#booking\\[driver_name\\]').val($('#booking\\[customer_name\\]').val()); 
        }
      
        if ($('#booking\\[driver_surname\\]').val() == '')
        {
          $('#booking\\[driver_surname\\]').val($('#booking\\[customer_surname\\]').val()); 
        }
              
      },

      promotion_code_submit: function(promotion_code) {
        bookingModel.check_promotion_code(promotion_code);
      }
      
    };
    
    /* ---------------------------------- */
    /* An object that represents the VIEW */
    /* ---------------------------------- */
         
    var bookingView = {

       buttonPressed: null,
            
       configureBookingGui : function() { /* Configure the Gui elements using the booking configuration */
                     
         var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];

         $('#datefrom').datepicker({numberOfMonths:1, minDate:bookingDataSystem.configuration.min_date, 
          maxDate: new Date(bookingDataSystem.configuration.max_date).add(-1).days(), dateFormat: 'dd/mm/yy'}, locale);
         $('#datefrom').datepicker('setDate', '+0'); 

         $('#dateto').datepicker({numberOfMonths:1, minDate:new Date(bookingDataSystem.configuration.min_date).
            add(<%=booking_item_family.cycle_of_24_hours ? booking_min_days : booking_min_days - 1%>).days(),
            maxDate: bookingDataSystem.configuration.max_date , dateFormat: 'dd/mm/yy'}, locale);
         $('#dateto').datepicker('setDate', '+<%=booking_item_family.cycle_of_24_hours ? booking_min_days : booking_min_days - 1%>');

         $('#button_continua_rellenar_datos').bind('click', function(event) {
            bookingController.go_to_fill_data_click();
         });
 
         <% if booking_item_family.time_to_from %>
         var timetable = ['0:00','0:30','1:00','1:30','2:00','2:30','3:00','3:30',
                          '4:00','4:30','5:00','5:30','6:00','6:30',
         '7:00','7:30','8:00','8:30','9:00','9:30','10:00','10:30','11:00','11:30',
         '12:00','12:30','13:00','13:30','14:00','14:30','15:00','15:30','16:00','16:30','17:00',
         '17:30','18:00','18:30','19:00','19:30','20:00','20:30','21:00','21:30','22:00','22:30',
         '23:00','23:30'];
         var timetableDataSource = new MemoryDataSource(timetable);
         var timeFromSelectSelector = new SelectSelector('timefrom',timetableDataSource,'10:00');
         var timeToSelectSelector = new SelectSelector('timeto',timetableDataSource,'10:00');
         <% end %>

         <% if admin_mode %>
             $('#button_confirmar_reserva_manager').show();         
         <% else %>
           <% if booking_payment %>
             $('#button_ir_a_pagar_reserva').show();
             $('#reservation_payment_information').show();
             $('#button_confirmar_reserva').show();
           <% else %>  
             $('#button_ir_a_pagar_reserva').hide();
             $('#reservation_payment_information').hide();
             $('#button_confirmar_reserva').show();
           <% end %>
         <% end %>

         $('#button_confirmar_reserva_manager').bind('click', function(event) {
            bookingView.buttonPressed = 'request';
         });

         $('#button_confirmar_reserva').bind('click', function(event) {
            bookingView.buttonPressed = 'request';
         });

         $('#button_ir_a_pagar_reserva').bind('click', function(event) {
            bookingView.buttonPressed = 'pay';
         });         

       },       
       
       init : function () { /* Inits the View */
                                                
         // Configure the date controls
         // http://jquery-ui.googlecode.com/svn/trunk/ui/i18n/ (locales for datepicker)
         // http://keith-wood.name/uiDatepickerValidation.html (validation for datepicker)
         $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );
                       
         this.configureBookingGui();
              
         // Configure driver date of birth and driver license date 
         if (document.getElementById('booking[driver_date_of_birth_day]')) {                                           
           var dataControlDateOfBirth = new DateControl(document.getElementById('booking[driver_date_of_birth_day]'), 
                                              document.getElementById('booking[driver_date_of_birth_month]'),
                                              document.getElementById('booking[driver_date_of_birth_year]'), 
                                              document.getElementById('booking[driver_date_of_birth]'));
           <%if !booking.nil? and !booking.driver_date_of_birth.nil?%>
           dataControlDateOfBirth.setDate(new Date('<%="#{booking.driver_date_of_birth.strftime("%Y-%m-%d")}"%>'));
           <%end%>
         }
         if (document.getElementById('booking[driver_driving_license_date_day]')) {
           var dataControlLicenseDate = new DateControl(document.getElementById('booking[driver_driving_license_date_day]'), 
                                              document.getElementById('booking[driver_driving_license_date_month]'),
                                              document.getElementById('booking[driver_driving_license_date_year]'), 
                                              document.getElementById('booking[driver_driving_license_date]'));
           <%if !booking.nil? and !booking.driver_driving_license_date.nil?%>
           dataControlLicenseDate.setDate(new Date('<%="#{booking.driver_driving_license_date.strftime("%Y-%m-%d")}"%>'));
           <%end%>
         }
         
         $('#datefrom').bind('change', function() {
           var dateFrom = $('#datefrom').datepicker('getDate'); 
           var dateTo = $('#dateto').datepicker('getDate');
           dateTo.setDate(dateFrom.getDate() + <%=booking_item_family.cycle_of_24_hours ? booking_min_days : booking_min_days - 1%>);
           $('#dateto').datepicker('setDate', dateTo );
           $('#dateto').datepicker('option', 'minDate', dateFrom.add(<%=booking_item_family.cycle_of_24_hours ? booking_min_days : booking_min_days - 1%>).days());
         });

         $('#show_driver').bind('click',
           function(){
             $('#driver_data').toggle('slow', function() {
               if ($('#driver_data:visible').length>0) {
                 $('#show_driver').attr('data-icon', "\uE06E"); 
               }
               else {
                 $('#show_driver').attr('data-icon', "\uE06D");
               }
             });
         });


         $('#show_flight').bind('click',
           function(){
             $('#flight_data').toggle('slow', function() {
               if ($('#flight_data:visible').length>0) {
                 $('#show_flight').attr('data-icon', "\uE06E"); 
               }
               else {
                 $('#show_flight').attr('data-icon', "\uE06D");
               }
             });
         });         

         // Configure the comments textarea
         YSDForms.limit_text_area_content_size(document.getElementById('booking[comments]'), 256, 
            function (content_remain) {
              document.getElementById('booking_comments_length').innerHTML = '<strong>' + content_remain + '</strong>';
            }
         );                
         
         // configure place holders
         $('input[placeholder]:visible,textarea[placeholder]:visible').placeholder();
                      
         // Configure the pickup_place and return_place behaviour
         $('#pickup_place').bind('change',
           function() {
             bookingController.change_pickup_place_select($('#pickup_place option:selected').val());
           });
         $('#pickup_place_other').bind('blur',
           function() {
             bookingController.blur_pickup_place_input($(this).val());
           });
         $('#pickup_place_value').val($('#pickup_place option:selected').val());  
           
         $('#return_place').bind('change',
           function() {
             bookingController.change_return_place_select($('#return_place option:selected').val());
           });
         $('#return_place_other').bind('blur',
           function() {
             bookingController.blur_return_place_input($(this).val());
           });
         $('#return_place_value').val($('#return_place option:selected').val());  
                        
         // Configure the dialog(s)
         $('#checking-availability').dialog({autoOpen: false, height: 260, modal: true,
              closeOnEscape: false,
               open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); },
               close: function(event, ui) { $(".ui-dialog-titlebar-close").show(); }
             });
         $('#sending-booking').dialog({autoOpen: false, height: 260, modal: true,
              closeOnEscape: false,
               open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); },
               close: function(event, ui) { $(".ui-dialog-titlebar-close").show(); }
             });
                   
         // Configure name and surname events
         $('#booking\\[customer_name\\],#booking\\[customer_surname\\]').bind('blur',
             function(){
               bookingController.copy_customer_to_driver();
             }
           );
         
         <% if booking_reservation_starts_with == :categories %>
         this.init_families_selection();
         <% end %>

         <% if booking_reservation_starts_with == :shopcart %>
         this.init_shopping_cart();
         <% end %>

         // Configure validations 
         this.configure_validations();
        
         // Configure state
         this.state_changed(bookingModel.process_state);
    
         // Initialize the form
         this.init_form();  

         $(window).bind('hashchange', function(e) {
           bookingController.hash_changed();  
         });
         
         <% if booking_reservation_starts_with == :shopcart %> 
         this.calculate_prices(); // Calculate the prices for the current day
         <% end %>

       }, 
       
       init_families_selection: function() {

         var familiesHtml = '';
         var families = bookingDataSystem.families;
         
         var total = 0;
         for (family in families) {
           total++;
         }
         var current = 0;
         
         for (family in families) {
           familiesHtml += tmpl('script_families', {category: families[family],
              total: total, 
              totalRows : Math.ceil(total / 3),
              currentRow: Math.floor(current / 3),
              lastRowItems : total % 3,
              currentCol: current % 3             
              });
            current++;
         }  
         
         $('#items_families').html(familiesHtml); 

         $('.select_family').bind('click', function() {
            var family = $(this).attr('rel');
            $('.family').removeClass('all-border-solid');
            $('#family_'+family).addClass('all-border-solid');
            $('#families_to_extras').attr('rel', family );
            bookingController.select_family(family);
         });        

         $('#families_to_extras').bind('click', function() { /** Continue to extras **/
           bookingModel.change_state('select_item');
         });

         $('#datefrom').bind('change', function() {
            bookingView.calculate_prices();
         });

         $('#timefrom').bind('change', function() {
            bookingView.calculate_prices();
         });

         $('#dateto').bind('change', function() {
            bookingView.calculate_prices();
         });
         
         $('#timeto').bind('change', function() {
            bookingView.calculate_prices();
         });

       },

       init_shopping_cart: function() {

         var familiesHtml = '';
         var families = bookingDataSystem.families;
         
         var total = 0;
         for (family in families) {
           total++;
         }
         var current = 0;
         
         var numberOfColumns = 3;

         if (total > 20) {
           numberOfColumns = 6;
         }
         else
          if (total > 10) {
            numberOfColumns = 4;
          }

         for (family in families) {
           familiesHtml += tmpl('script_shopping_cart', {category: families[family],
              total: total, 
              totalCols : numberOfColumns,
              totalRows : Math.ceil(total / numberOfColumns),
              currentRow: Math.floor(current / numberOfColumns),
              lastRowItems : total % numberOfColumns,
              currentCol: current % numberOfColumns,
              all_prices: bookingModel.all_prices,
              all_prices_base: bookingModel.all_prices_base               
              });
            current++;
         }  
         
         $('#items_families').html(familiesHtml); 

         $('.shopping_cart_product_detail').bind('click', function(){
            var family = $(this).attr('rel');
            bookingController.shoopingCartPhotoClick(family);
         });

         $('.quantity').bind('change', function() {
            var family = $(this).attr('rel');
            var quantity = parseInt($(this).val()) || 0;
            bookingController.change_item_quantity(family, quantity);
         });
       
         $('#families_to_extras').bind('click', function() { /** Continue to extras **/
           bookingModel.change_state('select_item');
         });

         $('#datefrom').bind('change', function() {
            bookingView.calculate_prices();
         });

         $('#timefrom').bind('change', function() {
            bookingView.calculate_prices();
         });

         $('#dateto').bind('change', function() {
            bookingView.calculate_prices();
         });
         
         $('#timeto').bind('change', function() {
            bookingView.calculate_prices();
         });

         

       },

       init_form : function () {
        
          var url_vars = bookingModel.getUrlVars();
          
          var datefrom = decodeURIComponent(url_vars['datefrom']);        
          var timefrom = decodeURIComponent(url_vars['timefrom']);
          var dateto = decodeURIComponent(url_vars['dateto']);
          var timeto = decodeURIComponent(url_vars['timeto']);
          var number_of_adults = decodeURIComponent(url_vars['number_of_adults']);
          var number_of_children = decodeURIComponent(url_vars['number_of_children']);
          var source = decodeURIComponent(url_vars['source']);
          var pickup_place = decodeURIComponent(url_vars['pickup_place']);
          var pickup_place_other = decodeURIComponent(url_vars['pickup_place_other']);
          var return_place = decodeURIComponent(url_vars['return_place']);
          var return_place_other = decodeURIComponent(url_vars['return_place_other']);
          
          if (source != 'undefined') {
            $('#booking\\[source\\]').val(source);
          }

          if (datefrom != 'undefined' && dateto != 'undefined' && 
              $.datepicker.parseDate("dd/mm/yy", dateto) > $.datepicker.parseDate("dd/mm/yy", datefrom)) {          
            $('#datefrom').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", datefrom)); 
            $('#timefrom').val(timefrom);
            $('#dateto').datepicker("setDate", $.datepicker.parseDate("dd/mm/yy", dateto)); 
            $('#timeto').val(timeto);    
            $('#pickup_place').val(pickup_place.replace(/\+/g, ' '));
            $('#pickup_place_other').val(pickup_place_other.replace(/\+/g, ' '));
            if (pickup_place == '<%=t.new_booking.other%>') {
              $('#pickup_place_value').val($('#pickup_place_other').val());
              $('#other_pickup_place').show();
            }
            else {
              $('#pickup_place_value').val($('#pickup_place option:selected').val()); 
            }
            $('#return_place').val(return_place.replace(/\+/g, ' '));
            $('#return_place_other').val(return_place_other.replace(/\+/g, ' '));
            if (return_place == '<%=t.new_booking.other%>') {
              $('#return_place_value').val($('#return_place_other').val());
              $('other_return_place').show();
            }
            else {
              $('#return_place_value').val($('#return_place option:selected').val()); 
            }
            this.configureDates();  
            bookingModel.set_pickup_place($('#pickup_place').val());
            bookingModel.set_return_place($('#return_place').val());     
            this.calculate_prices();
          }

       },        
           
       configureDates : function() {

           var dateFrom = $('#datefrom').datepicker('getDate'); 
           var dateTo = $('#dateto').datepicker('getDate');
           var nDays = (dateTo - dateFrom) / (3600000*24);

           var dateToMin = $('#datefrom').datepicker('getDate');
           dateToMin.add(Math.max(<%=booking_item_family.cycle_of_24_hours ? booking_min_days : booking_min_days - 1%>, nDays)).days();
           
           if (dateTo < dateToMin) {
            dateTo = dateToMin;
           }

           $('#dateto').datepicker('setDate', dateTo );
           $('#dateto').datepicker('option', 'minDate', dateFrom.add(<%=booking_item_family.cycle_of_24_hours ? booking_min_days : booking_min_days - 1%>).days());

       },

       calculate_prices : function() {

            bookingController.calculate_prices($('#datefrom').datepicker("getDate"), 
                                               $('#timefrom option:selected').val() || $('#timefrom').val(),
                                               $('#dateto').datepicker("getDate"), 
                                               $('#timeto option:selected').val() || $('#timeto').val(),
                                               $('#pickup_place_value').val(),
                                               $('#return_place_value').val()); 
        
       },     
              
       configure_validations : function () {
        
        
         // Search item form validation
         
         $('#form-search-item').validate(
          {
            
            submitHandler: function(form) {
               bookingView.calculate_prices();
               return false;
            },
                               
            rules : {
           
               'datefrom': {
                 required: true 
               },
             
               'dateto': {
                 required: true,
                 dpCompareDate : { 'notLessThan' : '#datefrom'} // dateto can not be less than datefrom
               }
            
            },
            
            messages : {
              
               'datefrom': {
                 required : '<%=(booking_item_family.start_date_literal==:arrival)?(t.new_booking.arrival_date_mandatory):(t.new_booking.pickup_date_mandatory)%>'
               }, 
              
               'dateto' : {
                 required : '<%=(booking_item_family.start_date_literal==:arrival)?(t.new_booking.departure_date_mandatory):(t.new_booking.return_date_mandatory)%>',
                 dpCompareDate : '<%=(booking_item_family.start_date_literal==:arrival)?(t.new_booking.departure_date_greater_arrival_date):(t.new_booking.return_date_greater_pickup_date)%>'
               }  
            },
            
            errorPlacement : function(error, element) {
              
              if (element.attr('name') === 'datefrom') {
                error.insertAfter('#timefrom');
              }
              
              if (element.attr('name') === 'dateto') {
                error.insertAfter('#timeto'); 
              }
              
            }
            
            
          }
         );

        $.validator.addMethod('number_of_adults',
          function(value, element) {

           if (bookingDataSystem.families[$('#booking\\[item_id\\]').val()] &&
               bookingDataSystem.families[$('#booking\\[item_id\\]').val()].maxNumberOfAdults) {
             return bookingDataSystem.families[$('#booking\\[item_id\\]').val()].maxNumberOfAdults >= 
               parseInt($('#booking\\[number_of_adults\\]').val());
           }

           return true;

          });

        $.validator.addMethod('number_of_children',
          function(value, element) {

           if (bookingDataSystem.families[$('#booking\\[item_id\\]').val()] &&
               bookingDataSystem.families[$('#booking\\[item_id\\]').val()].maxNumberOfChildren) {
             return bookingDataSystem.families[$('#booking\\[item_id\\]').val()].maxNumberOfChildren >= 
               parseInt($('#booking\\[number_of_children\\]').val());
           }

           return true;

          });

        // Booking Form Validation
        $('#form-reservation').validate(
         {
          
           submitHandler: function(form) {
             $('#reservation_error').html('');
             if (bookingView.buttonPressed == 'pay') {
               bookingController.pay_now_button_click($(form).formParams(false));
             } 
             else {
               bookingController.confirm_booking($(form).formParams(false)); // Numbers and booleans are not converted (hold as strings)
             }
             return false;
           },
           
           invalidHandler : function (form, validator) {
             $('#reservation_error').html('<%=t.new_booking.form_errors.description%>');
           },
           
           rules : {
            
            'booking[number_of_adults]' : 'number_of_adults',
            'booking[number_of_children]' : 'number_of_children',
            'booking[customer_name]': 'required',
            'booking[customer_surname]' : 'required',
            'booking[customer_email]' : {
              required: true,
              email: true 
            },
            'booking[customer_email_confirmation]': {
              required: true,
              email: true,
              equalTo : '#booking\\[customer_email\\]'  /* scape slash with brackets \\[email\\] */
            },
            'booking[customer_phone]': {
              required: true,
              minlength: 9  
            },
            'booking[driver_date_of_birth]': {
              required: "#fs_driver:visible"  
            },
            <% if booking_item_family.height_mandatory %>
            'booking[customer_height]' : 'required',
            <% end%>
            <% if booking_item_family.weight_mandatory %>
            'booking[customer_weight]' : 'required',
            <% end%>            
            'conditions_read' :  {
              required: '#conditions_read:visible'
            }
           },
           
           messages : {
            
            'booking[number_of_adults]' : '<%=t.new_booking.guests_limit(t.booking_items[booking_item_type.to_sym])%>',
            'booking[number_of_children]' : '<%=t.new_booking.guests_limit(t.booking_items[booking_item_type.to_sym])%>',             
            'booking[customer_name]': '<%=t.new_booking.customer_name.required%>',
            'booking[customer_surname]' : '<%=t.new_booking.customer_surname.required%>',
            
            'booking[customer_email]' : {
               required: '<%=t.new_booking.customer_email.required%>',
               email: '<%=t.new_booking.customer_email.format%>'
            },
            
            'booking[customer_email_confirmation]': {
              'required': '<%=t.new_booking.customer_email_confirmation.required%>',  
              email: '<%=t.new_booking.customer_email_confirmation.format%>',
              'equalTo': '<%=t.new_booking.customer_email_confirmation.equal_to%>'
            },
            
            'booking[customer_phone]': {
              'required': '<%=t.new_booking.customer_phone.required%>',
              'minlength': '<%=t.new_booking.customer_phone.min_length%>' 
            }, 
            'booking[driver_date_of_birth]': {
              'required': '<%=t.new_driving_booking.driver_date_of_birth.required%>'  
            },        
            'booking[pickup_place]': {
              'required': '<%=t.new_booking.pickup_place_required%>'  
            },
            'booking[return_place]': {
              'required': '<%=t.new_booking.return_place_required%>'  
            },
            <% if booking_item_family.height_mandatory %>
            'booking[customer_height]' : '<%=t.new_booking.height.required%>',
            <% end%>
            <% if booking_item_family.weight_mandatory %>
            'booking[customer_weight]' : '<%=t.new_booking.weight.required%>',
            <% end%>               
            'conditions_read': '<%=t.new_booking.conditions.required%>'
            
           },
        
           errorPlacement: function (error, element) {
              
              if (element.attr('name') == 'conditions_read' || 
                  element.attr('name') == 'booking[number_of_adults]' ||
                  element.attr('name') == 'booking[number_of_children]' )
              {
                error.insertAfter(element.parent()); 
              }
              else
              {
                error.insertAfter(element);
              }
              
           },
           
           errorClass : 'form-reservation-error'            
                   
         }
        );

        // Promotion code  
        $('#form_promotion_code').validate({
          
           submitHandler: function(form) {
             $('#promotion_code_response').html('');
             bookingController.promotion_code_submit(form.promotion_code.value);
             return false;
           },

           rules: {
              'promotion_code': {
                required: true,
                minlength: 9  
               },
           },

           messages: {
               'promotion_code' : {
                 required: '<%=t.new_booking.promotion_code_required%>',
                 minlength: '<%=t.new_booking.promotion_code_min_length%>'                 
               }
           },
           errorPlacement: function (error, element) {
              error.appendTo(document.getElementById('promotion_code_response'));
           }

        });

       },
         
       show_family_form: function() { /* Show the family form (when selecting by category) */
         
         var family = $('#families_to_extras').attr('rel');
         var price = bookingModel.booking.total_cost + '€';
         $('#price').html(price);
         $('#number_of_days').html(bookingModel.booking.days + (bookingModel.booking.days == 1 ? ' <%=t.new_booking.day%>' : ' <%=t.new_booking.days%>'));
 
         <% if booking_reservation_starts_with == :categories %>
           <% if (admin_mode) %>
              var notAvailable = '<span class="booking-not-available centered_text" style="display:block"><%=t.new_booking.not_available_manager%></span>';
           <% else %>
              var notAvailable = '<span class="booking-not-available centered_text" style="display:block"><%=t.new_booking.not_available%></span>';
           <% end %>

           var available = true;
           for (family in bookingModel.booking.booking_lines) {
             if (bookingModel.categoriesAvailable.indexOf(family) == -1) {
               available = false;
               break;
             }
           }
           if (!available) {
             $('#availability').html(notAvailable); 
             <% unless (admin_mode) %>
               $('#families_to_extras').hide();
             <% end %>
           }
           else {
             $('#availability').html('');
             $('#families_to_extras').show();
           }
         <% elsif booking_reservation_starts_with == :shopcart %>
           for (family in bookingDataSystem.families) {
             if (bookingModel.categoriesAvailable.indexOf(family) == -1) {
               if (bookingModel.booking.booking_lines[family]) {
                 bookingController.change_item_quantity(family, 0);
               }
               $('.category_not_available[rel="' + family + '"]').show();
               <% if admin_mode %>
               $('.select-category[rel="' + family + '"]').show();
               <% else %>
               $('.select-category[rel="' + family + '"]').hide();
               <% end %>                 
             }
             else {
               $('.select-category[rel="' + family + '"]').show();
               $('.category_not_available[rel="' + family + '"]').hide();            
             }
           }           
         <% end %>

         var booking_lines = bookingModel.booking.booking_lines_as_array();

         if (booking_lines.length >= 1) {
             $('#itemized_price').html( 
              tmpl('script_detailed_price', {
                            booking: bookingModel.booking,
                            all_prices_base: bookingModel.all_prices_base, 
                            bookingDataSystem: bookingDataSystem}) );
             $('#family-selection').show();
         }
         else {
            $('#itemized_price').html('');
            $('#family-selection').hide();
         }

       },

       show_prices : function() { /* Show search result */

         var container = $('#result');
      
         // Unbind the previous click handlers
         $('.book-button').unbind('click');
      
      
         container.empty();
      
         var prices = bookingModel.all_prices;
         
         <% if (admin_mode) %>
         var notAvailable = '<span class="booking-not-available"><%=t.new_booking.not_available_manager%></span>';
         <% else %>
         var notAvailable = '<span class="booking-not-available"><%=t.new_booking.not_available%></span>';
         <% end %>

         // Puts the prices      
         for (var family in prices) 
         {
        
           var content =
              '<div class="container_12">'+       
                '<div itemscope itemtype="http://schema.org/Product" class="bottom-separator car '+family+'">' +
                  '<div class="car_photo_container grid_4">' +
                    '<img itemprop="image" style="margin:5px;width:90%" src="' + bookingDataSystem.families[family].photo + '"/>' + //src="/img/clase-'+family+'-big.png"/>' +
                  '</div>' +
                  '<div class="car_description_container grid_5 top-margin">' +
                    '<div class="left-margin">' +
                      '<div class="car_detail_description"><span class="car_family_description" itemprop="name">'+bookingDataSystem.families[family].description+'</span></div>' +
                      '<div class="car_detail_cars"><span class="car_family_cars" itemprop="description">'+bookingDataSystem.families[family].fullDescription+'</span></div>'+
                    '</div>' +
                  '</div>';
     
           var buttonSelect = '<input type="button" class="form-button blue-button book-button" id="button_start_booking_'+family+'" value="<%=t.new_booking.booking%>" rel="'+family+'" />';
           <% if admin_mode %>
             var available = (bookingModel.categoriesAvailable.indexOf(family) > - 1) ? buttonSelect : notAvailable + '<br/><br/>' + buttonSelect;
           <% else %>
             var available = (bookingModel.categoriesAvailable.indexOf(family) > - 1) ? buttonSelect : notAvailable ;
           <% end%>

           var dailyPrice = new Number(prices[family] / bookingModel.booking.days).toFixed(bookingDataSystem.configuration.roundDecimals || 2);

           content += 
              '<div class="grid_3">' + 
              '<div class="car_price_container" itemprop="offers" itemscope itemtype="http://schema.org/Offer">'+
                (bookingModel.discount.value > 0 ? '<div class="car_price_total_base">' + bookingModel.all_prices_base[family].toFixed(bookingDataSystem.configuration.roundDecimals || 0) + '€</div><div class="car_price_total_base_offer"><%=t.new_booking.offer%></div>' : '') +
                '<div class="car_price_total"><span itemprop="price">'+prices[family].toFixed(bookingDataSystem.configuration.roundDecimals || 0) + '€' + '</span></div>' +
                '<div class="car_daily_price centered_text"><span class="smaller_text more_contrast_text">'+ dailyPrice + '€/' + '<%=t.new_booking.by_day%>' +'</span></div>'+
                '<div class="car_price_booking top-margin">' + 
                  available + 
                '</div>' +                
              '</div>'+
              '</div>' + 
              '</div>';
                      
           container.append( content ); 
                      
         }
         
         $('.book-button').bind('click', function() {
            bookingController.start_booking($(this).attr('rel'));
         }); // configure the events
         
       },
       
       /* ------ Load resources attributes ---------- */

       load_resources_attributes: function() {
  
         <% if booking_item_family.named_resources %> 
         var resourcesHtml = tmpl('script_resources_attributes', {booking: bookingModel.booking, bookingDataSystem: bookingDataSystem});
         $('#resources_attributes').html(resourcesHtml);

         $('.resource_user_name').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_name = $(this).val();
         });
         $('.resource_user_surname').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_surname = $(this).val();
         });
         $('.resource_user_document_id').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_document_id = $(this).val();
         });
         $('.resource_user_phone').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_phone = $(this).val();
         });
         $('.resource_user_email').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_email = $(this).val();
         });

         $('.resource_user_2_name').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_2_name = $(this).val();
         });
         $('.resource_user_2_surname').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_2_surname = $(this).val();
         });
         $('.resource_user_2_document_id').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_2_document_id = $(this).val();
         });
         $('.resource_user_2_phone').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_2_phone = $(this).val();
         });
         $('.resource_user_2_email').bind('blur', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].resource_user_2_email = $(this).val();
         });

         <% if booking_item_family.weight or booking_item_family.height %>
         $('.weight').bind('change', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].customer_weight = $(this).val();
         });
         $('.height').bind('change', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].customer_height = $(this).val();
         });   
         $('.weight_2').bind('change', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].customer_2_weight = $(this).val();
         });
         $('.height_2').bind('change', function(event) {
           var family = $(this).attr('rel');
           var idx = $(this).attr('data-idx');
           if (!bookingModel.booking.booking_lines[family].resources[idx]) {
            bookingModel.booking.booking_lines[family].resources[idx] = {pax: bookingDataSystem.families[family].capacity};
           }  
           bookingModel.booking.booking_lines[family].resources[idx].customer_2_height = $(this).val();
         });            
         <% end %>

         <% end %>


       },

       /* ------ Load the extras -------------------- */
       
       load_extras : function() {
       
         var extrasHtml = '';
         var extras = bookingDataSystem.extras;

         var extrasCount = 0;         
         for (extra in extras) {
           extrasHtml += tmpl('script_extras', {extra: extras[extra], optional: bookingModel.booking.optional});
           extrasCount++;
         }  

         if (extrasCount == 0) {
          $('#fs_summary_extras').hide();
         }
         
         $('#tblextras tbody').html(extrasHtml);
         $('.extra').bind('click', 
           function() { 
              var control = '#' + $(this).attr('rel').replace(/\[/g,'\\[').replace(/\]/g,'\\]');
            if ($(this).is(':checked')) 
            {           
              var value = parseInt($(control).val()) || 1;
              bookingController.check_extra($(this).val(), value);
              if ($(control)){
                $(control).val(value.toString()); 
              }
            }
            else
            {
              bookingController.uncheck_extra($(this).val());
              if ($(control)) {
                $(control).val('0');
              }
            } 
          }
          );
         $('.extraquantity').bind('change',
           function() {
             bookingController.change_extra_quantity($(this).attr('rel'), $(this).val());
           }
         );       
        
       },
       
       /* ------ Load pickup places ------ */

       load_pickup_places : function() {

          var comboItems = document.getElementById('pickup_place');
          
          if (comboItems == null) {
            return;
          }  

          // Remove the options
          if (comboItems.options.length > 0)
          {
            while (comboItems.hasChildNodes())
            {
              comboItems.removeChild(comboItems.firstChild);  
            }
          }
          
          // Add the new options
          for (var pickup_place_id in bookingModel.pickup_places)
          {
              var optionItem = document.createElement('option');
              optionItem.setAttribute('value', pickup_place_id);  
              var text = bookingDataSystem.pickup_places[pickup_place_id];
              if (bookingDataSystem.pickup_placesRates[pickup_place_id]>0) {
                 text += " (" + bookingDataSystem.pickup_placesRates[pickup_place_id] + "€)";
              }
              optionItem.text = optionItem.innerText = text;
              comboItems.appendChild(optionItem);
          }

          <% if booking_allow_custom_pickup_return_place %>
              var optionItem = document.createElement('option');
              optionItem.setAttribute('value', '<%=t.new_booking.other%>');  
              optionItem.text = optionItem.innerText = '<%=t.new_booking.other%>';
              if (bookingDataSystem.custom_pickup_return_place_price > 0) {
                optionItem.text += " (" + bookingDataSystem.custom_pickup_return_place_price + "€)";
              }              
              comboItems.appendChild(optionItem);    
          <% end %>

          // stores the pick up place in the form
          $('#pickup_place_value').val($('#pickup_place option:selected').val());

       },

       /* ------ Load return places -------- */

       load_return_places : function() {

          var comboItems = document.getElementById('return_place');
          
          if (comboItems == null) {
            return;
          }  

          // Remove the options
          if (comboItems.options.length > 0)
          {
            while (comboItems.hasChildNodes())
            {
              comboItems.removeChild(comboItems.firstChild);  
            }
          }
          
          // Add the new options
          
          for (var return_place_id in bookingModel.return_places)
          {
              var optionItem = document.createElement('option');
              optionItem.setAttribute('value', return_place_id); 
              var text = bookingDataSystem.return_places[return_place_id];
              if (bookingDataSystem.return_placesRates[return_place_id]>0) {
                 text += " (" + bookingDataSystem.return_placesRates[return_place_id] + "€)";
              } 
              optionItem.text = optionItem.innerText = text;
              comboItems.appendChild(optionItem);
          }

          <% if booking_allow_custom_pickup_return_place %>
              var optionItem = document.createElement('option');
              optionItem.setAttribute('value', '<%=t.new_booking.other%>');  
              optionItem.text = optionItem.innerText = '<%=t.new_booking.other%>';
              if (bookingDataSystem.custom_pickup_return_place_price > 0) {
                optionItem.text += " (" + bookingDataSystem.custom_pickup_return_place_price + "€)";
              }
              comboItems.appendChild(optionItem);    
          <% end %>          

          // stores the pick up place in the form
          $('#return_place_value').val($('#return_place option:selected').val());

       },

       /* ------ Load stock ------------ */
       load_stock: function() {

          for (family in bookingModel.stock) {
             var value = $('select.quantity[rel="'+family+'"]').val();
             $('select.quantity[rel="'+family+'"]').find('option').remove();
             var limit = Math.min(10, bookingModel.stock[family].stock-bookingModel.stock[family].busy);
             for (var idx=0;idx<=limit;idx++) {
               $('select.quantity[rel="'+family+'"]').append(
                 '<option value="'+ idx+'">' + idx+ '</option>');
             }
             $('select.quantity[rel="'+family+'"]').val(value);
             $('div.shopping_cart_product_price[rel="'+family+'"]').html(bookingModel.all_prices[family]+' €');
             if (bookingModel.all_prices_base[family] != bookingModel.all_prices[family]) {
               $('div.shopping_cart_product_price_base[rel="'+family+'"]').html(bookingModel.all_prices_base[family]+ ' €');
               $('div.car_price_total_base_offer[rel="'+family+'"]').html('<%=t.new_booking.offer%>');
             }
             else {
               $('div.shopping_cart_product_price_base[rel="'+family+'"]').html('');
               $('div.car_price_total_base_offer[rel="'+family+'"]').html('');
             }
          }

       },

       /* ------ Check payment --------- */

       check_payment: function() {

          if ($('#button_ir_a_pagar_reserva').is(":visible") && 
              bookingModel.pendingTimeToStartBooking < <%= booking_payment_cadence %>) {
            $('#button_ir_a_pagar_reserva').hide();
            $('#reservation_payment_information').hide();
          }
          else {
            if (!$('#button_ir_a_pagar_reserva').is(":visible")) {

              var notAllowed = bookingModel.booking.booking_lines_as_array().filter(function(obj){
                return bookingModel.categoriesPaymentEnabled.indexOf(obj.item_id) == -1;
              });

              if (notAllowed.length == 0) {
                $('#button_ir_a_pagar_reserva').show();
                $('#reservation_payment_information').show();
              }
            }
          }

       },

       /* ------ Reflect the state change ----------- */
       
       state_changed : function(new_state) {
        
         switch (new_state) {
          
           case 'item_selection' : /* First state (begin process) */
             this.load_pickup_places();
             this.load_return_places();
             break;
                
           case 'checking_availability': /* Second state (checking availability) */
             $('#checking-availability').dialog('open');
             break;
  
           case 'availability_checked':
             this.load_stock();
             $('#checking-availability').dialog('close');
             break;

           case 'extras_selection' : /* Second state (user choose an item and starts bookin) */
             this.update_information('booking_data');    
             this.load_resources_attributes();                      
             this.load_extras();
             break;

           case 'completing_booking' : /* Third state (user choose an item and starts booking) */
           case 'continue_booking' : /* Alternative state (user comes back to complete booking) */
             break;
                    
           case 'sending_booking' : /* Sending the booking using Ajax (user clicks confirm button) */
             $('#sending-booking').dialog('open');
             break;
            
           case 'process_completed' : /* The booking has been saved in the system */
             $('#sending-booking').dialog('close');   
             if (typeof(bookingModel.confirmBookingResponse) == 'string') {
               document.write(bookingModel.confirmBookingResponse); 
               return;
             }
             break;
            
            case 'process_error' : /* The booking has not been saved in the system */
              $('#sending-booking').dialog('close');
              $('<div title="<%=t.new_booking.booking_creation_error.title%>"> <%=t.new_booking.booking_creation_error.description%> </div>').dialog( { height: 260, modal: true,        
                buttons: {
                    Ok: function() {
                        $(this).dialog("close");
                      }
                    },
                    close : function(event, ui) {
                        $( this ).dialog( "close" );        
                    }
                });                       
              break;
         }
         
         this.wizard.state_changed(new_state);
        
       },

       /* --------- UPDATE DATA ---------------- */  
       update_information : function(information) {
        
         switch (information) {
          
           case 'booking_data' :
             var date_time_from = new Date(bookingModel.booking.date_from).toString( "dddd, d MMMM yyyy");
             var date_time_to = new Date(bookingModel.booking.date_to).toString( "dddd, d MMMM yyyy");
             <% if booking_item_family.time_to_from %>
             date_time_from += ' ' +bookingModel.booking.time_from; 
             date_time_to +=  ' ' +bookingModel.booking.time_to;
             <% end %>
             $('#date_from_extended').val( date_time_from );  
             $('#date_to_extended').val( date_time_to );
             $('#pickup_place_extended').html( bookingModel.booking.pickup_place );
             $('#return_place_extended').html( bookingModel.booking.return_place );

           case 'booking_item' :
             var booking_lines = bookingModel.booking.booking_lines_as_array();
             if (booking_lines.length == 1) {
               var family = booking_lines.length > 0 ? booking_lines[0].item_id : null;
               if (family != null) {
                 var path=bookingDataSystem.families[family].photo;
                 $('#item_image').attr('src',path);
                 $('#item_description').html(bookingDataSystem.families[family].description);
               }
               else {
                 $('#item_image').removeAttr('src');
                 $('#item_description').html('');
               }
             }

           case 'booking_cost' :
             $('#price').html(bookingModel.booking.total_cost.toFixed(bookingDataSystem.configuration.roundDecimals || 0) + '€' );
             $('#itemized_price').html( 
              tmpl('script_detailed_price', {
                            booking: bookingModel.booking,
                            all_prices_base: bookingModel.all_prices_base, 
                            bookingDataSystem: bookingDataSystem}) );
             $('#total_cost').val( bookingModel.booking.total_cost.toFixed(bookingDataSystem.configuration.roundDecimals || 0) + '€' );
             $('#detailed_summary').html( 
              tmpl('script_detailed_price', {
                            booking: bookingModel.booking, 
                            all_prices_base: bookingModel.all_prices_base, 
                            bookingDataSystem: bookingDataSystem}) );
             $('#button_calcular_tarifas').val('<%=t.new_booking.update%>')
             break;
           
           case 'booking_extras' :
                                  
               // Uncheck the removed extras
               $('.extra').each( function(index, element) {
                if ($(this).is(':checked') && bookingModel.booking.booking_extras[$(this).attr('value')] == null) {
                  $(this).attr('checked', false);
                }
               });  
               
               // Update the extras
             var extras = bookingModel.booking.booking_extras;
               for (var extra_id in extras) {
                 
                 // Extras checkbox
                 var checkbox = $('#extras\\['+extra_id+'\\[extra_id\\]\\]');
                
                 if (!checkbox.is(':checked')) {
                  checkbox.attr('checked', true);
                 }
             
                 // Extras quantity
                 var option = $('#extras\\['+extra_id+'\\[quantity\\]\\]');
                 
                 if (option.val() != extras[extra_id].quantity)
                 {
                   option.val(extras[extra_id].quantity); 
                 }                 
                 
             }
                           
             /* Update the cost */
               this.update_information('booking_cost');
               break;
          
         }
        
       },  
                      
       promotionCodeError: function() {
         $('#promotion_code_response').html('<%=t.new_booking.invalid_promotion_code%>');
       },           

       promotionCodeApplied: function() {
         $('#promotion_code_response').html('<%=t.new_booking.promotion_code_applied%>');
       },

       wizard : {
        
          current_tab : 0,
          tabs : { 
                 'tab-choose-item' : new WizardTab ('tab-choose-item', true),
                 'tab-choose-extras' : new WizardTab ('tab-choose-extras', true),
                 'tab-complete-reservation' : new WizardTab('tab-complete-reservation', true)
                },
               
          state_changed : function (new_state) {
         
            switch (new_state) {
            
              case 'item_selection' : /* Item selection tab */
                this.set_tab(1);
                bookingModel.set_hash('');
                break;
              
              case 'extras_selection': /* Extras selection tab */
                this.set_tab(2);
                bookingModel.set_hash('#2');
                break;

              case 'completing_booking' : /* Complete booking data tab */
              case 'continue_booking' :
              case 'process_completed': 
                this.set_tab(3);
                bookingView.check_payment();
                bookingModel.set_hash('#3');
                break;
            }

          },

          set_tab: function(tab) {
            if (this.current_tab == tab) {
              return;
            }
            switch (tab) {
               case 1:
                 $('#other-tabs').hide();
                 $('#form-reservation').hide();
                 $('#item-selection').show();
                 $('#extras-selection').hide();
                 this.tabs['tab-choose-item'].setState('active'); 
                 this.tabs['tab-choose-extras'].setState('not-enabled'); 
                 this.tabs['tab-complete-reservation'].setState('not-enabled');                                
                 break;
               case 2:
                 $('#other-tabs').show();
                 $('#form-reservation').hide();
                 $('#item-selection').hide();
                 $('#extras-selection').show(); 
                 this.tabs['tab-choose-item'].setState('not-enabled'); 
                 this.tabs['tab-choose-extras'].setState('active'); 
                 this.tabs['tab-complete-reservation'].setState('not-enabled');                               
                 break;
               case 3:
                 $('#other-tabs').show();
                 $('#item-selection').hide();
                 $('#extras-selection').hide();                
                 $('#form-reservation').show();
                 this.tabs['tab-choose-item'].setState('not-enabled'); 
                 this.tabs['tab-choose-extras'].setState('not-enabled');                 
                 this.tabs['tab-complete-reservation'].setState('active');                                
                 break;
            }
            this.current_tab = tab;
          
         },
         
         show : function() {
          $('#wizard-navigation').show();
         },
         
         hide: function() {
          $('#wizard-navigation').hide();
         }
        
       }
                              
                              
    };
    
    bookingView.init();
  
  });